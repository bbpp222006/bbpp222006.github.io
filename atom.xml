<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Glider的博客</title>
    <subtitle>I thought what I&#x27;d do was,I&#x27;d pretend I was one of those deaf-mutes. or should i?</subtitle>
    <link rel="self" type="application/atom+xml" href="https://bbpp222006.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://bbpp222006.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-07-30T00:00:00+00:00</updated>
    <id>https://bbpp222006.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>群众抗争的力量：中国地方精英博弈-翻译</title>
        <published>2024-07-30T00:00:00+00:00</published>
        <updated>2024-07-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/群众抗争的力量：中国地方精英博弈/"/>
        <id>https://bbpp222006.github.io/群众抗争的力量：中国地方精英博弈/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/群众抗争的力量：中国地方精英博弈/">&lt;h1 id=&quot;背景&quot;&gt;背景&lt;&#x2F;h1&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;https:&#x2F;&#x2F;papers.ssrn.com&#x2F;sol3&#x2F;papers.cfm?abstract_id=3342475
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;书籍基本信息
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    书名：《同意不稳定：群众力量在中国地方精英博弈中的作用》
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    作者：小马（Xiao Ma）
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    出版日期：2019年2月
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    出版社：《中国评论》（The China Review）
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;背景信息
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    作者简介：小马是北京大学政府学院中国政治研究中心的副教授，主要研究领域为中国政治。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    书籍背景：该书籍探讨了在中国地方官员如何利用群众动员来争取政策让步的问题。作者通过案例研究和调查实验，揭示了地方官员与民众之间一种特殊的关系，即在某些情况下，地方官员会策略性地容忍甚至利用民众的抗争来增强自己的议价能力。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    内容概要
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        主要内容：本书重点分析了在中国官僚政治中，人民的力量如何塑造内部精英之间的博弈。作者通过一个关于县级行政区划改革的案例研究，阐述了“同意不稳定”这一概念，即地方官员策略性地容忍底层动员以增强自己的议价权力。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        结构概览：本书分为以下几个部分：定义“同意不稳定”，案例分析，调查实验，以及结论。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;专业范围
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    领域描述：本书涉及中国政治学、行政学、社会学等领域。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    关键术语：同意不稳定、群众动员、官僚政治、政策让步、基层官员、集体行动、公共利益。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;翻译重点
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    语言风格：本书语言严谨，逻辑清晰，注重实证分析。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    注意事项：翻译时应注意术语的准确翻译和文化差异的处理。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    参考资料：可以参考中国政治学、行政学、社会学的相关专著和学术期刊，以及相关的调查报告和统计数据。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;&#x2F;h2&gt;
&lt;p&gt;本研究探讨了地方官员如何策略性地接纳和利用民众动员，以从上级管理层获得政策让步。当民众的诉求与地方官员未能实现的目标相吻合时，地方官员会策略性地接纳民众动员。街头抗议者成为了地方官员手中的有力筹码，他们预先展示了若上级领导拒绝民众诉求，将可能引发社会动荡。本文阐述了产生这种策略的制度环境，并深入开展了关于县级行政区划改革的案例研究。&lt;&#x2F;p&gt;
&lt;p&gt;分析了在行政区域调整的背景下，地方官员与民众之间的集体动员联盟，并探讨了这种“同意不稳定”现象在中国其他议题领域的普遍性。对中国官员进行的一项调查实验结果显示，当民众的压力支持其下属的要求时，官员更倾向于满足这些要求。研究揭示了被研究者们忽视的中国官僚政治中精英与民众之间的重要联系。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h2&gt;
&lt;p&gt;2013年1月，C县的1000多名居民在县政府办公楼前举行为期一场抗议。事件的起因是H市，我将其称为H市，对该县进行管理的官员决定将C县改为其直接管辖的市辖区。因此，这实际上是一项将C县并入H市的提议。C县是该市最富有的县之一，财政独立，这意味着其强大的税基可以提供城市便利，并且县级官员享有区级官员所不具备的自治权。C县的居民将县的相对独立性看作是一种骄傲，并认为合并将对其生活的多个方面产生负面影响，例如本地公共服务的质量。虽然中国官员普遍将社会稳定视为首要任务，但有明确的证据表明，C县官员并未采取措施阻止此次抗议，甚至站在了组织者的一边。&lt;&#x2F;p&gt;
&lt;p&gt;以C县为例，本文研究了民众力量如何塑造威权体制内的精英内部协商。我提出，在中国某些地区存在的“同意不稳定”现象，其中地方官员战略性地容忍来自底层的动员，以增强其议价能力。具体来说，那些负责体制中影响力较小的部门且因此缺乏其他议价权力的官员，往往倾向于采取这种策略。当民众的要求与其未能实现的议程要素一致，尤其是涉及地方政府与上级政府之间的谈判时，他们就会利用当地的大规模动员。街头的抗议者最终变成了地方官员手中强有力的牌。他们预先表明，拒绝地方要求将带来社会不稳定的危险，这将把民众的压力转化为对上级领导的压力。&lt;&#x2F;p&gt;
&lt;p&gt;中国党和国家体制的若干制度条件催生了所谓的“同意不稳定”现象。首先，党政系统的等级结构为寻求从上级获取政策资源的各方营造了一个不公平的竞争环境。级别较高的代理者或是那些占据了传统上重要职位的代理者，相较于他人能获得更多的资源。相比之下，代表弱势部门的代理者，在与上级的互动中仅拥有微乎其微的议价能力。因此，这些弱势玩家便在官僚体系外部寻找议价权力的来源。本研究探讨的是这类地方官员如何利用当地民众的公共压力来实现其目的。&lt;&#x2F;p&gt;
&lt;p&gt;其次，干部激励机制在不同层级的党政体制中并不一致。基层干部，由于几乎没有任何机会在其所在地区之外得到晋升，更倾向于优先考虑提升地方利益。相反，高层干部则更重视他们的职业前景，超过了基层干部。这种激励的差异解释了为何基层干部可能会冒着牺牲自己职业生涯的风险，容忍那些促进地方利益的公民动员，以及为何面对此类需求时，高层官员往往会选择让步。&lt;&#x2F;p&gt;
&lt;p&gt;我对东部C县对政府合并提议的回应进行的案例研究将验证这一逻辑。通过访谈当地官员和居民，我展示了C县的官员之所以容忍抗议者，是因为他们的利益与抗议者的要求相符。合并将显著削弱他们的权力和权威，而且县级官员成功利用了当地公民的动员来抵制上级官员的决定。&lt;&#x2F;p&gt;
&lt;p&gt;地方官员对动员的默认使得基层民众成为了弱势官僚的有力武器，因为这种默认迫使他们的上级考虑这样一种可能性：忽视抗议者的要求可能会危及社会稳定。为了系统地评估将公共压力作为内部官僚协商中的杠杆作用的效力，我对346名地方官员进行了调查实验。在一个赞同实验设计中，参与者（地方干部）评估了一个基层领导者提出的假设性政策资金申请。当民众的压力威胁到政权的稳定并支持申请时，参与者对申请的赞同水平显著提高。&lt;&#x2F;p&gt;
&lt;p&gt;“同意不稳定”模型为我们理解中国官员如何应对社会不稳定源提供了新的洞见。尽管传统的观点认为，中国官员会积极应对社会不稳定，但这一模型揭示了他们如何利用公众舆论来影响决策，即使这种影响是间接的。&lt;&#x2F;p&gt;
&lt;p&gt;尽管对于许多官员来说，控制、压制（而非容忍或策略性地引导）和挫败民众动员是常见做法，但本模型表明，一些地方官员却在民众抗争中寻找机会。示威者发出的高昂成本信号显示了当地需求，并帮助官员从上级层级争取到让步。这种国家与公民的关系在各种问题领域都有体现，其中多数案例涉及政府的各个部分之间的激烈博弈，尤其是在行政区划改革或大型基础设施投资项目（如高速铁路）投资分配的案例中。它挑战了威权政治中普遍存在的精英与大众二元对立观念，指出民众在塑造威权精英互动中可以发挥重要作用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1._定义“同意不稳定”&quot;&gt;1. 定义“同意不稳定”&lt;&#x2F;h3&gt;
&lt;p&gt;“同意不稳定”指的是弱势官僚机构战略性容忍乃至在某些情况下与公民合作，对公民向高级官员表达的需求作出响应的行为。民众不满的公开表达，尤其是大规模动员，有助于增强官员在争取政策利益时的议价能力。首先，自下而上的民众动员作为公众不满的有力证据。它们单独或集体地证明了公众的不满情绪。其次，这样的动员有助于揭示官员无法实现其议程中的某些部分，这在上级看来可能构成了对社会稳定的威胁，从而迫使他们考虑对民众诉求做出让步。&lt;&#x2F;p&gt;
&lt;p&gt;在高层领导人收到的众多嘈杂信号中，包括竞争代理人所谓其选民存在类似需求的“廉价言论”，从中识别出某个地方的需求是困难的。当街头民众的需求与上级官员的意愿相符时，公共压力变成了官员可以利用的强大杠杆，以此争取他们原本难以获得的政策让步。其次，大规模动员的破坏性效果预先展示了拒绝地方要求的严重后果（即社会不稳定），并将民众的压力施加在上级领导身上。高层领导面临着接受地方要求或拒绝它们并承担起动员当地民众加入对更大挑战社会稳定的根本挑战的责任之间的选择。&lt;&#x2F;p&gt;
&lt;p&gt;重要的是要指出，官方的同意并不一定意味着地方官员公开组织或协助抗议者反对他们的上级。在中国共产党（CCP）中，反对高层决定的抗议活动被视为严重的纪律违规行为（“反对党组织的活动”），一旦被发现，官员将面临严厉的制裁。在多数情况下，我们所能观察到的是，地方政府违背了其常规做法，不再阻止和镇压动员，并对抗议者表现出很高的容忍度。在这些事件中，地方政府的角色更多地是关于同意而不是合作。在一些罕见的案例中，地方官员也会作为个人参与者加入动员。&lt;&#x2F;p&gt;
&lt;p&gt;“同意不稳定”反映了地方国家和公民之间的一种非正式联盟。这也偏离了我们对地方政府如何管理民众抗议的传统理解。然而，这仍然是地方官员面对各种正式和非正式的制度激励和约束时的一种战略反应。在下一段中，我将强调两个导致“同意不稳定”出现的中国官僚制度的机构特征。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2._机构环境&quot;&gt;2. 机构环境&lt;&#x2F;h3&gt;
&lt;p&gt;中国党国家的两个机构特征为“同意不稳定”的出现创造了条件。首先是不平等地分配官僚单位之间的议价权力。对有利政策的内部官僚协商往往忽视了那些弱势部门。为了加强他们的地位，他们寻求议价权力的来源。&lt;&#x2F;p&gt;
&lt;p&gt;议价行为贯穿于中国政府日常运营的方方面面。不同的官僚单位持有多元化且时常冲突的议程，他们之间相互竞争、谈判、妥协和暗中勾结，以期最大化各自的部门利益。在这些互动中，拥有更多议价权力的单位处于有利地位，更容易确保有利于自身的优惠政策，而这往往是以牺牲那些议价能力相对较弱单位的利益为代价。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;a._官僚体系内议价权力的不平等分配&quot;&gt;a. 官僚体系内议价权力的不平等分配&lt;&#x2F;h4&gt;
&lt;p&gt;议价权力的不平等分配体现在两个维度上。首先，在简单直接的层级模式中，不同行政级别的单位拥有不平等的力量。高级官员可以迫使下级接受所提出的条款。例如，当不同层级的政府官员在具体税收的分配比例或支出责任的划分上产生分歧时，高级官员通常会占据优势地位，因为他们拥有明确和有效的权力。重新划分区域或行政合并的决定也产生同样的影响。&lt;&#x2F;p&gt;
&lt;p&gt;即使是同级别的官僚单位，也可能存在议价权力的不平等。例如，省级首府通常比普通市镇在省级政策制定上拥有更多的影响力；市政公共安全局由于其重要性而被认为比卫生或体育局更为重要，因此能够吸引更多资源。正式的体制机制承认这些差异：这些重要地区或局的负责人通常在更高层级的机构中担任双重职务。例如，省级首府的秘书长通常担任省级党委员会成员，市政公共安全局的负责人也兼任副市长等职务。在这些正式安排之外，没有明确规定同级别官员之间议价能力的差异，但那些处于较低优先级的官员认识到存在赋予他们比同行更少议价权力的非正式规范和共识。因此，其中一些人可能会利用这些差异来增强自己的议价能力。弱势官员利用公共压力向上级争取政策让步的战略，其关键假设是：相较于高层官员，基层官员面临的潜在损失较少。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;b._差异化的激励措施&quot;&gt;b. 差异化的激励措施&lt;&#x2F;h4&gt;
&lt;p&gt;干部管理系统不仅评估官员在治理多个方面的表现，并将评估结果与官员的职业发展紧密挂钩。众多实证研究表明，该制度有效地促使官员追求政府设定的目标，例如经济增长、税收征收以及环境保护。党通过对那些因工作疏忽引起社会不稳定而受到制裁的官员进行惩戒，进一步强调了维护社会稳定的重要性。党还实施了“一票否决制”，使得社会稳定成为地方政府官员的首要任务。&lt;&#x2F;p&gt;
&lt;p&gt;然而，在官员辖区内的单一群体事件并不必然导致处罚。如果民众动员支持上级机关决定的政策变动，并将诉求直接指向政府高层，那么如果没有采取适当措施平息当地民众，高层领导将直接对局势失控承担责任。那些对争议性问题缺乏直接管辖权的地方官员，若能与上级沟通如何处理情况，便可摆脱动员责任。其他体现良好工作态度的应变措施也能避免工作疏忽的指控。&lt;&#x2F;p&gt;
&lt;p&gt;官员的激励机制按行政级别也有所区别，因为不同级别的官员拥有不同的晋升机会。绝大多数低级别官员（包括副手和局长）不实行轮岗制度，而是长期在一个地方任职。正如阮宇烯估算的那样，这些官员占中国官僚体系的99%以上。对于高级领导而言，晋升激励固然重要，但对大多数基层官员来说，最相关的激励“是以薪酬形式，而非晋升”。基层官员的薪酬，除了固定工资外，与所服务的政府的绩效密切相关。“他们的部门收入越高，他们获得的福利就越多。”基层官员在掌控当地经济方面的自主权是他们为所服务的部门创造盈余的重要来源。&lt;&#x2F;p&gt;
&lt;p&gt;这种激励机制在一定程度上赋予了基层官员权力。高层官员，尤其是领导职务上的官员，重视晋升。在较高层次，晋升竞争激烈，且易受政治斗争的影响，任何瑕疵——包括重大的社会稳定管理失败——都可能阻断他们的进步之路。26 相反，基层官员更看重收入而非晋升，他们的收入与地方和部门的利益密切相关。当上级的命令与地方利益不一致时，基层官员可以运用动员来实现政策让步。高层官员的职业生涯野心矛盾地使他们在这笔交易中变得脆弱。&lt;&#x2F;p&gt;
&lt;p&gt;总之，党和国家体制的两大特征为“同意不稳定”的出现创造了空间。议价权力的不均匀分布使某些机构处于弱势地位。负责这些机构的官员寻求从机构外部获得议价权力的来源。这些地方的基层官员通常更重视提升地方利益而非个人进步。因此，他们可能会冒险利用社会不稳定作为勒索工具，从高级领导人那里获得政策让步。下一节中关于C县的案例研究阐明了这些动态。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3._“同意不稳定”的案例研究&quot;&gt;3. “同意不稳定”的案例研究&lt;&#x2F;h3&gt;
&lt;p&gt;C县是K省H市管辖下最富裕的地区之一。正如我所描述的，2013年春季，县官员并没有试图压制成县居民的抗议活动，因为他们普遍反对将县与市合并的措施，认为这将损害他们的自治权和利益。在县政府大楼前聚集的1000多人反对合并计划，这是各种线上线下渠道表达不满的集锦。城市政府没有引发镇压，而是在大规模示威之后迅速暂停了合并计划，声称该计划“仍在考虑中”。&lt;&#x2F;p&gt;
&lt;p&gt;对市官员、县官员和当地居民偏好和行为的分析基于我在实地调研期间获得的21次当地官员和居民的访谈以及其他关于这一事件的原始资料。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;a._行动者和他们的偏好&quot;&gt;a. 行动者和他们的偏好&lt;&#x2F;h4&gt;
&lt;p&gt;H市：与K省内的其他许多城市类似，H市政府管理的只是一个相对较小的城镇区域。这源于K省长期以来直接管理县（省管县）的做法。与中国其他地方不同，县虽然在行政上隶属于城市，但其经济发展仅对省负责。收入、政府投资、土地配额及其他资源的分配，直接在省政府与各县之间进行。这种管理体系意味着市政府仅能从其直属区域汲取资源，但无法从县获得资源。例如，H市仅控制两个区的资源。由于这一安排，K省的许多城市因缺乏资源投资基础设施和城市建设，难以推动城市中心的发展。H市政府将C县转换为直接管理下的区，旨在提升其行政能力。省政府赞同该计划，将其视为推动省经济增长、实现新一轮城市化的手段。&lt;&#x2F;p&gt;
&lt;p&gt;特别值得注意的是，在本事件中，H市政府占据着更为优势的位置。尽管县在经济上相对独立，但市的政治地位高于县。县官员不能公开地、至少不能以官方认可的方式反对其上级的决定。&lt;&#x2F;p&gt;
&lt;p&gt;C县：如C县的居民和县官员所感受到的，C县因其相对自治的地位而获得了巨大的利益。县财政局的副局长告诉我，县目前保留了80%的收入，将剩余的20%上交至省级财政。此外，县还将丧失年度土地转换配额以及土地使用权转让费用的控制权。县一直依靠这部分丰厚的税收收入，用以支持其基础设施及多项其他建设。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果C县成为区，我们的编制不会改变。但作为一个区，我们只是一个“半级政府”。我们是城市管理职能的执行者，只能做市政府想让我们做的事情。现在（作为县），我们完全独立负责。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在访谈中，我提出这次变动可能会有一些好处，比如能够更多地获得城市的公共服务，但C县的官员们对这些观点不予理睬。他们以县是“全国百强县”之一而自豪，担心加入正在努力解决自身发展问题的H市，会给县增加负担。例如，县发展和改革局的官员表示，县从未从市里得到过帮助，他不认为成为区后会改变这种情况。他指出，当县需要罕见疾病专科医生或工厂需要技术专家时，县都会向省首府或上海求助。“我们从未从H市得到过帮助，”他补充道，“他们也没有我们需要的。”32 同时也担心，县将在吸引外来投资方面与市的两个区展开直接竞争，而合并后不再是县的位置，将失去部分政策优势。33 在我对C县的采访中，包括县领导在内的每位官员都对合并的潜在负面影响直言不讳。然而，没有人表示支持合并计划。&lt;&#x2F;p&gt;
&lt;p&gt;C县民众：当地民众与官员反对合并的原因类似。一些人担忧市政府不会关注县的需求，认为中心城市的发展将以牺牲他们目前拥有的服务为代价。一些人明确表示不想与市区居民共享学校、医院和其他公共设施。35 对于县官僚机构冗余已感到不满的地方商人来说，他们担心合并将进一步加剧这一问题。企业运营成本上升。36 例如，一位经营私立学校的商人告诉我，他不得不花费大量时间，需长途跋涉30公里前往市内办理营业许可证。37 一旦计划公之于众，许多县居民都在网上表达了他们的担忧。我在县百度贴吧上找到了816篇讨论合并的帖子，每篇至少有十个回复，其中许多的回复数更多。38 一些帖子认为市方试图尽可能从县内榨取一切；另一些帖子则提到了十年前在H市失去独立地位的另一个县，暗示其命运将是负面的，C县的命运也将相似。类似于中国网民常见的民族主义叙事，他们唤起地方自豪感，把H市描绘成一个“入侵者”，试图损害县的经济利益。一些帖子对H市使用了侮辱性言辞。他们将合并描述为一种羞辱县居民的手段，宣称“绝不会成为亡国奴”。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;b._示威前的官僚谈判&quot;&gt;b. 示威前的官僚谈判&lt;&#x2F;h4&gt;
&lt;p&gt;县与市的谈判早在大规模抗议发生之前就已经进行。C县官员表示，在作出决定之前，市政府进行了几个月的实地调研。市调查小组召集了县官员（包括局长和乡镇负责人），并听取了他们对合并计划的意见。这些会议是在保密的情况下进行的，最初合并计划对公众保密。在这些会议中，市政官员向县官员保证，如果合并实施，C县的利益将不受损害。从一开始，县官员就强烈反对合并。他们认为市政官员的保证只是一时的权宜之计，旨在诱使他们同意该计划，长远来看是不可信的。他们以N区为例，该区曾作为县享有自治权，但在成为H市下辖的区之后，其发展落后。尽管在这些会议中县官员表达了明确的反对意见，但市政府似乎并没有认真考虑这些意见，仍然继续推进合并计划。&lt;&#x2F;p&gt;
&lt;p&gt;关于市政府最初为何忽视县官员的意见，没有找到直接证据。一个可能的解释是：H市官员高估了自身的影响力，他们误判反对合并的民意范围仅局限在少数县官员之中，并对这些官员最终会屈服于更高层级的权威抱有过分自信。毕竟，市政府的行政级别位居县政府之上，依据他们在党政体系中的层级关系，县官员理应执行市方的指令。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;c._示威&quot;&gt;c. 示威&lt;&#x2F;h4&gt;
&lt;p&gt;数周后，县官员得知，市官员即将降临C县并公开宣布合并事宜。尽管市政府的意图从未正式公开，但许多县居民很快便得知了这一消息，由此引发了他们在网络上的呼吁，号召C县民众进行抵制。合理推测，C县的官员在发现自己的反对无效后，故意向公众泄露了这一信息。&lt;&#x2F;p&gt;
&lt;p&gt;线下抵制行动始于县商会一个镇级分支递交的举行示威活动许可申请。该申请向县公安局提出，声称“合并将严重损害C县民众和当地企业的利益……经过商会会员们的一系列集体会议，我们请求在县政府广场举行150人参与的示威活动。”按照中国政府的惯例，县公安局拒绝了这一申请，但县商会将在随后的公众回应中发挥领导作用。&lt;&#x2F;p&gt;
&lt;p&gt;计划中的示威活动虽未获许可，但仍如期举行，参与人数远超预期。至少有1000名抗议者并非来自商会。商会现场发放了印有口号的T恤和横幅。一些抗议者身上穿着印有“我爱C县”字样的T恤。横幅上写着“C县属于C县人民！”、“C县拥有千年历史，不可能一夜之间成为区！”以及“五十万C县人民绝不能成为被征服的人民！”一些人手持一块大白色布料，请路过的行人签名，以表示对抗议活动的支持。C县居民在社交媒体上直播了此次事件，其中一幅照片展示了一个小孩身穿“我爱C县”T恤的画面。&lt;&#x2F;p&gt;
&lt;p&gt;其他抗议迹象以车身贴纸的形式出现在公众视野中。一家外国媒体发布了一张这样的贴纸照片，上面写着：“C县人民感谢为我们县发展做出贡献的人，并将永远铭记那些将我们的县变成行政区的人为罪犯。”一张出租车上的贴纸声称，任何没有反对合并标志的人都将被县警察罚款。一家当地酒店的户外LED屏幕停止显示房间价格，以便显示反对合并的口号。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;d._县官员的反应&quot;&gt;d. 县官员的反应&lt;&#x2F;h4&gt;
&lt;p&gt;县政府拒绝批准示威活动许可证的做法符合党的政策，县内的其他行动也是如此：在示威活动期间，派出警力维持秩序，但并未采取可能进一步激怒公众的激进措施，并与H市的上级领导保持局势更新。&lt;&#x2F;p&gt;
&lt;p&gt;然而，除了这些标准反应之外，官员们表现得异常宽容。虽然他们会对已开始的抗议活动保持警惕，但中国地方政府官员通常都会采取措施防止抗议活动发生，但在此次事件中，他们并没有这样做。许可申请已经提前通知了县政府有举行示威的计划，警方本可以事先阻止组织者。但他们没有。抗议者如期出现在他们申请的日期。商会提前制作了T恤和横幅并在现场分发，这表明组织者能够在没有警察干扰的情况下做好准备。警方还对抗议者的行为表现出容忍，如在示威过程中进入政府大院门禁和在大楼玻璃门上悬挂反对合并的标语。一位参加的当地居民描述警方为“温和的”，并得出结论说“他们与我们站在一边。”&lt;&#x2F;p&gt;
&lt;p&gt;一些官员参与了反对活动。来自县财政局和商务局的几名官员——这两个局是合并后受到限制最大的机构——参与了在县政府大楼前的抗议。超过200名退休县干部也写信给县领导，表达他们对合并的反对。同一天，当地乡镇和工业园区的领导签署了一封联名信，威胁如果市政府不撤回决定，他们将集体辞职。在信中，这些地方领导表示，他们的抵抗（为了维护县的独立）‘将得到并且必须得到五十万县居民的支持’。他们似乎完全意识到他们的行动会得到市民动员的呼应。&lt;&#x2F;p&gt;
&lt;p&gt;显然，如果没有县领导的支持，警察和地方官员不会冒这个风险。或许没有什么比县C的一个县党委常委告诉我的话更能总结县的复杂立场，他说县政府在‘后台’支持那些在‘前台’的人。大量证据表明，官员们容忍了示威所带来的轻微不稳定。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;e._县抵抗的结果&quot;&gt;e. 县抵抗的结果&lt;&#x2F;h4&gt;
&lt;p&gt;随着示威活动的展开，县官员迅速向市政府汇报情况，并静候指示。几个小时后，当人们在政府广场聚集起来，县党委副书记走出政府大楼，与人群对话。他表示，城市、县政府及党委已“仔细权衡”将C县设为区的利弊，并最终认为此举为时尚早。“感谢大家为支持C县付出的努力，非常感谢！”人群爆发出热烈的欢呼，随后迅速散去。&lt;&#x2F;p&gt;
&lt;p&gt;对于与上级意见相左的县官员，并未施加任何正式的惩罚。在这种情况下，干部考核体系对他们起到了保护作用。因为本次动荡的根源在于市政府欲合并县城，而他们在整个抗议活动中保持了监视、控制和报告的状态，正如迅速发布的联合公告所显示的那样。&lt;&#x2F;p&gt;
&lt;p&gt;抗议活动在宣布结果后和平结束，这与2005年黄石地区黄石市企图将县设为区并导致几位高层县官员被免职的事件形成了鲜明对比。此前，抗议者围攻市政府大楼，损坏了政府财产，但C县的官员成功避免了此类结果的发生。&lt;&#x2F;p&gt;
&lt;p&gt;省级政府对那些与抗议者站在一起的县官员采取了宽容态度，将其视为个体自愿行动，而非其代表部门集体策划的行为。省级政府派出了一个调查团队以非正式的形式发出警告，与签署反对合并请愿书的乡镇领导人进行了一对一交谈，但并未实施进一步的惩罚措施。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4._广泛背景下的同意不稳定&quot;&gt;4. 广泛背景下的同意不稳定&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;a._各个问题领域的同意不稳定现象&quot;&gt;a. 各个问题领域的同意不稳定现象&lt;&#x2F;h4&gt;
&lt;p&gt;C县事件的详细情况让我们可以推断出同意不稳定发生的条件。这种不稳定通常是由上级部门做出的决策引起的，这些决策将弱势机构置于不利位置。对此类决策不满的当地民众表达了自己的诉求，这赋予了当地官员在谈判桌上更强的议价能力。这些条件——在很大程度上依赖于当地官员与民众间的偏好一致性——在各种问题领域和全国各地出现。&lt;&#x2F;p&gt;
&lt;p&gt;除了2013年的C县事件之外，我还了解到以下四起行政区划调整导致的同意不稳定事件：2005年湖北的Daye事件、2008年甘肃的Longnan事件。在这两起事件中，数千名居民抗议地方政府的权力被削弱或计划被削弱。后续调查显示当地官员参与了这些事件。在一次访谈中，浙江大学的一位教授告诉我，1994年黄岩县的官员们反对其被改为区。当地的绝大多数人大代表都是企业家，他们因经济原因反对合并。在市政府强制执行改区后，他们拒绝履行职责。在另一起案例中，2013年绍兴的两个县重新划分行政区划时，退休干部发起抗议，但未能成功。&lt;&#x2F;p&gt;
&lt;p&gt;高速铁路站点建设是另一个问题领域，当地官员在这里通过动员当地民众来要求获得优先考虑。近年来，在规划的高速铁路线路中至少有十几个小地方发生了抗议活动，要求设立本地站点，而这些地方的当地官员没有足够的权力来进行这样的要求。中国媒体将这些动员称之为“高铁社会运动”。与C县案例中抵制合并的情形类似，当地官员在这些事件中容忍甚至鼓励了抗议者，其中许多运动都取得了成功。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;b._中介者的角色&quot;&gt;b. 中介者的角色&lt;&#x2F;h4&gt;
&lt;p&gt;正如C县案例所示，在许多其他事件中，当地企业家扮演了积极的角色。例如，2015年，湖北荆州的当地商会组织了一次集会，并收集了超过10,000份签名。当地市民签署了请愿书，主张在拟议中的武汉-成都高速铁路沿线建设本地车站。在接受报纸采访时，组织者强调商会“是经荆州市民政局认可的合法非营利性社会组织。”当地企业家（矿主）也在Daye事件中发挥了关键的动员抗议者的作用。&lt;&#x2F;p&gt;
&lt;p&gt;当地商业组织的高频出现或许可以解释为何在这些事件中地方政府能保持相当的隐形。中国的企业高度依赖国家，企业与当地官员建立了紧密的合作关系以保证生存和发展。68有理由推测在这些事件中，商会充当了国家与公民之间的关键对话者。国家在幕后批准了这些动员，而商会则在公众面前动员民众。由于当地政府从未公开自行组织抗议活动，因此（在大多数情况下）他们能够避免被上级部门发现和制裁。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;c._同意不稳定的风险&quot;&gt;c. 同意不稳定的风险&lt;&#x2F;h4&gt;
&lt;p&gt;一个合理的担忧是，一旦地方政府释放了民众的力量，他们该如何控制这种力量，以及如果抗议者失去控制将会发生什么。然而，将大众动员作为谈判筹码的运用，依赖于一定的不稳定风险。69如果抗议看起来完全可控或人为策划，那么其信息很可能被视为“空洞之言”。即便真实且自发，同意不稳定也相对容易为地方政府所控制。首先，公民的诉求具有地方性（例如，反对重新划区、要求高速铁路站点），并不涉及个人申诉或官方不当行为。这类地方性诉求不太可能引起外地广泛的民意支持。因此，潜在的抗议者仅限于当地居民。&lt;&#x2F;p&gt;
&lt;p&gt;其次，正如C县案例所示，当地政府事先知晓动员，因此可以提前部署警力以防止局势失控。在少数情况下，如果抗议者开始攻击政府建筑或损坏财产（如在Daye和林水），当地公安力量会迅速介入并驱散人群。他们处理得如此轻松，这说明实际上并不需要施加高压手段。这些动员事件之所以发生，并非因为组织能力。相反，地方官员拥有管控能力，这让他们敢于冒险，预期他们能够控制那些他们默许甚至支持的抗议活动。&lt;&#x2F;p&gt;
&lt;p&gt;最后，正如前面所讨论的，在地方政府和抗议者之间存在着中间人（例如地方商会）。这些中介机构使得地方政府在影响民众方面具备一定的影响力。在Daye事件中，矿主（即中间人）试图组织抗议活动时，他们雇佣的一部分参与者有犯罪记录（这些人也是袭击大楼的人）。矿主失去了对这些人的控制，导致抗议活动演变成暴力。&lt;&#x2F;p&gt;
&lt;p&gt;动员是否失控并演变成暴力，成为评判涉事官员是否会被上级处罚的关键标准。正如之前提到的，国家通常会对引发骚乱的当事人进行制裁。在这些案件中，从外部看来，争议的直接原因似乎是上级当局的政策决策。因此，上级缺乏惩罚县官员的正当理由。但如果动员演变成暴力，上级就可以指责地方官员未能有效控制局势。在Daye事件中，抗议活动被指控“造成严重政治后果”，而在其他案例（包括C县）中则没有出现此类指控。Daye事件的规模和暴力性质使其成为备受关注的事件，迫使湖北省政府对事件进行了全面调查。调查发现，Daye的官员与抗议活动的组织者暗中勾结，并被指控密谋破坏党组织。而在许多其他案例中，由于动员规模较小，并未触发上级的全面调查。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5._评估群众的力量&quot;&gt;5. 评估群众的力量&lt;&#x2F;h3&gt;
&lt;p&gt;C县案例中的同意不稳定导致了政策改变。然而，案例研究并没有为所有问题提供满意的答案。例如，为什么市方一开始会忽视县官员的意见，但在抗议活动发生后又做出了让步？目前为止，我们推测市领导不愿承担引发更大不稳定的责任。这是否仅仅是H市特有的情况，还是反映了更广泛、更具系统性的模式？目前关于市级的运作机制的证据不多。高级官员通常更难接近。&lt;&#x2F;p&gt;
&lt;p&gt;为了探究这种模式是否超越了已知的案例，2016年12月至2017年5月间，我对368名地方官员进行了调查实验。此次实验的招募对象来自北京两所大学的公共管理硕士研究生项目的“领导干部培训课程”。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;a._受访者&quot;&gt;a. 受访者&lt;&#x2F;h4&gt;
&lt;p&gt;经学校工作人员安排，此次调查仅面向“公务员”群体。表1展示了受访者的基本描述性统计数据。&lt;&#x2F;p&gt;
&lt;p&gt;表1：受访者基本信息统计（N = 368）
变量
平均值&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;性别（1 = 男，0 = 女）：0.62&lt;&#x2F;li&gt;
&lt;li&gt;年龄：41岁&lt;&#x2F;li&gt;
&lt;li&gt;大学学历及以上（1 = 是）：0.89&lt;&#x2F;li&gt;
&lt;li&gt;党龄（年）：16.24&lt;&#x2F;li&gt;
&lt;li&gt;在政府服务年限（年）：18.77&lt;&#x2F;li&gt;
&lt;li&gt;部门级或以上职务（1 = 是）：0.30&lt;&#x2F;li&gt;
&lt;li&gt;科室级或以上职务（1 = 是）：0.56&lt;&#x2F;li&gt;
&lt;li&gt;副科室级或以上职务（1 = 是）：0.83&lt;&#x2F;li&gt;
&lt;li&gt;担任工作单位领导职位（单位）（1 = 是）：0.60
备注：1. 处级职务包括县长、市局主任以及省局科室主任。2. 科级职务包括镇长、县局局长及市局科室主任。3. 副科级职务包括副镇长、副县长局主任及市局副科室主任。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;诚然，该样本并非中国地方官员的代表性样本。基于党的政治控制，此类样本的收集颇有难度。因此，本研究遵循过往研究方法，在样本内部进行再随机化处理，以检验因果推论。尽管存在一定的局限性，样本具有充足的经验和对地方政府运转机制的深刻理解。超过83%的受访者已达到副科级或以上级别，且有超过60%的受访者表示他们担任工作单位的领导职务，即他们是干部。平均政府工作年限为18.77年，远长于10年的平均水平。调查对象分布在五个省份，包括三个沿海省份和两个内陆省份。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;b._调查实验设计&quot;&gt;b. 调查实验设计&lt;&#x2F;h4&gt;
&lt;p&gt;由于官员不太可能在即便匿名的调查中承认“同意不稳定”的现象，因为这会显现出政权的稳定性问题，并暗示他们自身可能成为党和国家政权的威胁。因此，本研究采用了赞同实验设计。&lt;&#x2F;p&gt;
&lt;p&gt;赞同实验设计通过隐晦的提示来测量受访者对于社会敏感的参与者所支持的陈述或政策的支持程度，从而避免直接触及敏感的政治议题。&lt;&#x2F;p&gt;
&lt;p&gt;首先，参与者被分为控制组、处理组和安慰剂组。控制组阅读的陈述是：“城市A今年预算紧张。王先生，作为该市一个区的党委书记，他前往市财政局，请求为其所在区的一条主要道路的形象整修项目申请一笔特别拨款。如果您负责市财政局，您会支持这笔拨款吗？”然后在选项中选择以下范围：1. 强烈反对；2. 反对；3. 既不支持也不反对；4. 支持；5. 强烈支持。&lt;&#x2F;p&gt;
&lt;p&gt;处理组的陈述与控制组相同，只是在结尾问题之前增加了一句话：“由于道路状况不佳，许多当地居民已经强烈要求进行改道一段时间了。”而安慰剂组则阅读与控制组相同的陈述，但在结尾问题之前增加了这句话：“王先生声称，由于道路状况不佳，许多当地居民已经强烈要求进行改道一段时间了。”&lt;&#x2F;p&gt;
&lt;p&gt;通过将控制组与处理组进行对比，旨在检验公众压力是否会对官员的行为产生影响。而将安慰剂组与处理组进行对比，旨在检验仅仅提出公众压力的声明是否会产生与实际公众压力不同的影响。鉴于王先生可以轻易地宣称公众压力，他的上级可能不会相信他，因此这可能不是一个有效的谈判筹码。处理场景和安慰剂场景之间的比较也有助于缓解这种担忧，即观察到的处理效果（如果有的话），纯粹是由公民政策需求的披露所驱动。&lt;&#x2F;p&gt;
&lt;p&gt;该假设情景的叙述并未涉及行政区划合并或规划高速铁路站等议题，尽管之前的案例研究中包含这些议题，这是因为预期的受访者是城市和县级的行政官员，他们无法对这类决策施加影响。这类官员仅对特定拨款有决策权，使用此情景能使得他们的反应更具现实性和可靠性。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;c._结果&quot;&gt;c. 结果&lt;&#x2F;h4&gt;
&lt;p&gt;首先，我将控制组和处理组进行比较。除了标识受访者所属组别的关键变量之外，我还纳入了调查员固定效应的控制，因为问卷调查由不同的工作人员在不同的班级进行分发。结果展示在表2中。&lt;&#x2F;p&gt;
&lt;p&gt;表2：基准结果：控制组和处理组比较&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;.&lt;&#x2F;th&gt;&lt;th&gt;估计值&lt;&#x2F;th&gt;&lt;th&gt;标准误差&lt;&#x2F;th&gt;&lt;th&gt;t值&lt;&#x2F;th&gt;&lt;th&gt;p值（&amp;gt;=|t|）&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;截距（控制组）&lt;&#x2F;td&gt;&lt;td&gt;2.9403&lt;&#x2F;td&gt;&lt;td&gt;0.19907&lt;&#x2F;td&gt;&lt;td&gt;14.769&lt;&#x2F;td&gt;&lt;td&gt;&amp;lt;0.001***&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;处理组&lt;&#x2F;td&gt;&lt;td&gt;0.7628&lt;&#x2F;td&gt;&lt;td&gt;0.13271&lt;&#x2F;td&gt;&lt;td&gt;5.748&lt;&#x2F;td&gt;&lt;td&gt;&amp;lt;0.001***&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;调查员固定效应&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;控制组中的支持水平，通过截距系数体现，大约为2.94，表明存在一定程度的反对意见。这一结果可能反映了中央政府对地方政府在“示范”型基础设施项目上削减浪费性支出的压力。调查中使用的话语——主要道路的重建——暗示这种特别拨款可能用于此类项目。&lt;&#x2F;p&gt;
&lt;p&gt;处理组的系数为0.76，且具有统计学意义（p&amp;lt; .001）。这意味着在叙述中添加了当地市民也强烈要求此类拨款的表述后，支持水平上升至3.7（2.94 + 0.76），相较于控制组提高了约26%。这一结果表明，官员们在决定行动时确实会考虑公众压力。 &lt;&#x2F;p&gt;
&lt;p&gt;表3：比较控制组和安慰剂组&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;.&lt;&#x2F;th&gt;&lt;th&gt;估计值&lt;&#x2F;th&gt;&lt;th&gt;标准误差&lt;&#x2F;th&gt;&lt;th&gt;t值&lt;&#x2F;th&gt;&lt;th&gt;p值（&amp;gt;=|t|）&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;截距（控制组）&lt;&#x2F;td&gt;&lt;td&gt;3.1948&lt;&#x2F;td&gt;&lt;td&gt;0.2173&lt;&#x2F;td&gt;&lt;td&gt;14.70&lt;&#x2F;td&gt;&lt;td&gt;&amp;lt;0.001***&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;安慰剂&lt;&#x2F;td&gt;&lt;td&gt;0.3223&lt;&#x2F;td&gt;&lt;td&gt;0.1461&lt;&#x2F;td&gt;&lt;td&gt;2.206&lt;&#x2F;td&gt;&lt;td&gt;0.0284*&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;调查员固定效应&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;我还对比了对照组与安慰剂治疗组，具体结果详见表3。安慰剂治疗组的系数大小为0.32，且在p &amp;lt; .05的统计学水平上显著。接着，我以安慰剂组为基准进行分析，结果显示安慰剂治疗组与治疗组的差异也相当显著（0.43），且在p &amp;lt; .001的统计学水平上具有高度显著性，具体数据详见表4。因此，在安慰剂治疗组中，对专项资金的支持程度高于对照组，但远低于治疗组。这与我的假设一致，即真实公民需求相比声称的公民需求，具有更强的干预效果。这些结果共同说明了为什么地方官员不得不冒险引发社会不稳定，以此来拥有强大的议价工具。&lt;&#x2F;p&gt;
&lt;p&gt;表4：安慰剂组与治疗组比较
.|估计值 | 标准误差 | t值 | p值（&amp;gt;=|t|）
--- | --- | --- | --- | --- |
截距（安慰剂组）|3.4643|0.1885|18.382|&amp;lt;0.001***
治疗组 |0.4338|0.1284|3.377|&amp;lt;0.001***
调查员固定效应|是&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6._结论&quot;&gt;6. 结论&lt;&#x2F;h3&gt;
&lt;p&gt;本文探讨了地方官员在官僚斗争中如何战略性地运用不稳定因素。我提出了“同意不稳定”理论，即当群众动员的诉求与官员议程一致时，这可以作为弱势官僚从上级获取政策让步的强大议价杠杆。文章分析了产生此策略的制度背景，通过详尽案例研究展示官员对公共抗议的反应如何偏离了常规的镇压模式，并通过调查实验评估了公共压力在内部官僚协商中的实际效果。&lt;&#x2F;p&gt;
&lt;p&gt;本研究丰富了关于中国稳定维护多面性的文献。尽管传统观点认为中国政府优先保障稳定，并不惜一切代价防范社会运动的发生，但近期的研究揭示了更为复杂的景象。中国地方政府拥有相当程度的自主权，在社会不稳定源的应对策略上存在差异。陈冠坤李和张力宏通过访谈北京和深圳的地方官员发现，基层官员和受损害的公民出人意料地在维持一定程度的动荡上有共同利益，因为“动荡的存在正当化了为维护稳定的部门和人员增加预算的要求。”同样，李连江和刘明兴发现，地方官员与商业精英联手，通过发动抗议活动保护自身利益。詹妮莎·魏斯提出，中国当局容忍并利用民族主义抗议来在国际外交谈判中获取议价能力。本研究在此基础上进一步揭示，地方政府官员能从内部政策博弈中受益于抗议活动的存在，因此有着容忍与其诉求相吻合的公民动员的动机。这些研究结果表明，公众对不满的表现并不总是对官员构成隐患，官员有时甚至会利用（甚至操控）此类事件为自己获取利益。&lt;&#x2F;p&gt;
&lt;p&gt;本文的发现也与这样一个观点一致，即中国的国家并非铁板一块。相反，它是一个由不同利益相关者组成的分割、多层次的系统，他们为了争夺影响力而竞争，并且这些参与者偶尔会寻求在国内或国外寻找盟友，以对抗共同的敌人。尽管大量文献表明，多层次的分权化体系为经济增长提供了激励，但本文指出，这样的体系同样滋生政府间冲突和民间抗争。这种紧张关系源于经济分权与政治集中的悖论。地方政府在其辖区享有相当大的政策自主权，通常面临来自上层的政治控制尝试，并发展出各种应对策略来维护其自主性。&lt;&#x2F;p&gt;
&lt;p&gt;最后，本研究通过强调威权政治中的精英-民众联系，为比较威权政治研究的文献做出了贡献。虽然研究独裁政权的学生越来越多的认识到，在威权政治过程中，精英比大众拥有更大的影响力，但许多学者已经注意到，当基层公民动员在合适的时间和方式出现时，可能会以意想不到的方式赋予威权精英力量。本研究提出的论点与这一逻辑相符，并提供了丰富的证据，说明中国的地方官员如何利用公众压力从体制内更强大的同行那里获得政策利益。关于大众如何改变中国各级精英政治格局的问题，是一个值得深入研究的有前景领域。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;后记&quot;&gt;后记&lt;&#x2F;h1&gt;
&lt;p&gt;本篇都是llm翻译的，会存在一些错漏或观点误判，本人不同意llm输出的价值观和一切立场，这里只是用作llm翻译能力的测试，纯做学术研究。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>深圳一日游</title>
        <published>2024-07-13T00:00:00+00:00</published>
        <updated>2024-07-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/深圳一日游24-7-13/"/>
        <id>https://bbpp222006.github.io/深圳一日游24-7-13/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/深圳一日游24-7-13/">&lt;h1 id=&quot;独行侠&quot;&gt;独行侠&lt;&#x2F;h1&gt;
&lt;p&gt;又来到深圳了，这次是一个人来的。&lt;&#x2F;p&gt;
&lt;p&gt;虽然工资不高，但一个人旅游和生活刚刚好。&lt;&#x2F;p&gt;
&lt;p&gt;这次的任务是收集信息，花费的总成本约为2000rmb。&lt;&#x2F;p&gt;
&lt;p&gt;目前最不缺的就是时间。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;课堂笔记&quot;&gt;课堂笔记&lt;&#x2F;h1&gt;
&lt;p&gt;此次出行最重要的任务是听课，了解有钱人们在玩一些什么，他们对未来的局势变化、市场状态的视角和态度是怎样的，这里对课堂的内容进行一个简要的记录。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;U本位下的期权视角、美股&quot;&gt;U本位下的期权视角、美股&lt;&#x2F;h2&gt;
&lt;p&gt;本次主讲有两位：龙心盐老师和sober老师&lt;&#x2F;p&gt;
&lt;p&gt;龙心盐主要讲偏宏观和心态的内容，sober主讲山寨币期权的操作手法和缅a的未来展望&lt;&#x2F;p&gt;
&lt;h3 id=&quot;龙心盐&quot;&gt;龙心盐&lt;&#x2F;h3&gt;
&lt;p&gt;龙心盐讲的比较散，不太好总结，这里随意记录一些个人感觉有用的tips。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;投资如打仗&quot;&gt;投资如打仗&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对手方：选择标的&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;散户在没有投入时间和精力的情况下，往往处于消息末端&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;投资本身是一场关于信息的战争，最直观的例子就是&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.themoviedb.org&#x2F;movie&#x2F;489243-the-hummingbird-project?language=zh-CN&quot;&gt;蜂鸟计划&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;散户在没有投入时间和精力研究标的的基本面情况下，获得的消息都不知道是多少手的了。&lt;&#x2F;p&gt;
&lt;p&gt;常常开玩笑说建议建立一个“大妈指数”：&lt;code&gt;如果连菜市场的大妈都开始讨论股票了，那说明股市就差不多见顶了&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;所以业余散户的投资一定不要选择不熟悉的领域。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;真正的熟悉，你要胜过大部分聪明钱（绕过技术指标层）&lt;&#x2F;strong&gt;，这点很难，也很费精力。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;预备队：活下去&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;下重注本身是一种懒惰&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;与小镇做题家们受到的教育不同，投资一定不能&lt;strong&gt;今日事今日毕&lt;&#x2F;strong&gt;，非要类比的话更像种地和&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Real-time_strategy&quot;&gt;rts游戏&lt;&#x2F;a&gt;，需要提前布局和摆阵，而不是直接&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;426579922&quot;&gt;F2A&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;尤其是像博主这代小镇做题家，很容易陷入上面这种心态陷阱，因为并没有经历过或者受过这方面的训练。&lt;&#x2F;p&gt;
&lt;p&gt;当然也可以很容易的避免，即用做题的心态去深入研究金融理论，钻研数学统计或者量化领域里去，这样投资就不会受外界噪声的影响，也不会被浮盈浮亏扰乱心情，因为我们只相信自己的大脑和知识。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;每笔仓位都有出现的时机和目的&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;兵源：后勤&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;原始资本从哪来？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;工资、房租、股息、分红&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;允许失败才可以操作不变型&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;仓位管理，万万不可一次梭哈&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;税源：成果转化&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;打下城池需要转化为税收，如何进行转化&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;重平衡、cover call、高分红标的（jepq、nvdy、KILP）、债券&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;源源不断的现金流是非常重要的&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;投资是为了更好的生活&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;何时进行止盈&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;马赛克市场如何出入筹码&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;尽量线下熟人间cash进行，不换u。&lt;&#x2F;p&gt;
&lt;p&gt;u直接绑定虚拟卡进行消费，不换成美元。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;后记&quot;&gt;后记&lt;&#x2F;h1&gt;
&lt;p&gt;第一次是在武汉线下课，学费500刀，这次深圳线下课老学员就便宜一点，250刀。&lt;&#x2F;p&gt;
&lt;p&gt;前面几次课这两位老师的思想已经了解的差不多了，估计后面再不会去参加付费的线下课了，免费的见面会可能还回去蹭一下。&lt;&#x2F;p&gt;
&lt;p&gt;毕竟市场里拥有不同资产的猎人有不同的策略，他们的策略和思想只能参考一下，最重要的还是寻找自己的交易圣杯。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>期权交易日志-6-11</title>
        <published>2024-06-11T00:00:00+00:00</published>
        <updated>2024-06-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/期权交易日志24-6-11/"/>
        <id>https://bbpp222006.github.io/期权交易日志24-6-11/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/期权交易日志24-6-11/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;现在马赛克市场正在（如期）瀑布中&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-11&#x2F;image.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;赶紧记录一下操作过程，以供日后分析&lt;&#x2F;p&gt;
&lt;h1 id=&quot;操作回顾&quot;&gt;操作回顾&lt;&#x2F;h1&gt;
&lt;p&gt;和之前的策略一样，将short腿止盈了：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-11&#x2F;image-1.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;然后接着开仓，继续保护性看跌（牛市看跌）：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-11&#x2F;image-2.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;因为只平了short腿，还有个call一直拿着：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-11&#x2F;image-3.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个腿带一点点theta衰减和delta，只能当彩票了，但是未实现盈亏里面还是个负的，不好看，所以这次开的仓数量就到0.2个了，想着最好能多赚点theta的钱，因此现在的仓位变成了奇怪的比例价差：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-11&#x2F;926f17246976f4e1797ba55bb5224ea.jpg&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;行情分析&quot;&gt;行情分析&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;美股&quot;&gt;美股&lt;&#x2F;h2&gt;
&lt;p&gt;美股在大涨，苹果宣布与openai合作后股价破新高了&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-11&#x2F;image-4.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;果然ai才是第一生产力！&lt;&#x2F;p&gt;
&lt;p&gt;我在想openai既然没上市，wld目前来看又那么拉跨，是不是买点苹果来作为openai投资比较好。&lt;&#x2F;p&gt;
&lt;p&gt;因此决定这个月工资梭哈果子了！&lt;&#x2F;p&gt;
&lt;p&gt;还有之前买的矿股也涨疯了，后悔买少了……&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-11&#x2F;image-5.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;iris这个公司感觉从矿场转型为数据中心了，因此没有受到马赛克行情的影响，一路狂奔中&lt;&#x2F;p&gt;
&lt;p&gt;简直是我心目中的最佳标的，又是大饼、又是ai算力、又有廉价能源，退可挖矿养老，进可梭哈ai。&lt;&#x2F;p&gt;
&lt;p&gt;看来也得加点仓，哈哈哈哈。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;马赛克&quot;&gt;马赛克&lt;&#x2F;h2&gt;
&lt;p&gt;可能是美股涨势太好，把一些流动性吸走了。&lt;&#x2F;p&gt;
&lt;p&gt;很久之前熊市时也有过这样的情况，美股开盘一涨，马赛克就跌，但马赛克的宏观走势又和tqqq差不多，看不懂了……&lt;&#x2F;p&gt;
&lt;p&gt;看着跌了这么多，实际上还没到腰斩的地步，经历过519的老韭菜应该都还情绪稳定吧&lt;&#x2F;p&gt;
&lt;p&gt;说了这么多，还是日常技术面分析一下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;首先是套利数据：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;{&amp;quot;ETHUSDT_240628&amp;quot;:10.316517632435955,&amp;quot;ETHUSDT_240927&amp;quot;:11.864166876064191,&amp;quot;ETHUSDT_PERP&amp;quot;:10.950000000000001}&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;永续的年化没怎么变，交割的升水掉了挺多，从14掉到10左右了，套利的老哥们这波应该吃的挺爽&lt;&#x2F;p&gt;
&lt;p&gt;二饼掉了快10个点，永续的费率却没怎么降，说明很多老哥都在接针，大伙、散户们的共识还是很强大的：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;牛市必然会来，现在区区10个点，一点不够看的，越跌老子越兴奋，越跌老子越买！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;毕竟孙哥的eth成本也在3000左右啊，什么事件要是能够把孙哥也割了，说实话，我也挺好奇的。&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;IV方面&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;还是老朋友：signalplus上看看&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-11&#x2F;image-6.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;近期的iv砸的挺深的，都快到50多了&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-11&#x2F;image-7.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看看这远端的偏斜率，近端的偏看跌，远端看涨已经起飞了&lt;&#x2F;p&gt;
&lt;p&gt;说明一下，这里delta坐标是相对当前的价格偏离，说明大伙远端的call根本没怎么抛售，甚至还在加仓&lt;&#x2F;p&gt;
&lt;p&gt;从坐标轴上来看的化，就在7月份左右，大的估计快来了，大伙记得系好安全带&lt;&#x2F;p&gt;
&lt;p&gt;综上：个人分析，本次马赛克市场的（爆）跌只是短期的，估计是明晚的美国cpi数据公布，大伙可能短期避险，导致抛售，从而价格下跌。&lt;&#x2F;p&gt;
&lt;p&gt;因此还是选择进攻性看涨和保护性看跌的搭配组合&lt;&#x2F;p&gt;
&lt;p&gt;希望这次能够赚波大的&lt;&#x2F;p&gt;
&lt;h1 id=&quot;后记&quot;&gt;后记&lt;&#x2F;h1&gt;
&lt;p&gt;这次止盈short腿不知道做的对不对，前面的策略过程以及构造的很好了，就是一些细节问题还没弄清楚，比如什么时候止盈、埋核弹&#x2F;换仓的时候应该选择什么点位。&lt;&#x2F;p&gt;
&lt;p&gt;这些细节知识只能靠自己慢慢摸出来了，与全局最优之间的差距就靠学费来弥补吧。&lt;&#x2F;p&gt;
&lt;p&gt;这次止盈就有点没做好，应该等企稳的时候再换仓，这次换仓换早了，导致少赚了1刀左右，并且还亏了一些手续费，下次需要注意一下。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>期权交易日志-6-8</title>
        <published>2024-06-08T00:00:00+00:00</published>
        <updated>2024-06-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/期权交易日志24-6-8/"/>
        <id>https://bbpp222006.github.io/期权交易日志24-6-8/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/期权交易日志24-6-8/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;signal plus能对接币安了，但是散户还是不能做卖权，比较尴尬……&lt;&#x2F;p&gt;
&lt;p&gt;昨晚一波小瀑布，大饼二饼没怎么跌：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-8&#x2F;image.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;山寨死光了（wld）：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-8&#x2F;image-1.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;正规军入场后，马赛克市场的马太效应估计会越来越明显，山寨的资金都会被大头吸走，流动性减少，大家都没得玩了&lt;&#x2F;p&gt;
&lt;p&gt;昨天白天研究了一下期权的书，用永续和call合成了一个卖put，理论上在币本位中，行情不变或者下跌都是可以屯币的，coincall是u本位，下跌的过程中能看到永续的爆仓点还是在不断降低的，理论上确实是在屯币。&lt;&#x2F;p&gt;
&lt;p&gt;用现货和卖call合成的等效卖put这个策略叫做cover call，又称为备兑，美股中已经有成熟的etf帮你做这个操作了，例如jepq：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-8&#x2F;image-2.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这种etf的分红很高，年化有15左右，基本上都来自于卖call的钱，对需要现金流的赌狗来说比较友好。&lt;&#x2F;p&gt;
&lt;p&gt;covercall的优劣从jepq和qqq的对比中就能明显看出来了：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-8&#x2F;image-3.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;横盘和下跌的时候，cover call策略可以吃到卖call的钱，增强收益，降低回撤&lt;&#x2F;p&gt;
&lt;p&gt;但在趋势行情中，长期来看，卖call就损失了向上突破的机会成本，跑不赢长牛：人类历史的发展&lt;&#x2F;p&gt;
&lt;p&gt;在内卷、科技被锁死、无限内耗的地区，这种策略就非常适合了（哈哈哈）&lt;&#x2F;p&gt;
&lt;h1 id=&quot;行情分析&quot;&gt;行情分析&lt;&#x2F;h1&gt;
&lt;p&gt;昨晚一小波下跌，之前部署的策略是赚的（近月保护牛市看跌），看来4000这个点没这么容易突破上去。&lt;&#x2F;p&gt;
&lt;p&gt;这波下跌说是美国非农数据不利：美国就业形势强劲，可能降息还要暂缓。&lt;&#x2F;p&gt;
&lt;p&gt;不得不说美联储真会骗炮&lt;&#x2F;p&gt;
&lt;p&gt;不过这样也好，说明这波ai浪潮是泡沫的几率又减少几分，完全可以继续定投增加ai和算力中心的投入，争取吃满时代赠与的beta。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;说回正题&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;首先还是分析版面情况分析：&lt;&#x2F;p&gt;
&lt;p&gt;费率方面：今天（6.8）二饼费率正常，非常健康&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;{&amp;quot;ETHUSDT_240628&amp;quot;:12.548113463626457,&amp;quot;ETHUSDT_240927&amp;quot;:14.653590887304249,&amp;quot;ETHUSDT_PERP&amp;quot;:10.950000000000001}&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;IV方面：昨晚的一波下跌把iv带崩了&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-8&#x2F;image-4.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;星期的iv到30多了……甚至感觉回到了去年的熊市&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-8&#x2F;image-5.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;远端的iv也有中程度的下跌，但还没破25%的点，说明大伙对远期还是有信心的&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-6-8&#x2F;image-6.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看看这rv，真的到去年熊市的点位了&lt;&#x2F;p&gt;
&lt;h2 id=&quot;接下来该怎么办？&quot;&gt;接下来该怎么办？&lt;&#x2F;h2&gt;
&lt;p&gt;现在做近期的卖权，主吃theta的策略肯定不行了，iv太低，没多少利润，还有gamma核弹的风险&lt;&#x2F;p&gt;
&lt;p&gt;从iv角度来说，现在绝对是做中远期双买策略的好时候，基本上没可能也没道理继续下跌了，再横盘小震荡下去流动性都快g了&lt;&#x2F;p&gt;
&lt;p&gt;那应该怎么办呢？&lt;&#x2F;p&gt;
&lt;p&gt;仓位中价差的利润还没有过半，现在就换仓埋核弹有点操之过急&lt;&#x2F;p&gt;
&lt;p&gt;因此打算这样安排接下来的策略：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;小跌、小涨、横盘（3500-3800）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;不动，装死，接着打游戏，等到仓位的利润到60%~80%再考虑接下来的事情&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;暴跌、大幅震荡&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;等到仓位中short腿的利润到60%~80%后平掉，准备换仓埋核弹&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;暴涨（过4000）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;老样子：没人讨厌一个超级大牛市&lt;&#x2F;p&gt;
&lt;h1 id=&quot;结语&quot;&gt;结语&lt;&#x2F;h1&gt;
&lt;p&gt;今早起来发现亏了十几刀，都是学covercall干的好事，想了一会平掉永续的仓了，covercall这种摆烂养老策略是给大体量的矿老板和富二代玩的，咱们这种黄袍加身的穷逼赌狗老老实实分析行情吧。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>期权交易日志-6-3</title>
        <published>2024-06-03T00:00:00+00:00</published>
        <updated>2024-06-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/期权交易日志24-6-3/"/>
        <id>https://bbpp222006.github.io/期权交易日志24-6-3/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/期权交易日志24-6-3/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;前几天马赛克市场平平无奇，交易量流动性都小了很多。&lt;&#x2F;p&gt;
&lt;p&gt;都说买在无人问津处，卖在人声鼎沸时。&lt;&#x2F;p&gt;
&lt;p&gt;现在正是布局双买策略的好时候！&lt;&#x2F;p&gt;
&lt;h1 id=&quot;如何布局远端（次月）？&quot;&gt;如何布局远端（次月）？&lt;&#x2F;h1&gt;
&lt;p&gt;当前iv较低，是时候部署远端的核弹了&lt;&#x2F;p&gt;
&lt;h2 id=&quot;策略细节&quot;&gt;策略细节&lt;&#x2F;h2&gt;
&lt;p&gt;这次直接选择牛市进攻型看涨（call），原因如下&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;同方向（牛call，熊put）的进攻性价差策略都有特点：部署成本低、养护成本随时间变高，称之为核弹一点不过分&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;远端肯定是看涨的，选择call而不是put进行构建的原因如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;当前行情还没有启动，同向价差在行情没启动前的时间内如果遭遇反向，能够通过反向埋核弹策略增加反弹（爆炸）的力度&lt;&#x2F;li&gt;
&lt;li&gt;反向价差（熊call，牛put）一般是在行情已经启动，用来追车的，这种价差能够在追车的过程中就埋炸弹，防止翻车（甚至能在翻车时赚一笔）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;再就是具体的行权点选择了，个人判断压力位在4000左右，上面是真空，一旦突破起码10个点以上了，因此行权点1选择3900-4200；行权点1选择4400-4600。&lt;&#x2F;p&gt;
&lt;p&gt;具体的位置就看个人喜好和流动性、滑点了。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;结语&quot;&gt;结语&lt;&#x2F;h1&gt;
&lt;p&gt;这次的牛市注定写入历史，祝各位好运，也祝我自己好运，咱们顶峰相见！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>期权交易日志-5-30</title>
        <published>2024-05-30T00:00:00+00:00</published>
        <updated>2024-05-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/期权交易日志24-5-30/"/>
        <id>https://bbpp222006.github.io/期权交易日志24-5-30/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/期权交易日志24-5-30/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;玩期权的阵地转移到了coincall上，这是u本位的交易所，并且没有卖的最低资金量限制，eth最小交易的数量是0.1，还挺舒服，小散终于可以当卖家了&lt;&#x2F;p&gt;
&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;p&gt;能当卖家之后，可以用的“武器”更多了，打算先从牛熊价差做起，光是牛熊价差就有4种：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;牛市看涨&lt;&#x2F;li&gt;
&lt;li&gt;牛市看跌&lt;&#x2F;li&gt;
&lt;li&gt;熊市看涨&lt;&#x2F;li&gt;
&lt;li&gt;熊市看跌&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;每种价差策略根据&#x27;行权点的分布&#x27;不同又有3种组合：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;保护型&lt;&#x2F;li&gt;
&lt;li&gt;均衡型&lt;&#x2F;li&gt;
&lt;li&gt;进攻型&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;所以一共是：$4\times3 = 12$种功能各异的“武器”&lt;&#x2F;p&gt;
&lt;p&gt;能把这12种武器玩溜耍应该就出新手村了&lt;&#x2F;p&gt;
&lt;p&gt;后续会写一写个人的经验&lt;&#x2F;p&gt;
&lt;h2 id=&quot;近期盘面情况&quot;&gt;近期盘面情况&lt;&#x2F;h2&gt;
&lt;p&gt;二饼在5.21冲上3600后就一直横盘，没冲上4000的前高&lt;&#x2F;p&gt;
&lt;p&gt;这段时间有几个值得关注的新闻：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;二饼的etf通过&lt;&#x2F;li&gt;
&lt;li&gt;门头沟钱包异动&lt;&#x2F;li&gt;
&lt;li&gt;纳指小涨后横盘（英伟达冲上1000，准备6.7号1拆10）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;整体的波动率比较诡异&lt;&#x2F;p&gt;
&lt;p&gt;这十几天rv很小，iv冲高后被压的很低&lt;&#x2F;p&gt;
&lt;p&gt;近几天（27号左右），二饼的永续资金费率突然涨到了年化23%，多头有压力了。&lt;&#x2F;p&gt;
&lt;p&gt;感觉和2月份左右比较相似，估计30天左右（7-8月份）就会出现大趋势（希望是大牛）&lt;&#x2F;p&gt;
&lt;p&gt;从波动率曲面上来看也是一样，近期的倾斜偏向看跌，到7、8月份才出现翻转。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;盘面总结&quot;&gt;盘面总结&lt;&#x2F;h2&gt;
&lt;p&gt;近月的支撑点评估：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;高点：4000&lt;&#x2F;li&gt;
&lt;li&gt;低点：3000&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;近月的iv：看跌&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;在马赛克市场，iv不叫恐惧指数，而叫贪婪指数，因此iv大部分时间跟着市场一起涨跌，而不是和美股一样反着来&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;策略总结&quot;&gt;策略总结&lt;&#x2F;h2&gt;
&lt;p&gt;因此目前的入场策略如下（上桌玩把大的！）：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;保护性牛市看跌（用call做看跌价差）&lt;&#x2F;li&gt;
&lt;li&gt;时间选近月（1个月内）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;示例如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%9724-5-30&#x2F;image-1.png&quot; alt=&quot;alt text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;策略说明：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;涨到4000才开始亏钱&lt;&#x2F;li&gt;
&lt;li&gt;其余时间赚theta、空vega&lt;&#x2F;li&gt;
&lt;li&gt;不一把全梭哈进场，开场只进一半、1&#x2F;4仓，留手备牌后面接着打&lt;&#x2F;li&gt;
&lt;li&gt;保护性牛市看跌的入场成本较低（都是虚值call），适合敏感肌&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;策略后续分析&quot;&gt;策略后续分析&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;小波震荡、阴跌&quot;&gt;小波震荡、阴跌&lt;&#x2F;h4&gt;
&lt;p&gt;赚点零花钱，没什么说的 &lt;&#x2F;p&gt;
&lt;h4 id=&quot;小涨&quot;&gt;小涨&lt;&#x2F;h4&gt;
&lt;p&gt;不过4000就不亏，顶多亏点手续费&lt;&#x2F;p&gt;
&lt;h4 id=&quot;暴涨&quot;&gt;暴涨&lt;&#x2F;h4&gt;
&lt;p&gt;这个策略我们没进全仓，亏损是有限的，涨上去后再看情况分析。&lt;&#x2F;p&gt;
&lt;p&gt;4000上面就真的是无人区了，谁也不知道会发生什么，但我相信没人会讨厌一个狂暴大牛市。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;暴跌、大幅震荡&quot;&gt;暴跌、大幅震荡&lt;&#x2F;h4&gt;
&lt;p&gt;这种情况要着重说明一下，由于当前策略是用call做的，在方向对的情况下可以用手上的筹码一路埋核弹，将普通的价差策略转换为比例价差，用最小的成本赌最大的gamma核弹。&lt;&#x2F;p&gt;
&lt;p&gt;以前文的图为例，假如二饼掉到了3400，手上3900的short call就可以看情况提前平掉了，留下个非常虚的4200的long call当埋下的核弹&lt;&#x2F;p&gt;
&lt;p&gt;然后再开个牛市看跌接着重复上述的策略过程，不过这时候除了刚开的价差外，你还有个很低成本的核弹&lt;&#x2F;p&gt;
&lt;p&gt;只要上面策略重复的次数越多，埋下的核弹就越多，核弹保养的成本也越低；二饼一路跌你就一路埋，等一个超级大牛市把所有人都炸上天！&lt;&#x2F;p&gt;
&lt;h1 id=&quot;结语&quot;&gt;结语&lt;&#x2F;h1&gt;
&lt;p&gt;上面的策略我还没试过，纯纯脑补，亏钱就当口嗨算了，哈哈哈&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>牛回，速归！</title>
        <published>2024-05-23T00:00:00+00:00</published>
        <updated>2024-05-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/牛回，速归！/"/>
        <id>https://bbpp222006.github.io/牛回，速归！/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/牛回，速归！/">&lt;h1 id=&quot;马赛克&quot;&gt;马赛克&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E7%89%9B%E5%9B%9E%EF%BC%8C%E9%80%9F%E5%BD%92%EF%BC%81&#x2F;image&#x2F;index&#x2F;1716468326478.png&quot; alt=&quot;1716468326478&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;（开局一张图）&lt;&#x2F;p&gt;
&lt;p&gt;前几天eth etf要通过的消息出了，导致二饼直接拉升20个点，到了4k左右晃荡。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;孙哥还是你孙哥，提前大半个月做局买买买，眼光真的毒。你可以质疑孙割的人品，但你不能质疑孙割的眼光。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;二饼拉起来后，大饼也拉回到了7w，eth&#x2F;btc还有一波上涨的空间，之前二饼汇率一直在下降，这次不知道能不能回去。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;山寨&quot;&gt;山寨&lt;&#x2F;h2&gt;
&lt;p&gt;当前重仓的除了大饼二饼，还有sol与wld。&lt;&#x2F;p&gt;
&lt;p&gt;sol的问题在于对矿机的要求太高了，散户没法入局，有些中心化；&lt;&#x2F;p&gt;
&lt;p&gt;wld的问题更大，公司内部派系斗争、人员调动非常频繁，wld又存在解锁带来的抛压，这波上涨并没有跟上，价格还在4左右。&lt;&#x2F;p&gt;
&lt;p&gt;个人打算等gpt5发布后再看情况，在高点分批跑掉算了。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;美股&quot;&gt;美股&lt;&#x2F;h1&gt;
&lt;p&gt;在盈透开户后才发现美股的选择这么多，不愧是全球最大的线上赌场，各种标的、杠杆……我已经来不及亏钱了！&lt;&#x2F;p&gt;
&lt;h2 id=&quot;长持&quot;&gt;长持&lt;&#x2F;h2&gt;
&lt;p&gt;当前主要的策略还是qqq与tlt平衡+定投，这几个etf费率只有千2，甚至还有股息分红，爽！&lt;&#x2F;p&gt;
&lt;p&gt;越南的etf不仅费率高，溢价也高，还没有分红，吃人不吐骨头。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;其他&quot;&gt;其他&lt;&#x2F;h2&gt;
&lt;p&gt;余额还有2.5k刀&lt;&#x2F;p&gt;
&lt;p&gt;某安的出金比较困难，看看美股里有没有好的马赛克标的，往后外界对马赛克越来越接纳，券商里肯定更方便出入金。&lt;&#x2F;p&gt;
&lt;p&gt;btc etf只能美国用户买，越南的身份证还买不了，只能在雪球等韭菜论坛里逛街，看看大佬是怎么操作的。调研结果如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;mstr是个好标的，基本上就是2xbtc，但目前的溢价太高了，现在上车怕翻车，等市场冷静一些再调仓过去吧。&lt;&#x2F;li&gt;
&lt;li&gt;coinbase是交易所，存在etf、uni等其他竞争的压力，暂时看不清楚后续的发展，不考虑。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;再就是各种矿股了（没想到吧，不用买矿机就能当矿老板！）&lt;&#x2F;p&gt;
&lt;p&gt;矿股还挺多的，现在买了点iris，雪球上的分析说爱丽丝的发展前景不错，有地和能源，未来可能转型为算力中心，类似于ai+大饼的结合产业了。&lt;&#x2F;p&gt;
&lt;p&gt;英伟达财报中说要在6.7进行拆股，直接拉了10个多点，破了1000的大关，现在供给根本满足不了需求，股价看到1200刀，也就是说还有20的上涨空间。&lt;&#x2F;p&gt;
&lt;p&gt;忍不了，梭了2股，现在兜里没子弹了……&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>折腾dns</title>
        <published>2024-05-09T00:00:00+00:00</published>
        <updated>2024-05-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/折腾dns/"/>
        <id>https://bbpp222006.github.io/折腾dns/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/折腾dns/">&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;p&gt;受不了某地的网络环境了，又是dns污染，又是截流审查。&lt;&#x2F;p&gt;
&lt;p&gt;今天花了一整天研究了下dns分流和vray的流程机制&lt;&#x2F;p&gt;
&lt;p&gt;参考博客:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tachyondevel.medium.com&#x2F;%E6%BC%AB%E8%B0%88%E5%90%84%E7%A7%8D%E9%BB%91%E7%A7%91%E6%8A%80%E5%BC%8F-dns-%E6%8A%80%E6%9C%AF%E5%9C%A8%E4%BB%A3%E7%90%86%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8-62c50e58cbd0&quot;&gt;漫谈各种黑科技式 DNS 技术在代理环境中的应用&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.v2fly.org&#x2F;config&#x2F;dns.html#dns-%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B&quot;&gt;dns-处理流程&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;文章写的很详细，适合小白&lt;&#x2F;p&gt;
&lt;p&gt;现在的架构是adguard+vray，vray通过useip和domainStrategy转发到adguard中，adguard再通过doh进行dns查询，这样能绕过很多奇怪的东西……&lt;&#x2F;p&gt;
&lt;p&gt;reality协议中偷证书的对象改成了zhihu，毕竟国内转发也要防一手，小心驶得万年船&lt;&#x2F;p&gt;
&lt;h1 id=&quot;后文&quot;&gt;后文&lt;&#x2F;h1&gt;
&lt;p&gt;日常闲逛hackernews的时候，&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=40284291&quot;&gt;发现了这篇帖子&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;内容很有趣，国外老哥把nes玩出花了，通过在俄罗斯方块游戏的结尾写名称的输入方式触发栈溢出，获取整个nes的内存修改权限。理论上能够魔改出doom……&lt;&#x2F;p&gt;
&lt;p&gt;里面一个评论很触动我：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8A%98%E8%85%BEdns&#x2F;image&#x2F;index&#x2F;1715247001586.png&quot; alt=&quot;1715247001586&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;赛里斯这个地区从文化和根基上天然的对这种“好玩”的行为进行打击。&lt;&#x2F;p&gt;
&lt;p&gt;从这种文化背景培养出来的“人”，很难理解这种“无用”的行为。&lt;&#x2F;p&gt;
&lt;p&gt;就像老黄在采访中说的：“我妈总问我为什么不去干点正事”&lt;&#x2F;p&gt;
&lt;p&gt;唯生产力论真是毒瘤……&lt;&#x2F;p&gt;
&lt;p&gt;指望“有形的大手”来指导一切社会的发展未免太过傲慢了&lt;&#x2F;p&gt;
&lt;p&gt;我们总是高估自己的能力：人类最大的缺点就是无法想象自己没见过的东西，换句话说就是只会“内插”，很难“外推”&lt;&#x2F;p&gt;
&lt;p&gt;某种意义上人脑和现在的神经网络模型也挺像的，看来agi还很遥远……&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>对“智能”的再次思考</title>
        <published>2024-04-29T00:00:00+00:00</published>
        <updated>2024-04-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/对“智能”的再次思考/"/>
        <id>https://bbpp222006.github.io/对“智能”的再次思考/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/对“智能”的再次思考/">&lt;p&gt;“人们往往都在犯前提性错误”&lt;&#x2F;p&gt;
&lt;p&gt;“人类最大的弱点就是无法想象自己没有见过的事物”&lt;&#x2F;p&gt;
&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;p&gt;这篇也是受前不久hackernews上的一篇帖子的启发，那篇帖子主题也是本blog的主题&lt;&#x2F;p&gt;
&lt;p&gt;前几个世纪中，我们对智能&#x2F;agi的定义发生过很多次变化&lt;&#x2F;p&gt;
&lt;p&gt;但无外乎都牵扯到或着重于讨论“逻辑”、“熵”等可解释的内容&lt;&#x2F;p&gt;
&lt;p&gt;例如专家系统、符号推理&lt;&#x2F;p&gt;
&lt;p&gt;甚至包括图灵测试等用于测试agi的实验，也都是评价agent的语言、动作的逻辑能力&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;最近LLM的出现给agi带来了曙光&lt;&#x2F;p&gt;
&lt;p&gt;LLM的中心思想是“压缩即智能”(以openai的Ilya为代表的压缩智能派)&lt;&#x2F;p&gt;
&lt;p&gt;LLM技术的想法也和特点也特别简单，通过海量的语料，对语言中的模式进行建模，然后预测下一个字&#x2F;token出现的概率&lt;&#x2F;p&gt;
&lt;p&gt;这种想法太过于简单，以至于不需要神经网络，仅用gzip+knn这些经典算法也能达成不错的效果&lt;&#x2F;p&gt;
&lt;p&gt;所以在llm刚出现的时候，许多其他派别的ai大佬（LeCun等）嘲讽这种模式为“随机鹦鹉”&lt;&#x2F;p&gt;
&lt;p&gt;毕竟这种思考方式一点也不“精致”&#x2F;“COOL”，怎么看也不跟“智能”能搭上边&lt;&#x2F;p&gt;
&lt;p&gt;感谢资本主义，就算广受质疑openai的也能融到傻子投资人的钱继续梭哈堆算力&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;质变来源于chatgpt3.5的发布，openai在报告中指出，llm在吃了大量语料后拥有了指令遵循的能力，而这甚至不需要进一步的微调。&lt;&#x2F;p&gt;
&lt;p&gt;例如当你输入：&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;English: Who are you?&lt;&#x2F;p&gt;
&lt;p&gt;中文：你是谁？&lt;&#x2F;p&gt;
&lt;p&gt;Englishi: What time is it?&lt;&#x2F;p&gt;
&lt;p&gt;中文：&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;llm就能后续接着“随机补全”出“现在几点钟”这类翻译后的话。&lt;&#x2F;p&gt;
&lt;p&gt;随机鹦鹉真是个很贴切的比喻，鹦鹉也是听了很多语料之后才能学会“说话”&lt;&#x2F;p&gt;
&lt;p&gt;但没人会认为鹦鹉真的理解 ： 它发出的声音在符号界所承担的抽象含义。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;可是&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;它真的一点也不*”理解“*么？&lt;&#x2F;p&gt;
&lt;p&gt;或者说，我们是如何定义*”理解“*的&lt;&#x2F;p&gt;
&lt;p&gt;我们理所当然的认为一只鹦鹉不可能真正的*”理解“&lt;em&gt;，这是因为我们对&lt;&#x2F;em&gt;”理解“*的前提定义就错了，还是因为身为”人类“的&lt;strong&gt;傲慢&lt;&#x2F;strong&gt;？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;一则寓言故事（会解梦的蛇）&quot;&gt;一则寓言故事（会解梦的蛇）&lt;&#x2F;h2&gt;
&lt;p&gt;一天，国王做了一个奇怪的梦，梦到有一只红狐狸倒挂在自己金权杖的上方。&lt;&#x2F;p&gt;
&lt;p&gt;国王醒来后，召来了自己的智囊团，问这个梦到底是什么意思。但他们不是摇头就是耸肩，没有人知道答案。无奈，国王只好命令王国里所有成年的男性和女性都必须到宫殿里来。他坚信，肯定有人可以解开这个梦。&lt;&#x2F;p&gt;
&lt;p&gt;人们开始从四面八方赶来，其中包括一位农夫。他在穿越山谷的路上，遇到了一条盘踞在山路上的蛇。当他走近这条蛇的时候，蛇突然开口说话了：“嘿，过路人，你要去为国王解梦吗？”&lt;&#x2F;p&gt;
&lt;p&gt;农夫感到非常吃惊，回答道：“是呀，不过我只是一个普通的庄稼人，哪里懂得什么梦呢？”&lt;&#x2F;p&gt;
&lt;p&gt;“是这样啊！不过我倒是可以告诉你这个梦的意思，你可以讲给国王听，并能得到奖赏。”&lt;&#x2F;p&gt;
&lt;p&gt;“那快告诉我吧，好心的蛇，快告诉我！”&lt;&#x2F;p&gt;
&lt;p&gt;“但你要知道，没有天上掉下来的馅饼，我可以告诉你，不过你要把得到的奖赏分我一半。”&lt;&#x2F;p&gt;
&lt;p&gt;农夫毫不犹豫地同意了，他蹲下身子听蛇说话，还不时地点点头。&lt;&#x2F;p&gt;
&lt;p&gt;几天后，他终于赶到了国王的宫殿前，说能解国王的梦。他很快被带到了国王的面前。农夫施了一个礼，毕恭毕敬地说：“陛下，您的梦是这个意思：如今是一个充满了狡诈和背叛的年代，没有人值得信任，您的王国就像是一个狐狸窝。”&lt;&#x2F;p&gt;
&lt;p&gt;国王点了点头，若有所思。“嗯，说得很好。”国王取出了两袋金子，送给了农夫。&lt;&#x2F;p&gt;
&lt;p&gt;农夫得到金子后开始起身往回赶，但是他小心地避开了来时路过的山谷，绕了很远的路才回到了家。就这样，两袋金子全归了他自己。&lt;&#x2F;p&gt;
&lt;p&gt;一天晚上，国王又做了一个奇怪的梦，梦到在自己权杖上方的天花板上悬着一柄长剑。醒来后，国王唤来了自己的侍卫：“去，把那个来自北部山区的农夫找来。”&lt;&#x2F;p&gt;
&lt;p&gt;农夫得到国王的命令后心里一沉，但他明白，如今只有一个办法可行，于是他奔向了曾经走过的那个山谷。&lt;&#x2F;p&gt;
&lt;p&gt;“好心的蛇，好心的蛇。”他拼命喊道。山谷里空荡荡的，根本没有回声。&lt;&#x2F;p&gt;
&lt;p&gt;“好心的蛇，我还需要你的帮助，求求你了。”&lt;&#x2F;p&gt;
&lt;p&gt;“过路人，我在这里。”蛇终于出现了。&lt;&#x2F;p&gt;
&lt;p&gt;“我知道你为什么而来，我可以告诉你这个梦的意思，但这次你一定要发誓把一半的奖赏分给我。”&lt;&#x2F;p&gt;
&lt;p&gt;“好心的蛇，我发誓，这次我决不食言。”&lt;&#x2F;p&gt;
&lt;p&gt;蛇又向农夫耳语了一番。农夫继续赶路，几天后他来到了国王的面前。&lt;&#x2F;p&gt;
&lt;p&gt;“陛下，您的梦的意思是：如今是一个充满了愤怒和战争的年代，您的敌人正在预谋发动战争，整个王国都将刀光剑影，血雨腥风。”农夫一字不漏地将蛇的话说给了国王听。&lt;&#x2F;p&gt;
&lt;p&gt;“很好，我知道了。”国王点了点头，面色凝重。他送给了农夫四袋金子，然后开始为迎接即将到来的战争而准备了。&lt;&#x2F;p&gt;
&lt;p&gt;这一次，农夫原路返回，他来到了山谷，看到了盘踞在山路上的蛇，暗暗拔出了匕首。&lt;&#x2F;p&gt;
&lt;p&gt;“哈，过路人，你一定是带来了我的那份奖赏。”蛇欣喜地说道。&lt;&#x2F;p&gt;
&lt;p&gt;“哼，你什么也不会得到，因为今天是你的末日。”农夫面目狰狞。&lt;&#x2F;p&gt;
&lt;p&gt;蛇夺路而逃，但农夫却在后面穷追不舍，最后砍掉了蛇的一段尾巴。那些金子又都归了他自己。&lt;&#x2F;p&gt;
&lt;p&gt;时光飞逝。一天晚上，国王又做了一个梦，梦到自己权杖上方的天花板上悬着一只屠宰后的羊。醒来后，他又派侍卫去寻找那个会解梦的农夫。农夫知道自己别无他路了，于是他收起了所有的自尊和骄傲，再一次向那山谷走去。&lt;&#x2F;p&gt;
&lt;p&gt;“好心的蛇，好心的蛇。”他一声声地喊着。&lt;&#x2F;p&gt;
&lt;p&gt;山谷里静悄悄的，还是没有任何回声。&lt;&#x2F;p&gt;
&lt;p&gt;“好心的蛇，我还有事相求。”&lt;&#x2F;p&gt;
&lt;p&gt;“过路人，我在这里。”蛇终于出现了。&lt;&#x2F;p&gt;
&lt;p&gt;“好心的蛇，您一定要宽恕我，国王又做了一个梦。”农夫恳求道。&lt;&#x2F;p&gt;
&lt;p&gt;“我知道，我可以告诉你这个梦的意思，不过你这次必须发誓要和我一起分享奖赏。”&lt;&#x2F;p&gt;
&lt;p&gt;“我发誓，一半的奖赏都会归你。”&lt;&#x2F;p&gt;
&lt;p&gt;“国王梦到了一只肥羊在自己权杖的上方，这个梦的意思是……”听完蛇的话，农夫重新上路了。&lt;&#x2F;p&gt;
&lt;p&gt;几天后，他又一次站在国王的面前。“陛下，您的梦的意思是：如今已经是一个充满了安逸和慷慨的年代，您的臣民都安居乐业，享受太平的生活。一只肥羊预示着太平盛世的到来。”&lt;&#x2F;p&gt;
&lt;p&gt;国王点了点头，开心地笑了：“很好，你解得不错。”他给了农夫六袋金子。农夫得到金子后，毫不犹豫地向山谷走去。
“好心的蛇，好心的蛇。”他高兴地喊道。&lt;&#x2F;p&gt;
&lt;p&gt;当蛇出现时，农夫双膝跪地，眼里含着泪水：“好心的蛇，你一定要收下这六袋金子，我心里非常愧疚，真后悔当初那样对待您。”&lt;&#x2F;p&gt;
&lt;p&gt;蛇抬起了瘦长的头，左右摇摆了一下，说：“过路人，这不是你的错，***你不过是这个王国中的一员。当整个王国像一个狐狸窝的时候，你也变得狡猾起来，；当整个王国血雨腥风的时候，你也无法抑制内心的愤怒和狂躁，挥刀砍了我的尾巴；而现在整个王国一片祥和，你也学会了感恩和仁慈，送给我所有的金子。***但是，你不明白，对于一条像我这样置身世外的蛇来说，金子毫无用处。你拿去，好好过日子吧！”&lt;&#x2F;p&gt;
&lt;p&gt;说完，蛇就钻进了石缝里，转眼间消失得无影无踪。&lt;&#x2F;p&gt;
&lt;p&gt;农夫只得把装金子的袋子搭在了肩上，继续赶路，但这时，他突然感到肩上的金袋重了许多。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;现在来看，”智能“的内核可能非常简洁，我想称之为”演员“，又或者是”模仿者“&lt;&#x2F;p&gt;
&lt;p&gt;测试的大概流程也非常简单，给它一个全新的环境，把它丢里面，看它能否做出符合环境”变化“的动作&#x2F;行为。&lt;&#x2F;p&gt;
&lt;p&gt;以llm为例&lt;&#x2F;p&gt;
&lt;p&gt;给它一个喜剧上下文，它会感到”开心“&lt;&#x2F;p&gt;
&lt;p&gt;给它一个悲剧上下文，它会感到”难过“&lt;&#x2F;p&gt;
&lt;p&gt;智能也许是这样定义的：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;给它一个舞台，它能随着旋律和灯光起舞&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们人类引以为傲的逻辑、符号、道德等概念，只不过是&lt;em&gt;算力&lt;&#x2F;em&gt;达到一定程度，&lt;em&gt;涌现&lt;&#x2F;em&gt;出来的特征罢了。&lt;&#x2F;p&gt;
&lt;p&gt;甚至可能都谈不上&lt;em&gt;涌现&lt;&#x2F;em&gt;，也许等强agi出现后，我们才会天真的发现，从更高的维度上来看，这些概念都只是浪花一朵。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;“&lt;em&gt;我们&lt;&#x2F;em&gt;的所有知识，无论是过去的、现在的，还是未来的，都&lt;em&gt;远远比不上我们&lt;&#x2F;em&gt;永远无法知道的。”——康斯坦丁·齐奥尔科夫斯基&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>再看波动率曲面</title>
        <published>2024-04-28T00:00:00+00:00</published>
        <updated>2024-04-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/再看波动率曲面/"/>
        <id>https://bbpp222006.github.io/再看波动率曲面/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/再看波动率曲面/">&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;p&gt;以后的期权交易打算就在deribit进行了，这里做市商多一些，而且模型的准确率和拟合度比较好，不容易出现delta给错的情况，方便对冲。&lt;&#x2F;p&gt;
&lt;p&gt;今天又深入研究了一下波动率锥和曲面，发现在5.17左右有个凹陷，理论上这里可以布局双买的操作，毕竟不亏vega，而且时间在三星期左右，signalplus的模拟结果中theta和vega差不多。&lt;&#x2F;p&gt;
&lt;p&gt;波动率曲面中，6月到8月之间，曲面的倾角发生了较大的改变，说明大伙都看好远期，看空近期，时间节点就在6-7月之间。这个时候可能大饼减半的浪潮才会到来。&lt;&#x2F;p&gt;
&lt;p&gt;波动率曲面中含有的信息非常多，这次只是通过曲面的倾角来判断市场的情绪和倾向，还需要多次的实操学习（挨打）才行。&lt;&#x2F;p&gt;
&lt;p&gt;争取在暑假来临之前攒足子弹，然后顺利在这波牛市中活下来！&lt;&#x2F;p&gt;
&lt;h1 id=&quot;实操记录&quot;&gt;实操记录&lt;&#x2F;h1&gt;
&lt;p&gt;昨晚二饼拉起来了5个点，赶紧把之前套住的5月底的put卖了，算了一下，一共血亏200刀……半个月白干了&lt;&#x2F;p&gt;
&lt;p&gt;现在的双买策略有个很大的问题，在赌对了波动行情时，一旦你的仓位进入深度实值，做市商就跑路了，想止盈都没机会。&lt;&#x2F;p&gt;
&lt;p&gt;之前想了三种方案&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;用永续或者交割对冲。缺点：如果继续单边行情容易爆仓&lt;&#x2F;li&gt;
&lt;li&gt;每天花一点保护费，买末日的虚值，直到做市商回来为止。缺点：theta太大，要是接下来几个星期都半死不活的，根本扛不住。&lt;&#x2F;li&gt;
&lt;li&gt;加仓同期的atm反向期权，用期权来对冲delta。缺点：同上，而且时间越久theta越大……&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这段时间都试过，效果都不好，缺点都非常致命……&lt;&#x2F;p&gt;
&lt;p&gt;最好的方法就是1了，但是需要你的仓位够厚，能抗住资金费&#x2F;升贴水，直到曙光的来临&lt;&#x2F;p&gt;
&lt;p&gt;所以说来说去，上述所有方法致命缺陷的根本原因就是仓位不够厚，没有底气导致瞻前顾后、患得患失(没钱就别玩这么大的)&lt;&#x2F;p&gt;
&lt;p&gt;以后开仓之前算一下大概能扛到什么程度，不然被自己陷阱里的猎物反杀那就笑掉大牙了&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>交易日志-3</title>
        <published>2024-04-24T00:00:00+00:00</published>
        <updated>2024-04-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/交易日志3/"/>
        <id>https://bbpp222006.github.io/交易日志3/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/交易日志3/">&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;p&gt;美股反弹了一些，导致晚上开盘时马赛克也涨了几个点。&lt;&#x2F;p&gt;
&lt;p&gt;之前网上看到过一个图，tqqq与btc的趋势图，相关性太高了，也许就把马赛克当作tqqq进行投资也不错？&lt;&#x2F;p&gt;
&lt;p&gt;马赛克现在没有稳定的标的物，现在etf又通过了，大伙用美股来作为参考也可以理解。&lt;&#x2F;p&gt;
&lt;p&gt;也许只有当美元等国家的信用完全崩塌了之后，马赛克的金融避险属性才能真正的展示出来吧……&lt;&#x2F;p&gt;
&lt;p&gt;但到那个时候钱估计也没啥用了，巴菲特说的好，没有人能够通过做空自己的国家来获利。&lt;&#x2F;p&gt;
&lt;p&gt;大空头里主角团通过买otm的put赚了一大笔，但周围围满了失业的人群。&lt;&#x2F;p&gt;
&lt;p&gt;没有人和流动性的市场，钱就是一团废纸。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;虽然反弹了一些，但还没有解套，双买策略得快进快出，一直持有只能一点点的亏钱……这次的100多刀就当买教训了。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>纳指到顶了吗</title>
        <published>2024-04-23T00:00:00+00:00</published>
        <updated>2024-04-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/纳指到顶了吗/"/>
        <id>https://bbpp222006.github.io/纳指到顶了吗/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/纳指到顶了吗/">&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;p&gt;这段时间美股跌的很凶，原因是美联储的预期从降息变成了加息，更深层次的原因有说CPI的，有说失业率的。&lt;&#x2F;p&gt;
&lt;p&gt;叠加最近的中东局势，黄金石油等大宗商品暴涨，很多人觉得纳指差不多到顶了。&lt;&#x2F;p&gt;
&lt;p&gt;但个人感觉还没到顶。&lt;&#x2F;p&gt;
&lt;p&gt;ai革命的浪潮并没有消退，与黄金、石油、战争相比，这次的ai浪潮在整个人类文明上是从未出现过的。&lt;&#x2F;p&gt;
&lt;p&gt;没人知道ai会带来什么，它的影响会比前几个更大还是更小。&lt;&#x2F;p&gt;
&lt;p&gt;这几天，meta的llama3突然开源，直接把之前的所有开源模型艹翻了。&lt;&#x2F;p&gt;
&lt;p&gt;之前的agent、rag搭配开源模型都是玩具，只有配上gpt4才能有些作用，但是费用太高没什么人用。&lt;&#x2F;p&gt;
&lt;p&gt;这次llama3出来，好事者的测试效果直逼gpt4，并且各种开源框架还在加速适配。&lt;&#x2F;p&gt;
&lt;p&gt;meta甚至还有个400B版本的还没放出来，到时候估计又是一波ai升浪。&lt;&#x2F;p&gt;
&lt;p&gt;再者就是今年gpt5可能会放出来，openai可能又有新活。&lt;&#x2F;p&gt;
&lt;p&gt;综上，个人还是坚持定投纳指etf，重仓world coin&lt;&#x2F;p&gt;
&lt;h1 id=&quot;小资金的投资策略&quot;&gt;小资金的投资策略&lt;&#x2F;h1&gt;
&lt;p&gt;如果有几百万，可能就会更加分散投资，吃点beta算了。&lt;&#x2F;p&gt;
&lt;p&gt;但是个人的工作差不多是&amp;quot;董志民们&amp;quot;的级别，无法脱身、单打独斗的情况下只能自己的工作和工资对冲了……&lt;&#x2F;p&gt;
&lt;p&gt;盐老师说的好，你都黄袍加身了，还唯唯诺诺的小心谨慎，1000块累死累活的才变成1100，有什么意义。&lt;&#x2F;p&gt;
&lt;p&gt;干脆一把梭，输了下个月工资再梭。&lt;&#x2F;p&gt;
&lt;p&gt;有了原始资本积累才有资格接着玩下去。&lt;&#x2F;p&gt;
&lt;p&gt;看有kol说5月份才是大牛市，现在赶紧攒一波子弹，争取在牛潮中活得更久。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>期权交易日志-2</title>
        <published>2024-04-21T00:00:00+00:00</published>
        <updated>2024-04-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/期权交易日志24-4-21/"/>
        <id>https://bbpp222006.github.io/期权交易日志24-4-21/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/期权交易日志24-4-21/">&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;p&gt;前一次套住的策略还没解套，因为资金太小，几次对冲的合约都差点爆仓(2600的爆仓线)&lt;&#x2F;p&gt;
&lt;p&gt;慌的一批，只能减仓，暴露了put期权的头寸，结果过了一晚上后又涨回3000了……导致又血亏。&lt;&#x2F;p&gt;
&lt;p&gt;翻来覆去想了一晚上，又在2900左右对冲了一点仓位，保留了一些看跌的头寸，用一些亏损换点心安。&lt;&#x2F;p&gt;
&lt;p&gt;后来翻了一下某安的设置，才发现可以把大饼现货拿过来当联合保证金……&lt;&#x2F;p&gt;
&lt;p&gt;还好后面又跌下来了，果断在2800左右上车重新对冲（感恩）。&lt;&#x2F;p&gt;
&lt;p&gt;开了联合保证金后，这下爆仓线到1600左右了。跌吧，要是能跌到1600，马上充钱梭哈……&lt;&#x2F;p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;世上只有一种病，那就是穷病。&lt;&#x2F;p&gt;
&lt;p&gt;Life is a long gamma&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>期权交易日志-1</title>
        <published>2024-04-12T00:00:00+00:00</published>
        <updated>2024-04-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/期权交易日志/"/>
        <id>https://bbpp222006.github.io/期权交易日志/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/期权交易日志/">&lt;h1 id=&quot;加更&quot;&gt;加更&lt;&#x2F;h1&gt;
&lt;p&gt;最近rv启动了，但是前期的亏损还没有回来……&lt;&#x2F;p&gt;
&lt;p&gt;看了一些期权的视频，发现这套改良的对冲算法官方名称叫smile-delta……&lt;&#x2F;p&gt;
&lt;p&gt;参考视频：https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=5YdUlg0sAEE&lt;&#x2F;p&gt;
&lt;p&gt;论文？：https:&#x2F;&#x2F;papers.ssrn.com&#x2F;sol3&#x2F;papers.cfm?abstract_id=796630&lt;&#x2F;p&gt;
&lt;p&gt;说白了就是对bs公式的一次修正，原始bs公式算出来的delta时没有考虑到波动率微笑曲线的，smile-delta就把微笑曲线的vega变化算到了delta中。&lt;&#x2F;p&gt;
&lt;p&gt;微笑曲线是正常的！反应了市场对风险的偏好程度，人们愿意为更大的黑天鹅付出更多的保险钱。&lt;&#x2F;p&gt;
&lt;p&gt;真实的delta只能通过历史算出来，在行情波动大的时候 smile-delta更准，“死鱼”行情的时候 正常delta与smile-delta差不多，方便计算就用正常delta就行。真实的delta应该处于这两者之间（真的吗？）&lt;&#x2F;p&gt;
&lt;p&gt;应该使用哪种delta也与交易的策略强相关。&lt;&#x2F;p&gt;
&lt;p&gt;像双买这种纯赌狗策略，肯定smile-delta更好，对冲好了能够纯吃vega和gamma还有delta，没有对冲好的结局就和本文一样……&lt;&#x2F;p&gt;
&lt;p&gt;像比例价差、阶梯价差这种吃小方向、岁月静好的收租金策略，一般情况下delta就行，因为行情波动大了策略也g了……&lt;&#x2F;p&gt;
&lt;h1 id=&quot;正文：近期的一次交易教训&quot;&gt;正文：近期的一次交易教训&lt;&#x2F;h1&gt;
&lt;p&gt;最近一直在玩加密的期权，由于资金小，只能做买方……&lt;&#x2F;p&gt;
&lt;p&gt;买方很蛋疼的一点就是胜率很低，期权的本质是在交易波动率，卖方天然的就有溢价，所以当买方进场就得交1-2个点的入场费。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;当前的策略&quot;&gt;当前的策略&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;买隔两个月的稍微实值一到两个档的期权（theta损耗小），一个月内换仓或者平仓。&lt;&#x2F;li&gt;
&lt;li&gt;在区间内进行delta对冲（+-5%），赚点gamma收益减少theta损失，并赌行情突破区间，突破后择时止盈。&lt;&#x2F;li&gt;
&lt;li&gt;盈利内容包含：delta对冲的gamma收益，行情突破的收益(delta与vega)。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;存在的问题&quot;&gt;存在的问题&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;这个策略非常依赖择时进入和退出（买方好像都这样……）&lt;&#x2F;li&gt;
&lt;li&gt;delta对冲时需要考虑波动率偏斜、对冲标的物本身的变化（永续的费率，交割的升贴水）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;交易复盘&quot;&gt;交易复盘&lt;&#x2F;h2&gt;
&lt;p&gt;交易所是某安，标的是eth，购入的日期为24-4-1，行权日期为24-5-31&lt;&#x2F;p&gt;
&lt;p&gt;当时的波动率偏斜很离谱，市场处于牛市前期，所以斜率非常陡，24-5-31的波动率如图：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%97&#x2F;image&#x2F;index&#x2F;1712891687797.png&quot; alt=&quot;1712891687797&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;call的溢价太多了，根本买不起；因为我的策略是无方向的，所以就买了atm的put，再用远期的交割进行对冲。&lt;&#x2F;p&gt;
&lt;p&gt;结果第二天就开始狂跌，本来应该开心，但是发现总的账户价值并没有增加，反而在减少，当前（4-12）已经少了10%左右……&lt;&#x2F;p&gt;
&lt;h2 id=&quot;原因思考&quot;&gt;原因思考&lt;&#x2F;h2&gt;
&lt;p&gt;经过多天的思考，以下是此次失败的教训总结&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;delta对冲程序运行正常。&lt;&#x2F;li&gt;
&lt;li&gt;期权的波动率偏斜过大，导致标的物价格下跌时期权的iv下降，从而导致亏损。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;损失值：4*3≈12&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;标的物选择的是远期交割，由于价格下跌、远期交割刚刷新出来，导致升水陡然下降，从而导致亏损。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;损失值：700*(15%-8%)≈50&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;rv与iv的差值(VRP)，择时出错，已经快半个月了并没有出现行情突破，并且整体IV都在下降，导致亏损。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;损失值：4*4≈16&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;整体损失70刀左右，账户价值下降10%。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;未来的改进&quot;&gt;未来的改进&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;出现波动率偏斜时，有俩种改进方式：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;同时卖出远虚值的call期权，这种方式最好，能够减少theta与偏斜的负收益，但是由于资金小，不太适用，以后可能会采用。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;计算当前的波动率偏斜斜率，写进程序，对冲掉这部分（已经完成）&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%97&#x2F;image&#x2F;index&#x2F;1712893639400.png&quot; alt=&quot;1712893639400&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对冲标的物的选择&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;双买策略，买一份call就行。但是会承担双倍的theta&#x2F;vega损失，更需要择时了，在没有波动率偏斜的时候，这种策略更好。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;看情况选择远期或者永续，远期的升水降低了对冲的效果，但是永续的费率也会导致亏损，需要根据市场情况选择（年化指标）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;择时&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;vrp&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%97&#x2F;image&#x2F;index&#x2F;1712893208438.png&quot; alt=&quot;1712893208438&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;vrp https:&#x2F;&#x2F;pro.amberdata.io&#x2F;options&#x2F;deribit&#x2F;eth&#x2F;current&#x2F;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;基差、费率&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%97&#x2F;image&#x2F;index&#x2F;1712893466022.png&quot; alt=&quot;1712893466022&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%9C%9F%E6%9D%83%E4%BA%A4%E6%98%93%E6%97%A5%E5%BF%97&#x2F;image&#x2F;index&#x2F;1712893435256.png&quot; alt=&quot;1712893435256&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;基差：https:&#x2F;&#x2F;www.coinglass.com&#x2F;zh&#x2F;Basis
费率：https:&#x2F;&#x2F;www.coinglass.com&#x2F;zh&#x2F;FundingRate
年化：自己算！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;这次是在波动率下降的半山腰接盘了，不应该一次全梭哈，分批入场，减少择时的风险。&lt;&#x2F;p&gt;
&lt;p&gt;需要看更多的数据，不要只看iv，还要看vrp、基差、费率等等。&lt;&#x2F;p&gt;
&lt;p&gt;Life is a long gamma&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>博客迁移随笔</title>
        <published>2024-01-17T00:00:00+00:00</published>
        <updated>2024-01-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/2024-1-17-博客迁移随笔/"/>
        <id>https://bbpp222006.github.io/2024-1-17-博客迁移随笔/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/2024-1-17-博客迁移随笔/">&lt;p&gt;起因是在逛hackernews的时候发现的zola模板，第一眼就被惊艳到了，又是rust写的，就想着啥时候闲下来一点把博客迁移一下。&lt;&#x2F;p&gt;
&lt;p&gt;功能太多了，还没摸清楚，看样子支持很多功能，katex、视频、图片、代码高亮等等，后续慢慢摸索吧。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>docker容器ipv6设置</title>
        <published>2022-03-26T00:00:00+00:00</published>
        <updated>2022-03-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/docker容器ipv6设置/"/>
        <id>https://bbpp222006.github.io/docker容器ipv6设置/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/docker容器ipv6设置/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;在使用qbit等bt下载软件时，如果有ipv6地址，节点的连接性将会更好，下载速度更快，peer也会更多。&lt;del&gt;刷流更快&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;p&gt;由于docker对于ipv6的支持并不是特别好，不能像ipv4一样，为创建的容器自动分配ipv6地址，或者进行nat等操作。&lt;&#x2F;p&gt;
&lt;p&gt;但是对于一个所有软件都装在docker内的mjj来说，这是不能容忍的事情。&lt;&#x2F;p&gt;
&lt;p&gt;在查阅了诸多资料之后，这里记录一下docker如何完美开启ipv6，并且为容器自动进行v6nat等操作。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;环境验证&quot;&gt;环境验证&lt;&#x2F;h2&gt;
&lt;p&gt;为了开启docker的ipv6支持，首先你的host主机必须要有能用的ipv6地址（废话）&lt;&#x2F;p&gt;
&lt;p&gt;这里用北邮人进行验证&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ping6 byr.pt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;PING byr.pt(2001:da8:215:4078:250:56ff:fe97:654d (2001:da8:215:4078:250:56ff:fe97:654d)) 56 data bytes
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;64 bytes from 2001:da8:215:4078:250:56ff:fe97:654d (2001:da8:215:4078:250:56ff:fe97:654d): icmp_seq=1 ttl=48 time=88.0 ms
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;64 bytes from 2001:da8:215:4078:250:56ff:fe97:654d (2001:da8:215:4078:250:56ff:fe97:654d): icmp_seq=2 ttl=48 time=86.7 ms
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;64 bytes from 2001:da8:215:4078:250:56ff:fe97:654d (2001:da8:215:4078:250:56ff:fe97:654d): icmp_seq=3 ttl=48 time=81.6 ms
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;64 bytes from 2001:da8:215:4078:250:56ff:fe97:654d (2001:da8:215:4078:250:56ff:fe97:654d): icmp_seq=4 ttl=48 time=86.0 ms
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来用busybox容器使用host网络进行验证&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;docker run --rm -it --net=host busybox &#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ping6 byr.pt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;PING byr.pt(2001:da8:215:4078:250:56ff:fe97:654d (2001:da8:215:4078:250:56ff:fe97:654d)) 56 data bytes
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;64 bytes from 2001:da8:215:4078:250:56ff:fe97:654d 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果以上输出的东西都正常，说明你的docker安装和host的ipv6都正常。&lt;&#x2F;p&gt;
&lt;p&gt;如果后续步骤出现了什么问题，一定要使用上述两种方式检查网络的连通性，以便debug&lt;&#x2F;p&gt;
&lt;h2 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h2&gt;
&lt;p&gt;经过上一节的验证后，你的ipv6地址应该是没问题了，接下来对docker的网络进行配置&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;vim &#x2F;etc&#x2F;docker&#x2F;daemon.json #加入以下配置的时候，注意别破坏了原来的结构，例如镜像啥的
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  &amp;quot;experimental&amp;quot;: true,
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  &amp;quot;ipv6&amp;quot;: true,
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  &amp;quot;ip6tables&amp;quot;: true,
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  &amp;quot;fixed-cidr-v6&amp;quot;: &amp;quot;fc00:100::&#x2F;24&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl restart docker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;完事后查看主机本身是否还能连上ipv6，方式如同第一节。&lt;&#x2F;p&gt;
&lt;p&gt;如果没什么问题，则恭喜你，完成了设置。&lt;&#x2F;p&gt;
&lt;p&gt;如果发现主机的ipv6失效了，ping不通，则尝试以下补救措施：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;编辑 &lt;code&gt;&#x2F;etc&#x2F;sysctl.conf&lt;&#x2F;code&gt;文件，加入以下字段&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;net.ipv6.conf.ens3.accept_ra = 2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 注意，这里的ens3是你的网卡名称，可以使用`ip addr`等命令进行查看，看情况进行修改
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code&gt;sudo sysctl -p&lt;&#x2F;code&gt; 使设置生效&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;之后再尝试ping6，查看主机的ipv6是否恢复&lt;&#x2F;p&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;&#x2F;h2&gt;
&lt;p&gt;此时你的docker应该可以无感的进行ipv6分配了，我们测试一下：&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;docker run --rm -it busybox &#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ping6 byr.pt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;PING byr.pt(2001:da8:215:4078:250:56ff:fe97:654d (2001:da8:215:4078:250:56ff:fe97:654d)) 56 data bytes
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;64 bytes from 2001:da8:215:4078:250:56ff:fe97:654d 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;结语&quot;&gt;结语&lt;&#x2F;h2&gt;
&lt;p&gt;这里只是记录了我的折腾过程，由于docker的ipv6不完善，可能会出现更多奇奇怪怪的问题。&lt;&#x2F;p&gt;
&lt;p&gt;暂时能用就行……&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>docker镜像部署</title>
        <published>2022-03-26T00:00:00+00:00</published>
        <updated>2022-03-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/docker镜像部署/"/>
        <id>https://bbpp222006.github.io/docker镜像部署/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/docker镜像部署/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;作为经常买鸡的mjj，经常需要在新环境中安装docker，安装qbit等容器服务。&lt;&#x2F;p&gt;
&lt;p&gt;如果vps在国外还好，docker.io下载速度都很快，不换源问题不大。&lt;&#x2F;p&gt;
&lt;p&gt;但是在国内……一旦遇到稍大点的容器（80多M），docker pull的时间就巨久，几十k的爬。&lt;&#x2F;p&gt;
&lt;p&gt;这里记录一下几种加速docker pull的方法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;直接代理&quot;&gt;直接代理&lt;&#x2F;h2&gt;
&lt;p&gt;最简单易懂的方式，利用已有的fq工具，对局域网提供http代理。&lt;&#x2F;p&gt;
&lt;p&gt;操作方式：（这里假设代理http端口地址在192.168.3.227的20171）&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;mkdir -p &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cat &amp;gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;https-proxy.conf &amp;lt;&amp;lt; EOF
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Service]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Environment=&amp;quot;HTTP_PROXY=http:&#x2F;&#x2F;192.168.3.227:20171&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Environment=&amp;quot;HTTPS_PROXY=http:&#x2F;&#x2F;192.168.3.227:20171&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl restart docker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;优点：docker pull 十分稳定，下载速度取决于水管的粗细。&lt;&#x2F;p&gt;
&lt;p&gt;缺点：你得有个提供代理的海外服务器，并且水管足够粗。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;第三方镜像源代理&quot;&gt;第三方镜像源代理&lt;&#x2F;h2&gt;
&lt;p&gt;这种方式流传最为广泛，基本上提供镜像服务的就那几家，没什么好说的&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cat &amp;gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &amp;lt;&amp;lt; EOF
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;quot;registry-mirrors&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        &amp;quot;某个代理地址&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    ]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl restart docker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;优点：免费&lt;&#x2F;p&gt;
&lt;p&gt;缺点：下载不稳定，会出现断流的现象，并且代理提供商可能会跑路，网上找的需要逐个测试……&lt;&#x2F;p&gt;
&lt;h2 id=&quot;利用cf_worker_自建镜像代理服务&quot;&gt;利用cf worker 自建镜像代理服务&lt;&#x2F;h2&gt;
&lt;p&gt;首先你得有个cloudflare的账号，并且去开启worker服务，这里不细说了，网上教程很多&lt;&#x2F;p&gt;
&lt;p&gt;之后到 https:&#x2F;&#x2F;github.com&#x2F;lework&#x2F;cloudflare-workers 项目中找到docker_proxy.js文件，复制到你的worker代码中。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;注意，代码的前几行中的workers_url需要改为你worker的地址，默认是他的&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;完事后点部署，这样你就拥有自己的docker加速镜像了（实际上是个反代……）&lt;&#x2F;p&gt;
&lt;p&gt;优点：免费，稳定（不容易跑路）&lt;&#x2F;p&gt;
&lt;p&gt;缺点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;速度比较低，稳定在30-50M之间，若要更快的下载，则需要根据你的机器所在地区&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;XIU2&#x2F;CloudflareSpeedTest&quot;&gt;寻找最快的cf ip&lt;&#x2F;a&gt;，然后写入host里面&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;有次数和流量限制（个人用肯定用不完，具体参考cf的官网）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;结语&quot;&gt;结语&lt;&#x2F;h2&gt;
&lt;p&gt;个人对以上几种方式做个排名吧&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;直接代理，这种方式最稳了，要是有大水管，那将是绝杀。&lt;&#x2F;li&gt;
&lt;li&gt;cf worker，cf作为全球最大的cdn商家，能够为广大吃瓜群众提供worker这一利（yang）器（mao），非常的良心。&lt;&#x2F;li&gt;
&lt;li&gt;第三方镜像源代理，没什么好说的，用过就知道不是很靠谱了……&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>二值化神经网络论文翻译</title>
        <published>2021-11-17T00:00:00+00:00</published>
        <updated>2021-11-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/二值化神经网络论文翻译/"/>
        <id>https://bbpp222006.github.io/二值化神经网络论文翻译/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/二值化神经网络论文翻译/">&lt;h1 id=&quot;Adam优化器是如何加速二值化神经网络训练的&quot;&gt;Adam优化器是如何加速二值化神经网络训练的&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;这是一篇ICML 2021的论文，比较新而且作者开源了相关代码。&lt;&#x2F;p&gt;
&lt;p&gt;由于毕设相关需要进行神经网络某一层的二值化，正好了解一下神经网络二值化相关的前沿研究现状。&lt;&#x2F;p&gt;
&lt;p&gt;于是选择这一篇进行翻译&lt;&#x2F;p&gt;
&lt;p&gt;原文链接：https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2106.11309.pdf&lt;&#x2F;p&gt;
&lt;p&gt;代码链接：https:&#x2F;&#x2F;github.com&#x2F;liuzechun&#x2F;AdamBNN&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;一些废话就不翻译了……
试一下github-web直接写博客，markdown不好插图，就不放图了，这里的图n读者可以自己对应到原文图n去看
尽量会用博客的形式写，论文格式看的比较累……&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;&#x2F;h2&gt;
&lt;p&gt;效果最好的一些关于二值化训练的文章用的都是adam优化器，但是据我们了解，很少有人去仔细研究其中的原理。&lt;&#x2F;p&gt;
&lt;p&gt;为了深入研究这其中发生了什么，我们首先研究了bnn在训练过程中的权重和梯度变化，我们发现了adam中的二阶动量能够将bnn中“死亡”的节点重新“盘活”。我们还发现 Adam 因为其自适应学习率策略，能够更好地处理 BNN 中凹凸不平的损失函数超平面，并以更好的泛化能力达到更好的最优解。&lt;&#x2F;p&gt;
&lt;p&gt;此外，我们还发现了二值神经网络中的“真实权重”在训练中的有趣作用，并揭示了权重衰减对 BNN 训练的稳定性和训练速度的影响。&lt;&#x2F;p&gt;
&lt;p&gt;通过大量的实验和分析，我们提出了一个简单的训练方案，建立在现有的基础 Adam 优化器之上，使用与 Sota ReActNe相同的架构在 ImageNet 数据集上实现了 70.5% 的 top-1 准确率，同时实现了比原文更高1.1% 的准确率。代码和模型可在 https:&#x2F;&#x2F;github.com&#x2F;liuzechun&#x2F;AdamBNN 获得。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1.简介&quot;&gt;1.简介&lt;&#x2F;h2&gt;
&lt;p&gt;神经网络的优化是在一个超平面中寻找最小值，bnn由于其值选择的限制，导致bnn的超平面参差不齐，有很多局部最优值，如图一所示&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-17-08-04.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;图一：具有相同架构 (ResNet-18) 的常规网络和二值网络的实际优化超平面。我们是按照 (Li et al., 2018) 中的方法来画的。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;很多人都发现了使用adam训练二值神经网络有奇效，但很少有人去研究其中的原因。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-17-09-01.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;图二：在 ImageNet 上训练的常规和二值网络（基于 ResNet-18）的 top-1 精度曲线。在常规网络上，SGD 在最后几次迭代中实现了更高的准确率和更好的泛化能力。因为二值化具有很强的正则化效应，导致其验证精度高于训练精度。在这种情况下，Adam 的表现优于 SGD&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Wilson et al. (Wilson et al.,2017) 等人最近的工作表明：像adam这种带有自适应学习率的优化器，比sgd这种动量型优化器要垃圾一些，具体表现在adam找到的最优点比sgd要少。这一结论与我们平常炼丹的经验相符，最近的一些机器视觉、自然语言处理等方向的文章用的都是sgd优化器。但从理论上来说，adam前期训练的收敛更快，最终的效果应该比sgd要好一些，这似乎不符合直觉。&lt;&#x2F;p&gt;
&lt;p&gt;我们发现在常规的网络中，往往会出现过度拟合的现象，如图二所示。但我们接下来发现，bnn不一定会发生这种情况，即使我们延长bnn的训练时间，还是会出现在训练集上欠拟合的情况。在图二b中，sgd优化器抖动的更加厉害，表明sgd可能很容易在bnn参差不齐的超平面中迷路，从而找不到最优点。&lt;&#x2F;p&gt;
&lt;p&gt;基于这些观察到的现象，我们研究了这其中的根本原因，在bnn的训练过程中，由于“激活饱和效应”，使得一部分节点梯度变为0。&lt;&#x2F;p&gt;
&lt;p&gt;如果用sgd优化器，sgd每轮更新的权重只跟当前的梯度有关，所以很难把那些已经“死”了的节点重新激活。用适当的梯度重新激活那些“死”节点，能够极大地提高bnn的训练效率。&lt;&#x2F;p&gt;
&lt;p&gt;我们的可视化结果和最终的实验结果进一步证明了这一结论。在我们的试验中，来自adam的二阶动量的历史效应能够有效的解决“死”节点的问题。&lt;&#x2F;p&gt;
&lt;p&gt;除了研究adam和sgd这类优化器之间的差别之外，我们还研究了bnn具体的训练策略对其的影响。以前许多人都提出过这类策略：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Yang (Yang et al., 2019) 提出将权重从 16 位逐步量化为 1 位。&lt;&#x2F;li&gt;
&lt;li&gt;zhuang (Zhuang et al., 2018) 提出首先对权重进行二值化，然后在第二步中对激活进行二值化。&lt;&#x2F;li&gt;
&lt;li&gt;最近Martinez (Brais Martinez, 2020) 提出了一种两步策略，首先将激活二值化，然后将权重二值化。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;这些策略的实现方式都很复杂，但基本都没告诉你为啥要这样设计……。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在我们工作的第二部分，我们没有提出新的训练策略，而是从一个重要但被忽视的角度解释 BNN 训练策略背后的机制——权重衰减。我们分别用两个指标：&lt;code&gt; FF 比率&lt;&#x2F;code&gt;和 &lt;code&gt;C2I 比率&lt;&#x2F;code&gt;来量化权重衰减对 BNN 优化的稳定性和初始化依赖性的影响。在这些指标的指导下，我们确定了一个更好的权重衰减方案，将最先进的 ReActNet 的准确率从 69.4% 提高到 70.5%，&lt;strong&gt;超过了&lt;&#x2F;strong&gt;之前发表的所有关于 BNN 的研究。&lt;&#x2F;p&gt;
&lt;p&gt;与之前专注于为 BNN 设计网络架构的研究不同，我们专注于优化器和训练策略的研究，我们觉得这样能够最大化的发掘现有网络结构的潜力。我们所有的实验都是在完整的 ImageNet1 上进行的，它更可靠。我们相信我们的探索性实验将有利于 BNNs 优化的研究，并可能在这个方向上激发更多有趣的想法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;贡献&quot;&gt;贡献&lt;&#x2F;h3&gt;
&lt;p&gt;总之，我们解决了以下问题，具体的研究贡献如下： &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;我们在大规模 ImageNet 数据集上为 BNN 优化提供了不同优化器之间的彻底和公平的比较，尤其是 Adam 和 SGD 之间的比较。我们进一步设计了几个指标来分析二元行为背后的模式，并基于训练中梯度和权重的改变提出了一种简单的可视化方法。&lt;&#x2F;li&gt;
&lt;li&gt;我们可视化了训练的轨迹曲线，来解释为什么自适应学习率这个功能很重要，尤其是在优化超平面非常参差不齐的时候。最后得出结论，梯度归一化对于 BNN 的优化至关重要。 &lt;&#x2F;li&gt;
&lt;li&gt;我们进一步研究了各种关于BNN的优化策略设计，并对其中的权重衰减效应进行了深入分析。基于这些分析，我们提出了优化 BNN 的实用建议。这些结论帮助我们训练模型的准确率比之前的最新结果高 1.1%。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2.相关工作&quot;&gt;2.相关工作&lt;&#x2F;h2&gt;
&lt;p&gt;二值神经网络优化的研究主要可以分为几个方面：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;结构调整&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;以前改进 BNN 的尝试主要集中在网络结构设计上，包括添加实值跨链接 (Liu et al., 2018b;a; 2020) 或实值注意力模块 (Brais Martinez, 2020)，扩展通道宽度（Mishra 等人，2017 年；Zhuang 等人，2019 年），集成更多二值网络（Zhu 等人，2019 年）或使用循环卷积（Liu 等人，2019 年）。这些文章提出的结构能够有效地增加网络效果。在这项工作中，我们有动力消除与结构设计正交的二元优化过程。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;梯度误差减少和损失函数设计 &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;一些研究关注减少 BNN 的梯度误差，例如，XNOR-Net (Rastegari et al., 2016) 使用实值缩放因子与二进制权重和激活相乘，以及ABC-Net (Lin et al., 2017) 采用了更多的权重基数。 IR-Net (Qin et al., 2020) 建议 Libra-PB 同时最小化量化误差和信息丢失。一些文章调整了损失函数。侯等人提出的损失感知二值化（Hou 等人，2016 年）使用近端牛顿算法和对角 Hessian 近似来直接最小化损失 w.r.t.二进制权重。丁等人。提议的激活正则化损失以改进 BNN 训练（Ding 等人，2019）。这些研究还旨在解决二元神经网络中离散性带来的优化挑战。相反，我们仔细研究了另一个重要但研究较少的角度，优化器和优化策略推理。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;优化器选择和设计&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;最近，许多二元神经网络选择 Adam 而不是 SGD，包括 BNN（Courbariaux 等人，2016）、XNOR-Net（Rastegari 等人，2016）、Real-to-Binary Network(Brais Martinez, 2020)、Structured BNN (Zhuang et al., 2019)、ReActNet (Liu et al., 2020) 等。 Helwegen et al.提出了一种基于 Adam 的新二元优化器设计（Helwegen 等人，2019）。二元神经网络优化的实证研究（Alizadeh 等人，2018 年；Tang 等人，2017 年）也明确提到 Adam 优于 SGD 和其他优化方法。然而，Adam 适合二元网络优化的原因仍然知之甚少。在这项研究中，我们调查了 Adam 的行为，试图引起人们对二元优化器理解的关注，并在给定的网络结构内提高二元网络的性能，我们希望这对社区有价值。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;训练策略&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;多项工作提出了不同的多步训练策略来提高 BNN 的性能。庄等人。 (Zhuang et al., 2018) 提出首先量化权重，然后量化权重和激活。以下（庄等人，2018），杨等人。 (Yang et al., 2019) 提出从较高位宽到较低位宽逐步量化权重和激活。最近的研究（Brais Martinez，2020 年；Liu 等人，2020 年）建议首先对激活进行二值化，然后在第二阶段进一步对权重进行二值化。之前的那些工作都提出了自己的训练技术，但很少将技术概括为背后的原因，这也给追随者在确定他们可以在自己的情况下使用哪种技术时带来了困惑。在这项工作中，除了提供可能的解决方案之外，我们还分析了选择优化策略的基础，希望能在该领域激发更多有趣的解决方案。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3.方法&quot;&gt;3.方法&lt;&#x2F;h2&gt;
&lt;p&gt;本节首先介绍来自实值网络和二元神经网络 (BNN) 训练的几个观察结果。我们观察到 Adam 在 BNN 上的泛化能力优于 SGD，如图 2 所示。这种现象促使我们问为什么 SGD 对实值分类网络效果更好，但在二元神经网络优化中失去了优势。以此开始，我们在优化实际二元神经网络期间可视化激活饱和现象，并在第 3.2.1 节中考虑其对梯度大小的影响。然后我们观察到激活饱和会导致通道权重的不公平训练问题，如第 3.2.2 节所述。&lt;&#x2F;p&gt;
&lt;p&gt;此外，为了清楚地解释，我们构建了一个包含符号函数的假想二维损失图，以模拟第 3.2.3 节中激活二值化的 BNN 的简化优化过程，并且我们分析了 Adam 如何帮助克服零梯度局部最小值.此外，我们指出 BNN 中的实值权重可以视为置信度得分，如第 3.2.4 节所述，使 BNN 优化变得复杂。因此，我们在 3.3 节中定义了几个指标来描述 BNN 的属性并衡量 BNN 训练策略的优劣。最后，我们提供了优化 BNN 的实用建议。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3.1前言&quot;&gt;3.1前言&lt;&#x2F;h3&gt;
&lt;p&gt;二元神经网络优化具有挑战性，因为 BNN 的权重和激活是 {-1, +1} 中的离散值。特别是，在前向传递中，实值权重和激活值使用符号函数进行二值化。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-20-55-58.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;请注意，实值激活 ar 是前一层的输出，由二进制或实值卷积运算生成。真实的权重wr在后端储存以累积小梯度。后端是指在前向传递计算中不使用权重。相反，实值潜在权重乘以通道方式的绝对平均值 ($\frac{1}{n}\left|\right|W_r\left|\right| _{l1}$) 的符号用于更新二进制权重（Rastegari 等人，2016 年）。&lt;&#x2F;p&gt;
&lt;p&gt;在反向传播中，由于符号函数的不可微特性，总是采用$clip(-1,a_r,1)$函数的导数作为符号函数导数的近似(Rastegari et al. , 2016)。值得注意的是，由于符号是一个范围有界的函数，当激活超过有效梯度范围([−1,1 ])，这会导致将在第 3.2.1 节中讨论的优化困难。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3.2_现象观察&quot;&gt;3.2 现象观察&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;3.2.1_梯度的激活饱和度&quot;&gt;3.2.1 梯度的激活饱和度&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-21-12-15.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;图3 来自 ImageNet 上不同优化器的二进制 ResNet-18 结构中的激活分布。虚线是上限 (+1) 和下限 (-1)。我们画了第一个二值卷积层的激活值的分布情况，我们观察到 SGD 和 Adam 优化器的 BNN 都有激活饱和的现象。然而，与 SGD 相比，Adam 可以在优化过程中缓解激活饱和，如 (c) 和 (d) 中的放大视图所示。我们进一步统计了 SGD 和 Adam 超出边界的激活次数，第一个 epoch 后的百分比分别为 42.54% 和 35.45%，最后一个 epoch 后的百分比分别为 38.61% 和 23.81%。 Adam 优化的激活饱和比例明显低于 SGD。更多详情请参阅第 3.2.1 节。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;根据符号函数的导数近似的定义（Ding et al., 2019），激活饱和是激活的绝对值超过1并且相应的梯度被抑制为零的现象。根据我们的观察，激活饱和存在于二元网络的每一层，它将严重影响不同通道中梯度的大小。在图 3 中，我们可视化了第一个二元卷积层的激活分布。我们可以观察到许多激活超过了 -1 和 +1 的边界，使得通过这些节点的梯度变为零值。根据链规则 (Ambrosio &amp;amp; Dal Maso, 1990)，梯度极易受到后层激活饱和的影响，因此会以相应的幅度剧烈振动&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3.2.2_权重训练过程中的公平性&quot;&gt;3.2.2 权重训练过程中的公平性&lt;&#x2F;h4&gt;
&lt;p&gt;不公平的训练是一些通道中的权重没有被优化来学习有意义的表示的现象。给定不同批次的图像，激活饱和通常发生在不同的激活通道上。在这些通道中，我们观察到的梯度总是很小，这会导致训练不公平。请注意，权重是指二元神经网络中的实值潜在权重。这些实值权重的大小被视为“惯性”（Helwegen 等人，2019 年），表明相应的二进制权重改变其符号的可能性有多大。&lt;&#x2F;p&gt;
&lt;p&gt;为了衡量不公平训练的影响，我们计算了 Channel-wise Absolute Mean (CAM) 以捕获内核中实值权重的平均幅度，在图 4 和图 5 中用红色字符表示。 CAM 的定义如下：&lt;&#x2F;p&gt;
&lt;p&gt;$$
CAM = \frac{1}{N_{in} \cdot k\cdot k } \sum_{c=1}^{N_{in}}\sum_{i=1}^{k}\sum_{j=1}^{k} | w{{c,i,j}} | \tag{3}
$$&lt;&#x2F;p&gt;
&lt;p&gt;其中$N_{in}$是输入通道的数量，$w$ 是 BNN 中的权重，c 是通道索引，i,j 是 c 通道中的元素位置，k 是内核大小。我们可以看到，当使用 SGD 时，二元网络中潜在权重的 CAM 值（图 4（b））与其实值对应物（图 4（a））相比较小，并且方差也较高，这反映了 SGD 优化二元网络内部的不平衡权重训练。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-21-28-27.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;图4 训练一个 epoch 后第一个二元卷积层中的权重值分布。为清楚起见，我们使用红色字符来标记每个内核中实值权重的 Channel-wise Absolute Mean (CAM)。灰色虚线表示 Adam 优化二元网络中权重的最小 CAM 值 (0.0306)。与 Adam 相比，SGD 优化导致更低的 CAM 值和更高的标准偏差 (SDAM)，这表明使用 SGD 优化的权重不如使用 Adam 优化的权重公平（训练有素）。更详细的分析见3.2.3节&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为了测量经过训练的潜在实值权重幅度的均匀性，我们提出了每个输出通道上实值权重幅度的绝对均值标准差 (SDAM)。 SGD 和 Adam 的 SDAM 统计数据如图 4 所示。 很明显，Adam 的 SDAM 低于 SGD，表明 Adam 训练的公平性和稳定性高于 SGD。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-21-50-45.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;图 5. 一个 epoch 训练后第一个二元卷积层中权重的更新值分布。为清楚起见，我们省略了原始更新值分布，并使用红色连字符标记每个内核中权重更新值的通道绝对均值 (CAM)。在这一层中，SGD 中 34.3% 的内核的 CAM 低于 Adam 中的最小 CAM。另见第 3.2.3 节。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3.2.3_为什么adam比sgd要好&quot;&gt;3.2.3 为什么adam比sgd要好&lt;&#x2F;h4&gt;
&lt;p&gt;为了更好地说明，我们绘制了一个具有两个节点的网络的二维损失表面，其中每个节点都包含一个对其输入进行二值化的符号函数。如图 6 (a) 所示，符号函数导致离散化的损失情况中几乎所有输入间隔的梯度都为零，使得在超平面中无法通过梯度下降进行优化。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-21-48-32.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;图 6. 用两个二元节点的总和构建的网络的损失平面可视化。 (a) 前向传递中二元网络的损失面，二值化函数 sign(x) 将景观离散化，(b) 使用 clip(-1, x, 1) 的导数逼近后实际优化的损失面sign(x) 的导数，(c) 使用 SGD 优化器和 Adam 优化器征服零梯度局部最小值的比较，(d) 实际优化轨迹的俯视图&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在文献中，总是采用$clip(-1,a_r,1)$函数的导数作为符号函数导数的近似。因此，计算梯度的实际超平面是多个线性函数拼接成的。在图 6 (b) 中，只有当两个输入都落在 [-1, 1] 的区间内时，二元激活的近似梯度才会在两个方向上保持其值，如图 6 (b) 中的斜线区域所示。在该区域之外，梯度向量要么仅在一个方向上有值，要么在两个方向上都包含零值，这就是所谓的平坦区域。&lt;&#x2F;p&gt;
&lt;p&gt;在实际的 BNN 优化过程中，激活值取决于输入图像，并且会因批次而异，很可能会超过 [-1, 1]。这种激活饱和效应反过来导致梯度消失问题。为了说明，在这个 2D 损失表面上，我们用灰色圆圈表示优化的起点。从相同的梯度序列开始，SGD 优化器根据定义计算第一个动量的更新值：$v_t = γv_{t−1} + g_t$，其中 $g_t$表示梯度，$v_t$ 表示权重更新的第一个动量。&lt;&#x2F;p&gt;
&lt;p&gt;Adam的权重更新函数为：$u_t = \frac{\hat{v_t}}{\sqrt{\hat{m}_t}+\epsilon}$, $\hat{v}_t$和$\hat{m}_t$分别表示梯度和平方梯度的指数移动平均值。&lt;&#x2F;p&gt;
&lt;p&gt;在平坦区域，用 $\hat{m}_t$ 跟踪梯度的方差，更新值 $u_t$ 被归一化以克服梯度值的差异。与仅累积第一个动量的 SGD 相比，自适应优化器 Adam 自然地利用第二个动量的累积来放大关于具有较小历史值的梯度的学习率。如图 6 (c) 和 (d) 所示，当 x 方向的梯度消失时，与 SGD 相比，Adam 在 x 方向的更新值中包含更高的比例。在我们的实验中，我们发现这个特性对于优化具有更粗糙表面和由于二值化导致的局部平坦区域的 BNN 至关重要。图 5 还显示了在训练实际 BNN 时使用 CAM 形式的每次迭代的更新值。它证实了使用 Adam 训练，更新值通常大于阈值，但使用 SGD，这些值非常接近于零。因此，与 SGD 相比，来自饱和的“死”权重更容易被 Adam 重新激活。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3.2.4_真实权重的物理意义&quot;&gt;3.2.4 真实权重的物理意义&lt;&#x2F;h4&gt;
&lt;p&gt;Adam 在 BNN 方面的优势也体现在最终的准确性上。如图7(a)所示，Adam实现了61.49% 的 top-1 准确率，与图 7（b）中 SGD 的 58.98% 相比，在超参数和网络结构方面强加给两个实验的一致设置。此外，我们研究了最终模型的图 7 中的权重分布，并获得了一些有趣的发现。我们发现性能更好的模型的实值潜在权重通常出现三个峰值，一个接近于零，另外两个超过 -1 和 1。对于那些使用 SGD 优化不佳的模型，值权重仅包含一个以零为中心的峰值。&lt;&#x2F;p&gt;
&lt;p&gt;实值权重的物理意义表明相应的二进制权重可以将其符号（-1 或 +1）切换到相反方向的难易程度。如果实值权重接近中心边界（0），它们很容易通过梯度更新的几步下降或偏置到-1或+1，使整个网络不稳定。因此，正如 (Helwegen et al., 2019) 中所提到的，实值权重可以被视为二进制值的置信度为 -1 或 +1 并不牵强。从这个角度来看，Adam 学习的权重肯定比 SGD 学习的权重更有把握，这一致验证了 Adam 是用于二元神经网络的更好优化器的结论。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3.3_理解_BNN_优化的指标&quot;&gt;3.3 理解 BNN 优化的指标&lt;&#x2F;h3&gt;
&lt;p&gt;鉴于 Adam 优于 SGD，我们进一步研究了这一发现并研究了 BNN 的训练策略。基于 BNN 优化依赖于梯度累积的实值权重及其损失计算符号的有趣事实，与实值网络相比，BNN 优化是难以处理的。因此，为了更好地揭示令人困惑的 BNN 训练的机制，我们提出了两个指标来描述训练过程，并进一步发现了添加在实值潜在权重上的权重衰减在控制二元权重训练方面起着不可忽视的作用。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3.3.1_BNN_优化中的权重衰减&quot;&gt;3.3.1 BNN 优化中的权重衰减&lt;&#x2F;h4&gt;
&lt;p&gt;在实值神经网络中，权重衰减通常用于正则化实值权重，使其不会变得过大，从而防止过拟合并有助于提高泛化能力（Krogh &amp;amp; Hertz，1992）&lt;&#x2F;p&gt;
&lt;p&gt;然而，对于二元神经网络，权重衰减的影响并不那么直接。由于 BNN 中权重的绝对值被限制为 -1 和 +1，权重衰减不再有​​效防止二进制权重过大。此外，在二元神经网络中，权重衰减应用于实值潜在权重。回想一下，在第 3.2.4 节中，BNN 中实值权重的大小可以被视为相应二进制权重对其当前值的&lt;em&gt;置信度&lt;&#x2F;em&gt;。在这些实值权重上添加权重衰减实际上是在尝试衰减&lt;em&gt;置信度&lt;&#x2F;em&gt;分数。&lt;&#x2F;p&gt;
&lt;p&gt;从这个角度来看，权重衰减会导致二元网络优化在稳定性和权重初始化的依赖性之间陷入困境。由于权重衰减大，潜在权重的大小被正则化为小，使得相应的二进制权重对其符号“不太自信”，并且更容易频繁切换符号，即降低优化的稳定性.随着权重衰减更小甚至为零，潜在权重趋向于-1和+1，相应的二进制权重将更稳定地保持在当前状态。然而，这是一种权衡，因为需要更大的梯度来提升权重以切换其符号以克服“死”参数问题。也就是说，在权重衰减很小或为零的情况下，网络的性能将受到初始化的严重影响。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3.3.2_量化指标&quot;&gt;3.3.2 量化指标&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-22-28-55.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;图 7. 最终的权重分布。我们发现与 SGD 相比，Adam 具有更多的潜在实值权重和更大的绝对值。由于实值权重可以看作是对应的二进制权重在其当前符号上的置信度得分，因此 Adam 优化的二值网络比 SGD 对值更有信心，最终的准确率也更高。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为了量化这两种影响（网络稳定性和初始化依赖性），我们引入了两个指标：用于测量优化稳定性的触发器（FF）比率，以及用于测量对初始化的依赖性的相关与初始化 (C2I) 比率。 FF 比率定义为：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-22-33-34.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中 &lt;strong&gt;IFF&lt;&#x2F;strong&gt;是权重在迭代 t 更新后是否改变其符号的指标。 $N_{total}$ 是具有 L 个卷积层的网络中的权重总数。 FFratio 表示触发器的比率，即改变其符号的权重百分比。然后我们将 C2I 比率定义为：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-22-34-31.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中 $I_{C2I}$ 是权重是否与其初始符号具有不同符号的指标，$C2I_{ratio}$ 表示最终权重的符号与初始值之间的相关性。&lt;&#x2F;p&gt;
&lt;p&gt;在这里，我们研究了不同重量衰减值的 FF 比和 C2I 比。从表1不难发现FF比与C2I比呈负相关。随着重量衰减的增加，FF比呈指数增加，而C2I比呈线性下降。这表明一些触发器对最终权重没有贡献，而只会损害训练稳定性。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-22-37-37.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;表 1. 不同权重衰减的 Adam 优化的 FF 比、C2I 比和 Top-1 精度。请注意，此表中的 FF 比率是总训练迭代的平均值。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在这个实验中，我们发现使用 5e-6 的权重衰减产生最高的准确度。此外，我们发现特定的两步训练方案（Brais Martinez，2020 年；Liu 等人，2020 年）可以解决 FF 比和 C2I 比之间的负相关。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3.3.3_实际训练的建议&quot;&gt;3.3.3 实际训练的建议&lt;&#x2F;h4&gt;
&lt;p&gt;从本质上讲，是否在实值潜在权重上添加权重衰减的困境源于二进制权重在值上是离散的这一事实。对于零附近的实值潜在权重，值的轻微变化可能会导致相应的二进制权重发生显着变化，从而使得鼓励实值潜在权重聚集在零附近变得相当棘手。&lt;&#x2F;p&gt;
&lt;p&gt;有趣的是，我们发现最近的两步训练算法（Brais Martinez，2020 年；Liu 等人，2020 年）的一个很好的权重衰减方案可以解决这个难题。在 Step1 中，只对激活进行二值化，并使用权重衰减的实值权重来累积小的更新值。由于实值网络不必担心 FF 比率，我们可以简单地添加权重衰减来获得低初始化依赖性的好处。然后，在步骤 2 中，我们用来自步骤 1 的权重初始化二元网络中的潜在真实权重，并对它们强制权重衰减为 0。通过此操作，我们可以降低 FF 比率以提高稳定性并利用来自 Step1（类似于预训练）的良好初始化而不是随机参数。在这个阶段，高 C2I 比率不会损害优化。从这个角度来看，我们发现 5e-6 作为权重衰减在权重大小平衡方面表现最好，以便在 Step2 中进行良好的初始化&lt;&#x2F;p&gt;
&lt;p&gt;如图 7(c) 所示，两步训练中更多的实值权重倾向于聚集在 -1 和 +1 附近，表明这种策略比一步更有信心。通过查看早期时期的 FF 比率，简单地消除不需要的权重衰减值，我们可以找到具有较少试验和错误的良好权重衰减。我们将在第 4 节中看到，我们的训练策略在相同架构下的性能比最先进的 ReActNet 高 1.1%。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4_各种实验&quot;&gt;4 各种实验&lt;&#x2F;h2&gt;
&lt;p&gt;这里就不翻译了&lt;&#x2F;p&gt;
&lt;h4 id=&quot;4.3.2_两步训练&quot;&gt;4.3.2 两步训练&lt;&#x2F;h4&gt;
&lt;p&gt;为了确保选择建议的两步训练算法的可信度，我们在不同的训练方案之间进行了受控比较。在表 4 中，我们建议的首先对激活进行二值化，然后对权重（BABW）进行二值化的顺序比反向的准确度高 2.93%。&lt;&#x2F;p&gt;
&lt;p&gt;在 BWBA 中，两个步骤都采用二进制权重，它们被限制为离散的。因此，与 BABW 的 Step1 中的实值权重相比，BWBA 的 Step1 中的二进制权重更难为 Step2 提供良好的初始化。因此BWBA无法达到打破FF比与C2I比负相关的效果。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-11-18-22-44-58.png&quot; alt=&quot;&quot; &#x2F;&gt;
图 8. Adam 和 SGD 上的准确率与初始学习率&lt;&#x2F;p&gt;
&lt;h1 id=&quot;结尾&quot;&gt;结尾&lt;&#x2F;h1&gt;
&lt;p&gt;本文主要聚焦于二值网络的训练过程&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先用例子表明了为什么二值化网络难以训练&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;然后结合网络训练时候的内部权重变化趋势，提出了一个模型来解释为什么会这样&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;最后用这个模型解释了adam优化好的原因&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;还提出了一个针对二值网络训练的具体训练策略：二步训练&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;接下来可以结合作者开源的代码尝试迁移，感谢作者的工作！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>rust环境配置</title>
        <published>2021-10-24T00:00:00+00:00</published>
        <updated>2021-10-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/rust环境配置/"/>
        <id>https://bbpp222006.github.io/rust环境配置/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/rust环境配置/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;rust也学了挺久了，最近有个写后端查询的小需求，打算用rust写一下，然后就发现以前配好的环境全都丢失了……&lt;&#x2F;p&gt;
&lt;p&gt;于是正好写个博客记录一下怎么从头开始配置一个rust的全家桶环境&lt;&#x2F;p&gt;
&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;p&gt;博主的操作环境为linux，ubuntu&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust本体的安装&quot;&gt;rust本体的安装&lt;&#x2F;h2&gt;
&lt;p&gt;官网：https:&#x2F;&#x2F;www.rust-lang.org&#x2F;learn&#x2F;get-started 一句话就行。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https:&#x2F;&#x2F;sh.rustup.rs | sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;安装过程全程使用默认选项，最后会告诉你用&lt;code&gt;source $HOME&#x2F;.cargo&#x2F;env&lt;&#x2F;code&gt;激活一下cargo的环境变量&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cargo换源&quot;&gt;cargo换源&lt;&#x2F;h2&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;vim $HOME&#x2F;.cargo&#x2F;config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更改为：&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[source.crates-io]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;registry = &amp;quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;crates.io-index&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;replace-with = &amp;#39;ustc&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[source.ustc]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;registry = &amp;quot;git:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;crates.io-index&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果有代理的话就用：&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[http]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;proxy = &amp;quot;127.0.0.1:1080&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[https]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;proxy = &amp;quot;127.0.0.1:1080&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更改完成之后不用activate之类的激活，之后下载包会自动更新&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vscode配置&quot;&gt;vscode配置&lt;&#x2F;h2&gt;
&lt;p&gt;vscode用的是这个插件全家桶：Rust and Friends&lt;&#x2F;p&gt;
&lt;p&gt;如果安装完成后发现rust-language-server的错误，参考这个链接解决：https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;58312319&#x2F;couldnt-start-client-rust-language-server&lt;&#x2F;p&gt;
&lt;p&gt;vsc插件下载慢的话需要设置代理&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cargo配置&quot;&gt;cargo配置&lt;&#x2F;h2&gt;
&lt;p&gt;工程创建完成后，我们即可以进入开发环节了。开发中，一些工具类 crate 可以起到“善其事”的作用，我们需要先进行安装。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;cargo-edit，包含 &lt;code&gt;cargo add&lt;&#x2F;code&gt;、&lt;code&gt;cargo rm&lt;&#x2F;code&gt;，以及 &lt;code&gt;cargo upgrade&lt;&#x2F;code&gt;，可以让我们方便地管理 crate。&lt;&#x2F;li&gt;
&lt;li&gt;cargo-watch，监视项目的源代码，以了解其更改，并在源代码发生更改时，运行 Cargo 命令。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;好的，我们安装这 2 个 crate。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cargo install cargo-edit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cargo install cargo-watch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;hello_rust&quot;&gt;hello rust&lt;&#x2F;h2&gt;
&lt;p&gt;cd到一个新的目录下，例如&lt;code&gt;&#x2F;mnt&#x2F;bignas&#x2F;rustproject&#x2F;hello_rust&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;执行命令&lt;code&gt;cargo init&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ tree .
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;├── Cargo.toml
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;└── src
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    └── main.rs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;1 directory, 2 files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;cargo run&lt;&#x2F;code&gt;就行了，配置完成&lt;&#x2F;p&gt;
&lt;h1 id=&quot;结尾&quot;&gt;结尾&lt;&#x2F;h1&gt;
&lt;p&gt;相比于go、py还有js等其他语言来说，rust写起来主要是跟编译器在作斗争，但实际上编译器的提示是实时的，能够鞭策程序员养成良好的编程习惯，编译器如果没报错，基本上程序就能一次运行。从另一方面来说，减少了debug的时间，反而增加了编程的效率。&lt;&#x2F;p&gt;
&lt;p&gt;推荐各位老哥尝试一下rust，真的好用&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>分流代理配置</title>
        <published>2021-10-06T00:00:00+00:00</published>
        <updated>2021-10-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/2021-10-6-分流代理配置/"/>
        <id>https://bbpp222006.github.io/2021-10-6-分流代理配置/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/2021-10-6-分流代理配置/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;虽然学校内的环境很美好，但免不了需要外地进行访问的问题&lt;&#x2F;p&gt;
&lt;p&gt;比如北邮人pt站，只能教育网ipv6访问。&lt;&#x2F;p&gt;
&lt;p&gt;但学校内部没有适合放硬盘的地方，因此需要一个中间机器进行转发。&lt;&#x2F;p&gt;
&lt;p&gt;这主要涉及到俩个方面：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;校外如何访问校内的设备（vpn）&lt;&#x2F;li&gt;
&lt;li&gt;校内校外的设备如何进行设置，以达到分流的目的&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这篇文章主要记录关于第二个问题，博主的解决办法&lt;&#x2F;p&gt;
&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;p&gt;硬件条件：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;校内一台树莓派（archlinux）    记为A&lt;&#x2F;li&gt;
&lt;li&gt;校外一台linux系统的服务器（archlinux）  记为B&lt;&#x2F;li&gt;
&lt;li&gt;校外一台win10台式机 记为C&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;网络环境：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A
&lt;ul&gt;
&lt;li&gt;能够正常访问北邮人等教育网专用网站&lt;&#x2F;li&gt;
&lt;li&gt;拥有ipv6与ipv4&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;B和C
&lt;ul&gt;
&lt;li&gt;能够通过ip直接访问A（vpn已架设好）&lt;&#x2F;li&gt;
&lt;li&gt;只有ipv4&lt;&#x2F;li&gt;
&lt;li&gt;BC处于同一局域网下&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;A的配置&quot;&gt;A的配置&lt;&#x2F;h2&gt;
&lt;p&gt;全部通过docker进行，架设http代理，命令如下&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;docker run -d --name tinyproxy -p 8888:8888 -e &amp;quot;ALLOWED=0.0.0.0&#x2F;0&amp;quot; ajoergensen&#x2F;tinyproxy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;B的配置&quot;&gt;B的配置&lt;&#x2F;h2&gt;
&lt;p&gt;全部通过docker进行，使用v2raya进行分流代理，命令如下&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;docker run -d \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -p 2017:2017 \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -p 20170-20180:20170-20180 \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  --restart=always \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  --name v2raya \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -v &#x2F;mnt&#x2F;bignas&#x2F;v2raya:&#x2F;etc&#x2F;v2raya \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -e V2RAYA_V2RAY_BIN=&#x2F;etc&#x2F;v2raya&#x2F;xray \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  mzz2017&#x2F;v2raya
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;注意&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;：原本的镜像没提供xray内核，需要先&lt;strong&gt;自行下载xray&lt;&#x2F;strong&gt;然后映射进去，同时给定环境变量，强制使用xray。  &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;v2raya.org&#x2F;docs&#x2F;prologue&#x2F;installation&#x2F;docker&#x2F;&quot;&gt;v2raya说明文档&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;v2raya_web配置&quot;&gt;v2raya web配置&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-10-06-21-18-26.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;进去之后配置，博主的配置如下，仅供参考&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;outbound:hust=http(address: 10.243.113.248, port: 8888)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;default: proxy # 默认走代理
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# pt站点
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;domain(domain: pt.keepfrds.com,domain: m-team.cc)-&amp;gt;direct
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;domain(domain: hudbt.hust.edu.cn, domain: byr.pt)-&amp;gt;hust
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 国内，本地
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;domain(geosite:cn)-&amp;gt;direct
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ip(geoip:private, geoip:cn)-&amp;gt;direct
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 学术
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;domain(geosite:category-scholar-!cn, geosite:category-scholar-cn)-&amp;gt;hust
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的 10.243.113.248是A的vpn地址&lt;&#x2F;p&gt;
&lt;p&gt;这个分流规则非常强大，配置比较复杂，&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;v2rayA&#x2F;v2rayA&#x2F;wiki&#x2F;RoutingA&quot;&gt;教程&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;C的配置&quot;&gt;C的配置&lt;&#x2F;h2&gt;
&lt;p&gt;以火狐浏览器为例&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-10-06-21-26-30.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;192.168.3.105是B的局域网地址&lt;&#x2F;p&gt;
&lt;h1 id=&quot;结尾&quot;&gt;结尾&lt;&#x2F;h1&gt;
&lt;p&gt;设置完成之后，能够正常访问北邮人等网站，兼具fq等功能。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;QA&quot;&gt;QA&lt;&#x2F;h1&gt;
&lt;p&gt;vpn怎么搭建啊？&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;到网络中心去申请，校园网账号就行&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>搭建属于你自己的vpn</title>
        <published>2021-10-06T00:00:00+00:00</published>
        <updated>2021-10-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/2021-10-6-搭建属于你自己的vpn/"/>
        <id>https://bbpp222006.github.io/2021-10-6-搭建属于你自己的vpn/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/2021-10-6-搭建属于你自己的vpn/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;随着互联网的发展，网络环境逐渐变得嘈杂和拥堵，里面充斥着各种不正当竞争和灰色利益链。&lt;&#x2F;p&gt;
&lt;p&gt;因此有必要搭建一个属于自己的网络环境，这个网络环境有几点要求：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;安全性
&lt;ul&gt;
&lt;li&gt;没有主人的批准，外人无法进行访问&lt;&#x2F;li&gt;
&lt;li&gt;网络传输过程中，第三方无法窃取信息&lt;&#x2F;li&gt;
&lt;li&gt;能够伪装成正常的流量，绕过网络中各种老大哥的监视&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;方便性
&lt;ul&gt;
&lt;li&gt;能够通过ip或者域名直接访问到自己的各种服务&lt;&#x2F;li&gt;
&lt;li&gt;私人网络中各个节点之间能够相互进行访问，最好是不经过中转的直连&lt;&#x2F;li&gt;
&lt;li&gt;随时添加新节点&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这篇文章主要记录满足以上几种要求的工具，并写一点自己的思考&lt;&#x2F;p&gt;
&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;zerotier&quot;&gt;zerotier&lt;&#x2F;h2&gt;
&lt;p&gt;这个软件其实在国内的各种论坛已经普及了，能够满足上述大多数的要求，但经过长时间的使用，缺点如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;运营商qos限速
&lt;blockquote&gt;
&lt;p&gt;由于zerotier使用udp进行打洞和传输，因此在拷贝大容量文件时，容易触发运营商的限速&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;打洞效率一般
&lt;blockquote&gt;
&lt;p&gt;ab如果均处于最深的nat类型，打洞的时间可能会持续很久，并且一旦ab的ip发生变化，就需要重新打洞，延迟不稳定&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;优点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;能够自建moon，planet等握手节点，不过需要公网ip&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;tailscale&quot;&gt;tailscale&lt;&#x2F;h2&gt;
&lt;p&gt;这个软件的客户端是开源的，但服务端（中心节点）闭源，有人基于客户端的api写了一个中心节点，叫做headscale&lt;&#x2F;p&gt;
&lt;p&gt;headscale类似于zerotier的自建moon，planet，博主还没搭建过，不清楚和原版的有什么差别&lt;&#x2F;p&gt;
&lt;p&gt;tailscale基于wireguard，因此理论上速度非常快，而且打洞的成功率也非常高（网上说的）&lt;&#x2F;p&gt;
&lt;p&gt;若不使用headscale，用官方网站进行部署非常简单，不过这就需要你信任第三方了（目前支持谷歌、微软、github）&lt;&#x2F;p&gt;
&lt;p&gt;这是hackernews上的讨论：&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=28572013&quot;&gt;Headscale: Open-source implementation of the Tailscale control server&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;目前这个软件比较新，国内也没什么讨论（布道者）。也许等大伙儿都知道了老大哥们就会开始封锁中心节点吧……&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nebula&quot;&gt;nebula&lt;&#x2F;h2&gt;
&lt;p&gt;借鉴tinc，用golang实现的vpn软件&lt;&#x2F;p&gt;
&lt;p&gt;这篇文章讨论了nebula和tailscale的优缺点 &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tailscale.com&#x2F;kb&#x2F;1148&#x2F;tailscale-vs-nebula&#x2F;&quot;&gt;点我直达&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;结论如下：（工地英语，将就着看）&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你是想搞事情的运维或者极客，想要一个免费、开源、p2p、全连接，并且自己能进行中心控制的vpn软件，就用nebula吧！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你想要一个优雅、简单、第三方网站托管的vpn软件，试试Tailscale&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;nebula还没试过，不清楚打洞效率如何。&lt;&#x2F;p&gt;
&lt;p&gt;缺点就是：你必须要有一个有公网ip的服务器，作为中心控制节点&lt;&#x2F;p&gt;
&lt;h2 id=&quot;其它软件&quot;&gt;其它软件&lt;&#x2F;h2&gt;
&lt;p&gt;这个github项目里，老哥收集了很多类似的软件：https:&#x2F;&#x2F;github.com&#x2F;cedrickchee&#x2F;awesome-wireguard&lt;&#x2F;p&gt;
&lt;p&gt;不知道以后会不会更新，反正现在看来还挺新&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>pt盒子配置记录</title>
        <published>2021-09-27T00:00:00+00:00</published>
        <updated>2021-09-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/pt盒子配置记录/"/>
        <id>https://bbpp222006.github.io/pt盒子配置记录/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/pt盒子配置记录/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;之前发现墙上网口的带宽是千兆对等，心想岂不是可以用来刷pt？&lt;&#x2F;p&gt;
&lt;p&gt;于是开始研究pt圈子内部用的“盒子”配置&lt;&#x2F;p&gt;
&lt;p&gt;所谓“盒子&#x2F;seedbox”，通常是指租的云服务器，具有以下特点&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;大带宽，通常是上g&lt;&#x2F;li&gt;
&lt;li&gt;有公网ip，并且大部分早被各大pt站标记为“盒子”&lt;&#x2F;li&gt;
&lt;li&gt;用于下载各种pt资源，特别是刚出的热种，刷上传量&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;通常的pt站点内，账号的上传量是最重要的，不仅可以用来提高分享率，还能够提高账户的等级，等级高到一定程度就不会因长时间不登录而删号，达到俗称的“毕业”&lt;&#x2F;p&gt;
&lt;p&gt;博主手头上有个4t的洋垃圾机械硬盘，还有一个之前做项目留下的树莓派4b（2g），便咸鱼了一个垃圾硬盘盒和几根千兆线，打算自建一个低配版的“盒子”&lt;&#x2F;p&gt;
&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;树莓派4b的系统初始化和硬盘的挂载&quot;&gt;树莓派4b的系统初始化和硬盘的挂载&lt;&#x2F;h2&gt;
&lt;p&gt;这部分详见以前的文章&lt;&#x2F;p&gt;
&lt;h2 id=&quot;docker容器配置&quot;&gt;docker容器配置&lt;&#x2F;h2&gt;
&lt;p&gt;本次盒子的配置采用deluge+flexget结合各种插件完成全自动刷上传的功能&lt;&#x2F;p&gt;
&lt;p&gt;以下所有操作，大硬盘均挂载于&#x2F;mnt&#x2F;disco_data下，仅供参考&lt;&#x2F;p&gt;
&lt;h3 id=&quot;deluge&quot;&gt;deluge&lt;&#x2F;h3&gt;
&lt;p&gt;先上docker配置：&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; docker run -d  \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  --name=deluge  \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -e PUID=1000   \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -e PGID=1000   \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -e TZ=Asia&#x2F;Shanghai   \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -e DELUGE_LOGLEVEL=error `#optional`    \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  --net=host   \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -v  &#x2F;mnt&#x2F;disco_data&#x2F;pt_config:&#x2F;config   \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -v &#x2F;mnt&#x2F;disco_data&#x2F;pt_download:&#x2F;downloads   \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  --restart unless-stopped   \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  ghcr.io&#x2F;linuxserver&#x2F;deluge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;进去后默认密码是&lt;code&gt;deluge&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;修改默认下载目录：&lt;img src=&quot;..&#x2F;images&#x2F;2021-09-27-13-37-57.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;打开deamon连接端口，接下来flexget会用这个进行交互&lt;img src=&quot;..&#x2F;images&#x2F;2021-09-27-13-38-43.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;接着再在&#x2F;mnt&#x2F;disco_data&#x2F;pt_config中新建plugins文件夹，把插件放进去
&lt;img src=&quot;..&#x2F;images&#x2F;2021-09-27-13-40-41.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;插件项目地址：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ratanakvlun&#x2F;deluge-ltconfig&quot;&gt;ltconfig&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;omaralvarez&#x2F;deluge-autoremoveplus&#x2F;files&#x2F;3312651&#x2F;AutoRemovePlus-0.6.2-py3.7.zip&quot;&gt;autoremove&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;autoremove这个插件好久没更新了，有老哥做了新版适配，并且给出了docker中的使用方法，这里是原讨论&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;omaralvarez&#x2F;deluge-autoremoveplus&#x2F;issues&#x2F;50#issuecomment-526851615&quot;&gt;链接&lt;&#x2F;a&gt;，所以下下来之后记得按照这个法子重命名一下&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;放好插件之后重启一下deluge容器，再进去应该就能看到插件了
&lt;img src=&quot;..&#x2F;images&#x2F;2021-09-27-13-47-30.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ltconfig配置&quot;&gt;ltconfig配置&lt;&#x2F;h4&gt;
&lt;p&gt;ltconfig插件是用来优化上传速度的，如果是正常的大内存机器，可以直接使用（high performance seed）模式，由于博主只有个丐版树莓派，所以需要调教一下&lt;&#x2F;p&gt;
&lt;p&gt;个人感觉最重要的就两项：cache_expiry和cache_size&lt;&#x2F;p&gt;
&lt;p&gt;我的设置如下：&lt;img src=&quot;..&#x2F;images&#x2F;2021-09-27-13-55-17.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果设置太大了，比如&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.acesheep.com&#x2F;index.php&#x2F;archives&#x2F;622&#x2F;&quot;&gt;这个博客&lt;&#x2F;a&gt;,容易爆内存，导致deluge容器被杀掉，虽然docker会帮你自动重启，但这样又得重新开始链接，比较慢。&lt;&#x2F;p&gt;
&lt;p&gt;此时内核报错如下：&lt;code&gt;dmesg&lt;&#x2F;code&gt;
&lt;img src=&quot;..&#x2F;images&#x2F;2021-09-27-13-58-09.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我还找到了一份专门给树莓派4b用的配置文件&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seedboxer&#x2F;itconfigPI&quot;&gt;链接&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这份比较稳，适合当稳定的流媒体服务器使用，而我则是用来刷pt的，当然就应该在进程崩溃边缘反复横跳啦！&lt;&#x2F;p&gt;
&lt;h4 id=&quot;autoremove配置&quot;&gt;autoremove配置&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;omaralvarez&#x2F;deluge-autoremoveplus&quot;&gt;官方配置说明&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我的配置：
&lt;img src=&quot;..&#x2F;images&#x2F;2021-09-27-14-04-13.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;解释：下完后，做种3天（防止hr，opencd，说的就是你！）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;flexget&quot;&gt;flexget&lt;&#x2F;h3&gt;
&lt;p&gt;docker配置：&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;docker run -d     \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; --name=flexget     \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; -p 5050:5050     \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; -v &#x2F;mnt&#x2F;disco_data&#x2F;flexget_data:&#x2F;data     \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; -v &#x2F;mnt&#x2F;disco_data&#x2F;flexget_config:&#x2F;config     \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; -e FG_WEBUI_PASSWD=AdminimdA?     \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; -e FG_LOG_LEVEL=info     \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; -e FG_LOG_FILE=flexget.log     \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; -e PUID=1000     \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; -e PGID=1000     \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; -e TZ=Asia&#x2F;Shanghai     \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; wiserain&#x2F;flexget
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;FG_WEBUI_PASSWD这个设置你自己的密码，注意flexget默认需要很高强度的密码，如果启动失败，建议看一下启动的log，说不定就是说你的密码太弱了，不让启动……&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;启动完成之后，进入5050端口的网页，输入密码
&lt;img src=&quot;..&#x2F;images&#x2F;2021-09-27-14-17-00.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;成功之后，开始配置flexget的插件&lt;&#x2F;p&gt;
&lt;p&gt;同样在&#x2F;mnt&#x2F;disco_data&#x2F;flexget_config中新建plugins文件夹，把插件放进去&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-09-27-14-18-48.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;插件地址：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Juszoe&#x2F;flexget-nexusphp&quot;&gt;flexget-nexusphp&lt;&#x2F;a&gt; 用于高级过滤（免费，2x这种）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Juszoe&#x2F;flexget-limiter&quot;&gt;flexget-limiter&lt;&#x2F;a&gt; 用于限制种子下载，在硬盘或者带宽顶不住的时候，停止rss订阅&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;flexget整体配置&quot;&gt;flexget整体配置&lt;&#x2F;h4&gt;
&lt;p&gt;因为插件加载后，全都在config中进行配置，这里我把自己的配置放出来，供读者借鉴，同时做个备份&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;web_server:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  bind: 0.0.0.0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  port: 5050
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  web_ui: yes
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;templates:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   de:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    limit_new: 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    limiter:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      wait: 10
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      disk:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        write: 10240  # disk write speed KB&#x2F;s
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    content_size:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        min: 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        max: 40960  #种子最大体积是40g
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        strict: no
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    deluge:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        host: 192.168.123.60 #填deluge的地址
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        port: 58846
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        username: localclient
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        password: e3006f0f722e52949c1975c9b8a04c2874aa2a16   #这个看下面的解释
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        path: &#x2F;downloads
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;tasks:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  hdsky-task:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    rss:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      url: https:&#x2F;&#x2F;hdsky.me&#x2F;torrentrss.php?rows=10&amp;amp;linktype=dl&amp;amp;passkey=xxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      other_fields:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        - link
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    nexusphp:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      cookie: &amp;#39;c_secure_uid=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      discount:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        - free
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        - 2xfree
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      seeders:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        min: 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        max: 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      leechers:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        min: 5
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        max_complete: 0.2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      user-agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko&#x2F;20100101 Firefox&#x2F;92.0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    template: de
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  ptertask:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    rss:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      url: https:&#x2F;&#x2F;pterclub.com&#x2F;torrentrss.php?rows=10&amp;amp;linktype=dl&amp;amp;passkey=xxxxxxxxxxxxxxxxxxxxxxxx
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      other_fields:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        - link
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    nexusphp:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      cookie: &amp;#39;c_secure_uid=xxxxxxxxxxxxxxxxxxxxx&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      discount:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        - free
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        - 2xfree
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      seeders:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        min: 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        max: 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      leechers:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        min: 5
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        max_complete: 0.1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      user-agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko&#x2F;20100101 Firefox&#x2F;92.0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    template: de
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;schedules:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  - tasks: hdsky-task
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    interval:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      minutes: 10
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  - tasks: ptertask
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    interval:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      minutes: 10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;deluge那里的密码在&lt;code&gt;&amp;quot;&#x2F;mnt&#x2F;disco_data&#x2F;pt_config&#x2F;auth&amp;quot;&lt;&#x2F;code&gt;这个文件里面&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[root@alarmpi ~]# cat &amp;quot;&#x2F;mnt&#x2F;disco_data&#x2F;pt_config&#x2F;auth&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;localclient:e3006f0f722e52949c1975c9b8a04c2874aa2a16:10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么密码就是e3006f0f722e52949c1975c9b8a04c2874aa2a16&lt;&#x2F;p&gt;
&lt;p&gt;limiter配置选择硬盘写入作为判断，因为flexget和deluge处于不同的容器，网口不一样，flexget中读不到deluge的真实下载速度。我在flexget容器中写了个脚本，观测网络速度和硬盘写入速度，结果如下（单位都是M&#x2F;s）：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2021-09-27-15-10-46.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;明显有数量级的差距，只能用硬盘写入来判断了。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;QA&quot;&gt;QA&lt;&#x2F;h1&gt;
&lt;p&gt;deluge可能有时web页面登录不上去了，总显示密码错误。这时候试一下密码为空，说不定就能进了。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;触发原因：更新deluge配置时，火狐浏览器自动把空密码填到修改密码那一栏去了……然后就把密码改成了空&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;结尾&quot;&gt;结尾&lt;&#x2F;h1&gt;
&lt;p&gt;之前用过qbit、tr，结合好多其他的方式配置盒子，甚至自己写过爬虫，尝试过滤出免费种。&lt;&#x2F;p&gt;
&lt;p&gt;后来网上冲浪时发现早有大手子写过了，果然还是不要造轮子的好。&lt;&#x2F;p&gt;
&lt;p&gt;flexget很早之前就听过，但一直嫌麻烦，最近闲下来了摸一摸，没想到一天就摸出来个大概，比想象中的简单多了，真香&lt;&#x2F;p&gt;
&lt;p&gt;所以不要小看脚本小子啊！有脚本小子当然也有脚本老子，只要能达成目标，就是大手子！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>linux下大容量硬盘配置</title>
        <published>2021-09-23T00:00:00+00:00</published>
        <updated>2021-09-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/linux下大容量硬盘配置/"/>
        <id>https://bbpp222006.github.io/linux下大容量硬盘配置/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/linux下大容量硬盘配置/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;之前在咸鱼上买了一块亡命之徒盘（出生未知，品牌未知，经历未知），一直放在办公桌上当硬盘盒子。&lt;&#x2F;p&gt;
&lt;p&gt;但在折腾的过程中总是会掉盘或者读取错误。经过多次分析后得到的结论：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;树莓派供电不足&lt;&#x2F;li&gt;
&lt;li&gt;垃圾硬盘盒子&lt;&#x2F;li&gt;
&lt;li&gt;垃圾硬盘&lt;&#x2F;li&gt;
&lt;li&gt;arm架构软件支持不完善&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;不确定的因素太多，索性不管了，掉盘再格式化就完事，反正也没什么值钱的东西在里面&lt;&#x2F;p&gt;
&lt;p&gt;这里记录一下linux下大容量硬盘配置，包括格式化的注意事项，健康监控，debug等等&lt;&#x2F;p&gt;
&lt;p&gt;若不说明，一下所有操作环境均为archlinux arm版本， 新硬盘位于&#x2F;dev&#x2F;sda&lt;&#x2F;p&gt;
&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;格式化并挂载硬盘&quot;&gt;格式化并挂载硬盘&lt;&#x2F;h2&gt;
&lt;p&gt;对于3t以上的硬盘，不能用fdisk进行分区了，得用parted(不清楚有没有更好用的)&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;pacman -S parted&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;进入parted交互命令行之后：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mklabel gpt &lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;parted只能是gpt格式&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code&gt;mkpart primary 2048s 100%&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如果用&lt;code&gt;mkpart primary 0 100%&lt;&#x2F;code&gt; 这句话会跳警告，具体详见&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rainbow.chard.org&#x2F;2013&#x2F;01&#x2F;30&#x2F;how-to-align-partitions-for-best-performance-using-parted&#x2F;&quot;&gt;这条链接&lt;&#x2F;a&gt;，2048s这个数字得算，我瞎写的，此条用来对齐分区&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;code&gt;q&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;退出parted&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;首先用&lt;code&gt;lsblk&lt;&#x2F;code&gt;或者&lt;code&gt;fdisk -l&lt;&#x2F;code&gt;查看分区情况，一切正常的话，应该有个&#x2F;dev&#x2F;sda1，这个就是分区的结果&lt;&#x2F;p&gt;
&lt;p&gt;接下来用mkfs进行格式化&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;mkfs.ext4 -T largefile -E lazy_itable_init=0,lazy_journal_init=0 &#x2F;dev&#x2F;sda1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;完整参数解释：&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;78225427&quot;&gt;转自知乎&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最后挂载就行&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;mount &#x2F;dev&#x2F;sda1 &#x2F;mnt&#x2F;disco_data&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;碎碎念&quot;&gt;碎碎念&lt;&#x2F;h2&gt;
&lt;p&gt;linux中mkfs格式化默认用的lazyinit特性超坑，不关闭的话格式化完成后后台还在一直写，导致磁盘性能贼拉。&lt;&#x2F;p&gt;
&lt;p&gt;格式化完成之后用&lt;code&gt;sync&lt;&#x2F;code&gt;清理一下后台磁盘进程&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>archlinux配置记录</title>
        <published>2021-04-16T00:00:00+00:00</published>
        <updated>2021-04-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/archlinux配置/"/>
        <id>https://bbpp222006.github.io/archlinux配置/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/archlinux配置/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;其实老早就听说过这个linux版本了，也装过几次（不过最后都崩了）。&lt;&#x2F;p&gt;
&lt;p&gt;今天因为要在树莓派上使用bcache，而raspbian系统里面是没有这个内核的……索性采用archlinux试试 (bcache太久没人维护了，所以换成lvm cache了，感觉还行)&lt;&#x2F;p&gt;
&lt;p&gt;所以这篇文章的操作对象是树莓派4b，其他版本可以借鉴。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;系统安装&quot;&gt;系统安装&lt;&#x2F;h2&gt;
&lt;p&gt;国内有系统镜像：http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;在里面可以找到4b对应的系统版本 http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinuxarm&#x2F;os&#x2F;ArchLinuxARM-rpi-4-latest.tar.gz&lt;&#x2F;p&gt;
&lt;p&gt;系统刷写方法需要全程在linux中进行（可能win上有可以用的软件？）&lt;&#x2F;p&gt;
&lt;p&gt;所以找了隔壁组的老哥借了一个8g的sd卡，刷成raspbian系统，然后再在raspbian中挂载读卡器，把原来那张sd卡刷成arch……&lt;&#x2F;p&gt;
&lt;p&gt;这是官方安装教程：https:&#x2F;&#x2F;archlinuxarm.org&#x2F;platforms&#x2F;armv8&#x2F;broadcom&#x2F;raspberry-pi-4&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：此安装过程最好全程使用root用户，并且工作目录也在root根目录下
ps：关于换源的问题，在校园网的环境下，个人觉得挺快的，所以没有换，各位老哥可以看情况对软件源进行更改&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，arch装完后ssh进入，接下来的操作最好是在root用户下，不然可能又出什么弔问题……&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;系统初始化&quot;&gt;系统初始化&lt;&#x2F;h2&gt;
&lt;p&gt;换源：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;vi &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#清华
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Server = http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxarm&#x2F;$arch&#x2F;$repo
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 中科大
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Server = http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinuxarm&#x2F;$arch&#x2F;$repo
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#成都电子科大
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Server = http:&#x2F;&#x2F;mirrors.stuhome.net&#x2F;archlinuxarm&#x2F;$arch&#x2F;$repo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;pacman -Syyu  #刷新&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;安装AUR构建工具：&lt;code&gt;pacman -S --needed base-devel&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;安装git：&lt;code&gt;pacman -S git&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;docker安装&quot;&gt;docker安装&lt;&#x2F;h2&gt;
&lt;p&gt;学了docker之后，啥系统都想装docker爽爽，arch当然也不例外&lt;&#x2F;p&gt;
&lt;p&gt;docker在arch的官方包管理器pacman中有，所以安装挺方便的&lt;&#x2F;p&gt;
&lt;p&gt;root用户执行：&lt;code&gt;pacman -S docker&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;装完后换docker镜像源：&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;pacman -S vim  #安装vim
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;mkdir &#x2F;etc&#x2F;docker
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;xxxxxxx&amp;quot;]   #这里的xxxx是docker镜像，根据需要换成对应的链接
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;} 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl restart docker
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl enable docker #设置开机自启
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;reboot #重启
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;docker安装好之后，现在只能在root时使用，如果要在普通用户也能使用的话，方式如下：&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;pacman -S sudo #root执行
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;visudo #把 %wheel ALL=(ALL) ALL 这行前面的注释去掉
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;su alarm # 切换回普通用户
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo gpasswd -a ${USER} docker #添加用户
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo systemctl restart docker  #docker 重启
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>golang配置记录</title>
        <published>2021-04-11T00:00:00+00:00</published>
        <updated>2021-04-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/golang配置/"/>
        <id>https://bbpp222006.github.io/golang配置/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/golang配置/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;现在主要开发工作都迁移到了docker中，这样比较方便，环境干净而且不会相互影响。&lt;&#x2F;p&gt;
&lt;p&gt;什么时候写一篇博客记录一下环境搭配。&lt;&#x2F;p&gt;
&lt;p&gt;ps：以下操作系统均为ubuntu&lt;&#x2F;p&gt;
&lt;h2 id=&quot;golang本体安装&quot;&gt;golang本体安装&lt;&#x2F;h2&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;wget https:&#x2F;&#x2F;dl.google.com&#x2F;go&#x2F;go1.16.3.linux-amd64.tar.gz  #这里是1.16的，建议查一下最新版本
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;tar -C &#x2F;usr&#x2F;local -xzf .&#x2F;go1.16.3.linux-amd64.tar.gz
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果下不下来，就去中科大的镜像找，然后wget下来 &lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;golang&#x2F;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;golang_环境配置&quot;&gt;golang 环境配置&lt;&#x2F;h2&gt;
&lt;p&gt;要将 &#x2F;usr&#x2F;local&#x2F;go&#x2F;bin 添加到 PATH 环境变量， 你需要将此行添加到你的 &#x2F;etc&#x2F;profile（全系统安装）或 $HOME&#x2F;.profile 文件中：&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;export PATH=$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ps:如果是zsh的话，可能重启后又没作用了，可以把上面那条path的命令写入 ~&#x2F;.zshrc 中&lt;&#x2F;p&gt;
&lt;p&gt;接下来设置goproxy，国内代理&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;go env -w GOPROXY=https:&#x2F;&#x2F;goproxy.cn,direct
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;设置完之后运行 &lt;code&gt;go env&lt;&#x2F;code&gt; 看看设置成功没有&lt;&#x2F;p&gt;
&lt;h2 id=&quot;开始第一个golang_项目&quot;&gt;开始第一个golang 项目&lt;&#x2F;h2&gt;
&lt;p&gt;1.16更新之后golang的包管理又双变了，这里稍微写一下此版本下的包管理&lt;&#x2F;p&gt;
&lt;p&gt;找个空目录，新建main.go：&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;package main
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;import (
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    &amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    &amp;quot;github.com&#x2F;imroc&#x2F;req&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;func main() {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    e,_:=req.Get(&amp;quot;http:&#x2F;&#x2F;www.baidu.com&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    fmt.Println(e.String())
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;运行：&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;go mod init main #生成gomod
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;go build .&#x2F;main.go # 这下会报错，看一下提示信息，1.16更新之后，gomod不会自动帮你下载了。。。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;go get .&#x2F;... #下载依赖项 本例中就是github.com&#x2F;imroc&#x2F;req
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;go build .&#x2F;main.go #这下build成功
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;.&#x2F;main #看下运行效果  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>超算中心配置笔记</title>
        <published>2021-04-08T00:00:00+00:00</published>
        <updated>2021-04-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/超算中心配置笔记/"/>
        <id>https://bbpp222006.github.io/超算中心配置笔记/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/超算中心配置笔记/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;学院新建了一个超算中心，因为配置还不是很完善，所以这里记录一下初始化配置&lt;&#x2F;p&gt;
&lt;h1 id=&quot;容器&quot;&gt;容器&lt;&#x2F;h1&gt;
&lt;p&gt;这里的配置主要是针对自己申请的容器，有root权限的那种&lt;&#x2F;p&gt;
&lt;h2 id=&quot;超算配置&quot;&gt;超算配置&lt;&#x2F;h2&gt;
&lt;p&gt;增加ssh端口，将22端口映射到外部，以便后面链接&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ssh_配置&quot;&gt;ssh 配置&lt;&#x2F;h2&gt;
&lt;p&gt;这里以centos7为例&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;su      #登入root
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;passwd  #设置root的密码
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;yum install openssh-server #安装ssh服务端
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config  #进入vim编辑ssh配置,打开root登陆，开启密码登陆
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo service sshd start #重启服务
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;升级glibc2.18&quot;&gt;升级glibc2.18&lt;&#x2F;h2&gt;
&lt;p&gt;因为centos7只有2.17，很多软件运行不了&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;wget http:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;glibc&#x2F;glibc-2.18.tar.gz  #下载不动用清华源：https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;gnu&#x2F;glibc&#x2F;glibc-2.18.tar.gz
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;tar -xvf glibc-2.18.tar.gz 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cd glibc-2.18
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;mkdir build &amp;amp;&amp;amp; cd build &amp;amp;&amp;amp; ..&#x2F;configure --prefix=&#x2F;usr &amp;amp;&amp;amp; make -j4 &amp;amp;&amp;amp; make install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;安装显卡驱动&quot;&gt;安装显卡驱动&lt;&#x2F;h2&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;rpm --import https:&#x2F;&#x2F;www.elrepo.org&#x2F;RPM-GPG-KEY-elrepo.org
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;rpm -Uvh http:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.0-3.el7.elrepo.noarch.rpm
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;yum -y install kmod-nvidia
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;reboot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;集群&quot;&gt;集群&lt;&#x2F;h1&gt;
&lt;p&gt;这里是slrum集群的命令&lt;&#x2F;p&gt;
&lt;p&gt;更多命令可以参考北大的教程： http:&#x2F;&#x2F;hpc.pku.edu.cn&#x2F;_book&#x2F;index.html&lt;&#x2F;p&gt;
&lt;h2 id=&quot;普通命令&quot;&gt;普通命令&lt;&#x2F;h2&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sinfo #查看节点状态
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;squeue #查看队列
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;salloc -p gpu -N1 --gres=gpu:4 #选择gpu的一个节点，4块显卡
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ssh gpu3 #上条命令结束后会告诉你申请到了哪个节点，例如gpu3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;sbatch_任务编写&quot;&gt;sbatch 任务编写&lt;&#x2F;h2&gt;
&lt;p&gt;提交任务命令  &lt;code&gt;sbatch -s work.sh &lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;work.sh文件内容：&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#SBATCH -o jupyter_out%j.txt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#SBATCH --partition=gpu
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#SBATCH -J bash
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#SBATCH --nodes=1                
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#SBATCH --ntasks-per-node=6
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#SBATCH --gres=gpu:4             
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#SBATCH --time=24:00:00
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;nvidia-smi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>科学数据处理笔记</title>
        <published>2020-04-13T00:00:00+00:00</published>
        <updated>2020-04-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/2020-4-13-matplotlib图像处理笔记/"/>
        <id>https://bbpp222006.github.io/2020-4-13-matplotlib图像处理笔记/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/2020-4-13-matplotlib图像处理笔记/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;数据处理这块有时需要直观的查看, 便于分析代码的正确性与数据的结构.
之前写了很多关于matplotlib的代码, 可惜一直没有进行笔记的整理. 今天心血来潮, 记录一下以前踩过的坑与脚本备份&lt;&#x2F;p&gt;
&lt;h2 id=&quot;矩阵进行图像显示(包括了矩阵翻转,_热力图显示)&quot;&gt;矩阵进行图像显示(包括了矩阵翻转, 热力图显示)&lt;&#x2F;h2&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;import numpy as np
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;import matplotlib.pylab as plt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;a = np.random.randint(0,2,(10,10))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;b = np.flip(a,0)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;fig, ax = plt.subplots(2,1)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ax0 = ax[0].imshow(a,cmap = &amp;#39;binary&amp;#39;)  #binary是1黑0白,  gray是相反的
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ax1 = ax[1].imshow(b,cmap = &amp;#39;binary&amp;#39;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;fig.colorbar(ax0,ax = [ax[0],ax[1]])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;plt.show()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;矩阵进行升采样(扩展)&quot;&gt;矩阵进行升采样(扩展)&lt;&#x2F;h2&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;def change_pix(matrix,dpi = (100,100)):
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    new_im = Image.fromarray(matrix)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    new_im = new_im.resize(size=dpi, resample=Image.BOX)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    matrix_changed = np.asarray(new_im)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    return matrix_changed
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;矩阵数据统计直方图&quot;&gt;矩阵数据统计直方图&lt;&#x2F;h1&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;a = np.random.randn(10000)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;plt.hist(a, bins=500, edgecolor=&amp;#39;None&amp;#39;, facecolor=&amp;#39;black&amp;#39;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;plt.show()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;结语&quot;&gt;结语&lt;&#x2F;h1&gt;
&lt;p&gt;以后会在这里更新.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Suphx：通过深度强化学习称霸麻将 论文翻译</title>
        <published>2020-04-07T00:00:00+00:00</published>
        <updated>2020-04-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/2020-4-7-论文翻译《Suphx：通过深度强化学习称霸麻将》/"/>
        <id>https://bbpp222006.github.io/2020-4-7-论文翻译《Suphx：通过深度强化学习称霸麻将》/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/2020-4-7-论文翻译《Suphx：通过深度强化学习称霸麻将》/">&lt;h1 id=&quot;通过深度强化学习称霸麻将&quot;&gt;通过深度强化学习称霸麻将&lt;&#x2F;h1&gt;
&lt;p&gt;Junjie Li,Sotetsu Koyamada,Qiwei Ye,Guoqing Liu,Chao Wang,Ruihan Yang,Li Zhao,Tao Qin,Tie-Yan Liu,Hsiao-Wuen Hon&lt;&#x2F;p&gt;
&lt;p&gt;Microsoft Research Asia(微软亚洲研究院)&lt;&#x2F;p&gt;
&lt;p&gt;Kyoto University(东京大学)&lt;&#x2F;p&gt;
&lt;p&gt;University of Science and Technology of China(中科院大学)&lt;&#x2F;p&gt;
&lt;p&gt;Tsinghua University(清华大学)&lt;&#x2F;p&gt;
&lt;p&gt;Nankai University (南开大学)&lt;&#x2F;p&gt;
&lt;p&gt;(害怕)
原文地址:https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2003.13590.pdf&lt;&#x2F;p&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;&#x2F;h2&gt;
&lt;p&gt;人工智能（AI）在许多领域都取得了巨大的成功，并且自AI诞生以来，游戏AI就被广泛视为其滩头阵地(beachhead 应该就是很重要的意思)。最近几年，关于游戏AI的研究已从相对简单的环境（例如，诸如围棋，国际象棋，将棋等完美信息的游戏，或诸如德州扑克的两人游戏等不完全信息的游戏）发展成更为复杂的环境（例如，多人不完美信息游戏（例如多人德州扑克和StartCraft II）。 麻将是一种在全球范围内流行的多玩家不完美信息游戏，但由于其复杂的玩法&#x2F;得分规则和丰富的对局信息，对AI研究具有很大的挑战性。我们基于深度强化学习和一些新引入的技术（包括全局奖励预测，上帝视角(oracle)的指导和运行时策略自适应）为麻将设计了一个名为Suphx的AI。 Suphx在稳定排名方面已表现出比大多数顶级人类玩家更强的表现，并且在Tenhou(天凤)平台中，在评级中超过了99.99％的官方排名人类玩家。这是计算机程序首次超过麻将中大多数顶尖人类玩家的表现。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1.引言&quot;&gt;1.引言&lt;&#x2F;h2&gt;
&lt;p&gt;为游戏构建超越人类的程序是人工智能（AI）的长期目标。在过去的二十年中，游戏AI取得了长足的进步。最近的研究逐渐从相对简单的完美信息或两人游戏（例如将棋，国际象棋，围棋和抬头的德州扑克）发展为更加复杂的不完美信息的多人游戏（例如桥牌 ，Dota，StarCraft II和多人游戏 德州扑克）。&lt;&#x2F;p&gt;
&lt;p&gt;麻将游戏是一款具有不完美信息和多个玩家的多轮麻将游戏，在全球数亿玩家中非常受欢迎。在麻将游戏的每一轮中，四名玩家相互竞争，以最先凑齐特定的手牌来取得胜利。建立强大的麻将程序对当前有关游戏AI的研究提出了巨大挑战。&lt;&#x2F;p&gt;
&lt;p&gt;首先，麻将计分规则复杂。每个麻将游戏包含多个回合，并且游戏的最终排名（以及相应的奖励）由这些回合的累积回合得分确定。一轮比赛的失败并不总是意味着玩家在该轮比赛中表现不佳（例如，如果他&#x2F;她在前几轮中有很大优势，则该球员可能会战术上失去第一轮比赛以确保游戏排名第一），因此我们不能直接使用回合得分作为学习的反馈信号。此外，麻将有很多可能的获胜手牌。这些获胜手牌可能彼此之间非常不同，并且不同的手牌会导致该回合的不同获胜得分。这种计分规则比以前研究过的游戏（包括国际象棋，围棋等）要复杂得多。专业玩家需要仔细选择要形成哪种类型的获胜手牌，以权衡该回合的获胜概率和获胜分数。&lt;&#x2F;p&gt;
&lt;p&gt;其次，在麻将中，每个玩家手中最多拥有13个其他玩家看不到的私人手牌，并且在最后的牌山里有14张牌（在整个游戏中所有玩家都看不到），而在场上的则有70张牌，一旦被玩家抽出并丢弃，便会变得可见。结果，平均而言，对于每个信息集（玩家的决定点），有1048多个隐藏状态无法与他&#x2F;她区分开。如此大量的隐藏信息使麻将游戏成为比以前研究的德州扑克游戏更困难的不完全信息游戏。麻将玩家很难仅根据自己的私人牌来确定哪个动作是好的，因为动作的优劣很大程度上取决于其他玩家的私人牌和每个人都看不到的牌山。因此，AI很难将其后的奖励信号联系到观察到的信息.&lt;&#x2F;p&gt;
&lt;p&gt;第三，麻将的游戏规则很复杂：（1）有多种类型的动作，包括立直，吃，碰，杠，弃牌，（2）进行鸣牌（碰或杠）,胡牌（宣告胜出）,或者抢杠时，常规的打法顺序会被打断。由于每个玩家最多可以拥有13张私有手牌，因此很难预测这些打断，因此我们甚至无法构建常规的游戏树；即使我们构建了游戏树，这样的树在玩家的连续动作之间也会有大量的路径。这阻止了将先前成功的技术直接应用于游戏，例如蒙特卡洛树搜索和crf(counterfactual regretminimization).&lt;&#x2F;p&gt;
&lt;p&gt;由于上述挑战，尽管进行了几次尝试，但是最好的麻将AI仍然远远落后于顶尖的人类玩家。&lt;&#x2F;p&gt;
&lt;p&gt;在这项工作中，我们构建了Suphx（Super Phoenix的缩写），这是一种用于4人麻将（日麻）的AI系统，该麻将规则拥有世界上最大的麻将社区之一。Suphx采用深度卷积神经网络作为其模型。首先通过从人类职业玩家的对局中进行监督学习来对网络进行训练，然后以网络为策略，通过自学强化学习（RL）来增强网络。我们将流行的策略梯度算法用于自演RL，并介绍了多种技术来应对上述挑战。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;全局奖励预测可以训练预测者根据当前和先前回合的信息来预测游戏的最终奖励（在未来几个回合之后）。该预测器提供有效的学习信号，以便可以执行策略网络的训练。此外，我们还设计了超前预测功能，对不同获胜手及其一轮获胜分数的丰富可能性进行编码，以支持我们强化学习的决策。&lt;&#x2F;li&gt;
&lt;li&gt;上帝指导引入了一个拥有上帝视角的代理，该代理可以查看所有的信息，包括其他玩家的私有手牌和牌山。由于（不公平的）完美信息访问，该上帝代理是超级强大的麻将AI。在我们的RL训练过程中，我们逐渐从上帝代理中删除完美信息，最后将其转换为仅将可观察信息作为输入的普通代理。在上帝代理的帮助下，我们的常规代理比标准RL训练（仅利用可观察的信息）的改进要快得多。&lt;&#x2F;li&gt;
&lt;li&gt;由于麻将的复杂游戏规则导致游戏树不规则，并阻止了蒙特卡洛树搜索技术的应用，因此引入了参数蒙特卡洛策略自适应（pMCPA），以提高代理的运行时性能。当游戏进行并且可以观察到更多信息（例如，四个玩家丢弃的牌河）时，pMCPA会逐步将离线训练的策略修改为适应当前阶段中的特定回合。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;我们在最受欢迎和最具竞争力的麻将平台天凤上对Suphx进行了评估，该平台拥有超过350,000的活跃用户。 Suphx达到了10丹，其稳定的排名（描述了玩家的长期平均表现）超过了大多数顶级人类玩家。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2.Suphx概述&quot;&gt;2.Suphx概述&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-22-52-05.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 表1：Suphx中的五个模型&lt;&#x2F;center&gt;
&lt;h3 id=&quot;2.1_决策流程&quot;&gt;2.1 决策流程&lt;&#x2F;h3&gt;
&lt;p&gt;由于麻将的复杂游戏规则，Suphx学习了五个模型来处理不同的情况：弃牌模型，立直模型，吃模型，碰模型和杠模型，如表1所示。&lt;&#x2F;p&gt;
&lt;p&gt;除了这五个学习的模型外，Suphx还采用了另一个基于规则的胡牌模型，来决定是否宣布胡牌并赢得本轮比赛。此模型简单的检查获胜的牌是否可以由其他玩家丢弃的牌或从牌山上抽出来形成，然后根据以下简单规则进行决策：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;if 这不是比赛的最后一轮，则胡牌并赢得一轮；&lt;&#x2F;li&gt;
&lt;li&gt;if 这是比赛的最后一轮，
&lt;ul&gt;
&lt;li&gt;if 在胡牌获胜后，整个游戏的累积回合分数是四名玩家中最低的，则不进行胡牌；&lt;&#x2F;li&gt;
&lt;li&gt;else 胡牌并赢得这个回合。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;麻将玩家需要采取两种行动，我们的AI Suphx也需要采取行动（见图1）：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-17-10-08.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图1：Suphx的决策流程。&lt;&#x2F;center&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;抽牌：Suphx从牌山上抽出一张牌。如果它的手牌能够与这张进张形成胡牌的牌型，则获胜模型将决定是否宣布胡牌。如果是，它将声明胡牌并且回合结束。如果不是:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;杠步骤：如果当前的手牌可以与抽出的牌形成暗杠或者加杠，则杠模型确定是暗杠还是加杠。如果不是，请转到立直步骤；否则，有两种情况：
(a) 如果是暗杠，则进行暗杠并返回到抽牌的步骤。
(b)如果是加杠，则其他玩家可以枪杠赢得回合。如果其他玩家获胜，则该回合结束；否则，进行加杠并返回到抽牌步骤.&lt;&#x2F;li&gt;
&lt;li&gt;立直步骤：如果手牌可以用抽到的进张进行立直，则立直模型决定是否声明立直。如果不是,则转到“弃牌”步骤；否则，则声明立直，然后转到弃牌阶段。&lt;&#x2F;li&gt;
&lt;li&gt;弃牌步骤：弃牌模型选择要丢弃的手牌。之后，轮到其他玩家采取行动，如果牌山抽完了,则回合结束.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;其他弃牌情况：其他玩家弃牌。如果Suphx可以使用此弃牌形成胡牌牌型，则胡牌模型将决定是否宣布胡牌。如果是，它将宣布胡牌并且回合结束。否则，它会检查是否可以用丢弃的牌进行鸣牌(吃碰杠)。如果不是，则该轮到其他玩家采取行动了；否则，吃，碰或杠模型决定要采取的行动：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;如果这三个模型没有建议采取任何措施，则该轮到其他玩家采取措施了，或者游戏结束(没牌抽了,流局)。&lt;&#x2F;li&gt;
&lt;li&gt;如果这三个模型建议一个或多个动作，Suphx会建议置信度得分最高的动作（由这些模型输出）。如果提议的动作未被其他玩家的较高优先级动作打断(比如碰比吃要优先)，Suphx将采取该动作，然后进入“弃牌”步骤。否则，模型建议的动作将被打断，并轮到其他参与者采取行动。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2.2_特征和模型结构&quot;&gt;2.2 特征和模型结构&lt;&#x2F;h3&gt;
&lt;p&gt;由于深度卷积神经网络（CNN）表现出强大的表示能力，并已在下象棋，将棋和围棋之类的游戏中得到验证，因此Suphx还采用深度CNN作为其策略的模型架构。&lt;&#x2F;p&gt;
&lt;p&gt;与围棋和国际象棋这样的棋盘游戏不同，麻将中可供玩家使用的信息（如图2所示）并非自然地采用图像格式。我们精心设计了一组功能，将观察到的信息编码为可被CNN接受的输入。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-17-33-02.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图2：状态示例。麻将桌的状态包含以下几种类型的信息：（1）包含个人的手牌，放桌子上的鸣牌,和牌山上面的宝牌指示牌；（2）丢弃牌(牌河)的顺序；（3）整数信息，包括四个玩家的累积得分以及牌山的剩余牌（4）类别特征，包括回合ID，庄家，连庄的次数和立直棒的枚数。&lt;&#x2F;center&gt;
&lt;p&gt;由于日麻中有34种牌，因此我们使用多个34×1通道表示一个状态。如图3所示，我们使用四个通道对玩家的私有手牌进行编码。桌上的鸣牌，宝牌和弃牌的序列类似地编码到其他通道中。分类特征被编码为多个通道，每个通道要么全为0要么全为1。整数信号则被分为多个类，每个类使用全0或全1的通道进行编码。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-17-39-39.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图3：玩家手牌的编码。我们将玩家的手牌用四通道进行编码。有四行三十四列，每一行对应一个通道，每一列指示一种类型的图块。第n个通道中的第m列表示手中是否有第n类的手牌。&lt;&#x2F;center&gt;
&lt;p&gt;除了直接可观察到的信息外，我们还设计了一些预测模型，这些特征模型能够指示:如果我们从当前手牌中丢弃特定的手牌，然后从牌山中抽牌来替换它，则获胜的概率和回合得分是多少(就是透视麻将,外挂)。在日本麻将中，由14张牌组成的胡牌牌型包含4句话和1对将。共有89种话和34种将，导致大量不同的可能的胡牌牌型。此外，根据复杂的计分规则，不同的牌局会导致不同的回合得分.因为无法枚举不同的弃牌&#x2F;抽牌行为和获胜牌局的所有组合，因此，为降低计算复杂度，我们在构造预测模型时进行了一些简化： （1）我们进行深度优先搜索以找到可能的胡牌牌型。 （2）我们会忽略对手的行为，而只会考虑自己的抽牌和弃牌策略。通过这些简化，我们获得了100+个预测特征，每个特征对应一个34维向量。例如，一个特征表示丢弃特定的手牌后,再摸到(或吃碰杠)特定的牌,是否可以导向12000分的胡牌。(这句翻译的不好.. 英语差,可能是这个意思)&lt;&#x2F;p&gt;
&lt;p&gt;在Suphx中，除了输入和输出层的尺寸（表2）之外，所有模型（即弃牌&#x2F; 立直 &#x2F; 吃 &#x2F; 碰 &#x2F; 杠模型）都使用相似的网络结构（图4和5）。丢弃模型具有34个输出神经元，对应于34种牌， 立直 &#x2F; 吃 &#x2F; 碰 &#x2F; 杠模型仅具有两个输出神经元，分别对应于是否采取特定动作。除了状态信息和预测功能外， 吃 &#x2F; 碰 &#x2F; 杠模型的输入还包含吃 &#x2F; 碰 &#x2F; 杠所涉及到的牌的信息。请注意，在我们的模型中没有池化层，因为通道的每一列都有其意义，池化会导致信息丢失。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-18-06-03.png&quot; alt=&quot;&quot; &#x2F;&gt;
表2：不同模型的输入&#x2F;输出尺寸 (markdown原生的表格不支持合并,将就着看一下吧...)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-18-08-36.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图4: 弃牌模型的结构&lt;&#x2F;center&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-18-09-10.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图5: 立直,吃碰杠的模型结构&lt;&#x2F;center&gt;
&lt;h2 id=&quot;3.训练算法&quot;&gt;3.训练算法&lt;&#x2F;h2&gt;
&lt;p&gt;Suphx的训练包含三个主要步骤。首先，我们通过监督学习，使用（状态，动作）从Tenhou平台收集的顶级人类玩家对局，训练Suphx的五个模型。其次，我们以模型为策略，通过自学习强化学习（RL）改进了监督模型。我们采用了流行的策略梯度算法（第3.1节），并引入了全局奖励预测（第3.2节）和预言指导（第3.3节）来应对麻将的独特挑战。第三，在在线游戏过程中，我们采用运行时策略调整（第3.4节）来利用当前轮次上的新观察结果，以便更好的表现。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3.1_使用熵正则化的分布式强化学习&quot;&gt;3.1 使用熵正则化的分布式强化学习&lt;&#x2F;h3&gt;
&lt;p&gt;Suphx的训练基于分布式强化学习。具体来讲，我们采用策略梯度方法并利用重要性采样来处理由于异步分布式训练而造成的训练数据老化(staleness,确实不知道咋翻译...)：&lt;&#x2F;p&gt;
&lt;p&gt;$$
\mathcal{L}(\theta)=\underset{s, a \sim \pi_{\theta^{\prime}}}{\mathrm{E}}\left[\frac{\pi_{\theta}(a | s)}{\pi_{\theta^{\prime}}(a | s)} A^{\pi_{\theta}}(s, a)\right]\qquad(1)
$$&lt;&#x2F;p&gt;
&lt;p&gt;其中$\theta^{\prime}$是用于训练的旧策略的生成轨迹的（的参数），$\theta$是要更新的最新策略，而$A^{\pi_{\theta}}(s, a)$是相对于策略$\pi_{\theta}$在状态$s$上的动作$a$的优势。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-18-52-31.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图6: Suphx中的分布式RL系统&lt;&#x2F;center&gt;
&lt;p&gt;我们发现RL训练对策略的熵很敏感。如果熵值太小，则RL训练会迅速收敛，而自演不会显着改善该策略；如果熵太大，则RL训练变得不稳定，并且学习的策略会有很大的差异。因此，我们将RL训练期间的策略熵调整为以下形式：&lt;&#x2F;p&gt;
&lt;p&gt;$$
\nabla_{\theta} J\left(\pi_{\theta}\right)=\underset{s, a \sim \pi_{\theta^{\prime}}}{\mathrm{E}}\left[\frac{\pi_{\theta}(s, a)}{\pi_{\theta^{\prime}}(s, a)} \nabla_{\theta} \log \pi_{\theta}(a | s) A^{\pi_{\theta}}(s, a)\right]+\alpha \nabla_{\theta} H\left(\pi_{\theta}\right)\qquad(2)
$$&lt;&#x2F;p&gt;
&lt;p&gt;其中$H\left(\pi_{\theta}\right)$是策略$\pi_{\theta}$的熵，$\alpha&amp;gt;0$是一个权衡系数。为了确保稳定的探索，如果我们的策略的熵在最近一段时间内小于或大于目标$H_{target}$，我们将动态调整$α$以增加&#x2F;减少熵项：&lt;&#x2F;p&gt;
&lt;p&gt;$$
\alpha \leftarrow \alpha+\beta\left(H_{\text {target }}-\bar{H}\left(\pi_{\theta}\right)\right)\qquad(3)
$$&lt;&#x2F;p&gt;
&lt;p&gt;其$\bar{H}(\pi_{\theta})$是最近时期轨迹的经验熵，而$\beta&amp;gt;0$是小步长。&lt;&#x2F;p&gt;
&lt;p&gt;Suphx使用的分布式RL系统如图6所示。该系统由多个自演角色组成，每个角色都包含一组基于CPU的麻将模拟器和一组基于GPU的推理引擎以生成训练数据。策略根据训练数据的生成来进行解耦更新：参数服务器使用多个GPU回放缓冲区来更新策略。在训练期间，每个麻将模拟器都会以我们的RLAI为玩家和其他三个对手来随机初始化游戏。当四个玩家中的任何一个需要采取行动时，模拟器会将当前状态（由特征向量表示）发送到GPU推理引擎，GPU推理引擎然后将动作返回给模拟器。 GPU推理引擎会定期从参数服务器中提取最新策略$\pi_{\theta}$，以确保玩游戏时的策略足够接近最新策略$\pi_{\theta}$。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3.2_全局奖励预测&quot;&gt;3.2 全局奖励预测&lt;&#x2F;h3&gt;
&lt;p&gt;在麻将中，每个游戏包含多个回合，例如，在天凤中进行8到12回合。回合开始时向每个玩家分配13张私人手牌，然后玩家抽牌和弃牌，回合结束，直到其中一位玩家胡牌,或者牌山被抽完，然后每个玩家都会获得一个回合分数。例如，胡牌的玩家获得正回合得分，而其他人获得零或负回合得分。当所有回合结束时，每个玩家都将根据累积的回合分数获得游戏奖励。&lt;&#x2F;p&gt;
&lt;p&gt;玩家在每个回合结束时获得回合分数，并在8-12个回合后获得游戏奖励。但是，回合比分和比赛奖励对于RL训练来说,都不是好的信号：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;由于同一游戏中的多个回合共享相同的游戏奖励，因此使用游戏奖励作为反馈信号无法区分打得好的回合和打得不好的回合。因此，最好更好地衡量每一轮的表现.&lt;&#x2F;li&gt;
&lt;li&gt;虽然针对每个单独的回合计算回合得分，但它可能无法反映出动作的优劣，尤其是对于顶级职业玩家而言。例如，在游戏的最后一轮或第二轮中，在累积回合得分方面领先的排名第一的玩家通常会变得更加保守，并可能故意让排名第三或第四的玩家赢得本轮比赛，以便他&#x2F;她可以放心保持整体排名第一。也就是说，回合得分为负数并不一定意味着政策不佳：它有时可能反映某些策略，因此与相当好的政策相对应。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;因此，为了给RL训练提供有效的信号，我们需要将最终游戏奖励（全局奖励）适当地分配到游戏的每一轮。为此，我们引入了全局奖励预测因子$\Phi$，该全局奖励预测因子$\Phi$根据给定的信息预测最终游戏奖励此游戏的当前回合和所有先前回合。在Suphx中，奖励预测变量$\Phi$是一个递归神经网络，更具体地说，是一个两层门控递归单元（GRU），其后是两层完全连接的层，如图7所示。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-19-12-54.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图7: 奖励预测：GRU网络&lt;&#x2F;center&gt;
&lt;p&gt;此奖励预测模型的训练数据来自天凤的顶尖人类玩家的日志，并且通过最小化以下均方误差来训练$\Phi$：&lt;&#x2F;p&gt;
&lt;p&gt;$$
\min \frac{1}{N} \sum_{i=1}^{N} \frac{1}{K_{i}} \sum_{j=1}^{K_{i}}\left(\Phi\left(x_{i}^{1}, \cdots, x_{i}^{j}\right)-R_{i}\right)^{2}\qquad(4)
$$&lt;&#x2F;p&gt;
&lt;p&gt;其中N表示训练数据中的游戏次数，$R_{i}$表示第i场比赛的最后一场比赛奖励，$K_{i}$表示第i个游戏的回合数量，$x_{i}^{k}$表示第i个游戏的第k个回合的特征向量，包括该回合的分数，当前累积的回合分数，庄家位置，连庄次数和立直棒。&lt;&#x2F;p&gt;
&lt;p&gt;当$\Phi$训练有素时，对于具有K轮的自演游戏，我们将$\Phi(x^{k})-\Phi\left(x^{k-1}\right)$用作RL训练的第k轮奖励。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3.3_上帝视角的指导&quot;&gt;3.3 上帝视角的指导&lt;&#x2F;h3&gt;
&lt;p&gt;麻将中有丰富的隐藏信息（例如，其他玩家的私人手牌和牌山）。如果无法访问此类隐藏信息，则很难采取良好的措施。这是麻将游戏很难的根本原因。在这种情况下，尽管代理可以通过强化学习来学习策略，但是学习可能会非常缓慢。为了加快训练的速度，我们引入了一个上帝代理，该代理可以查看有关状态的所有完美信息：（1）玩家的手牌，（2）所有玩家的（以前被丢弃的）手牌(就是牌河)，（3）其他公共信息例如累积的总比分和立直棒（4）其他三名玩家的私人手牌，以及（5）牌山。普通代理仅可使用（1）（2）和（3），而（4）和（5）是仅能够被上帝代理看到的其他“完美”信息。&lt;&#x2F;p&gt;
&lt;p&gt;通过（不公平的）访问完美信息，上帝代理将在RL训练之后轻松地成为麻将高手(真的吗?我不信)。这里的挑战是如何利用上帝代理来指导和加速对我们的普通代理的训练。根据我们的研究，简单的知识提炼效果不佳：对于仅具有有限信息访问权限的普通代理人而言，很难模仿训练有素的上帝代理的行为，该代理超级强大且超出了普通代理人的能力。因此，我们需要一种更聪明的方法来指导我们的普通代理与上帝代理结合。&lt;&#x2F;p&gt;
&lt;p&gt;为此，可能有不同的方法。在Suphx中，我们要做的是首先使用所有功能（包括完善功能）通过强化学习来训练上帝代理。然后，我们逐渐收紧它对完美信息的访问，以便上帝代理最终将转换为普通代理：&lt;&#x2F;p&gt;
&lt;p&gt;$$
\mathcal{L}(\theta)=\underset{s, a \sim \pi_{\theta^{\prime}}}{\mathrm{E}}\left[\frac{\pi_{\theta}\left(a |\left[x_{n}(s), \delta_{t} x_{o}(s)\right]\right)}{\pi_{\theta^{\prime}}\left(a |\left[x_{n}(s), \delta_{t} x_{o}(s)\right]\right)} A^{\pi_{\theta}}\left(\left[x_{n}(s), \delta_{t} x_{o}(s)\right], a\right)\right]\qquad(5)
$$&lt;&#x2F;p&gt;
&lt;p&gt;其中$x_{n}(s)$表示普通特征，$x_{0}(s)$表示状态s下附加的完美特征，并且$δ_{t}$是第t次迭代时的dropout矩阵，其元素是具有$P\left(\delta_{t}(i, j)=1\right)=\gamma_{t}$的伯努利变量。我们将$\gamma_{t}$从1逐渐衰减到0.当$\gamma_{t}$= 0时，所有的完美特征都将被丢弃，并且模型从上帝代理转变为普通代理。(曾经我也能透视, 直到我的膝盖中了一箭...)&lt;&#x2F;p&gt;
&lt;p&gt;在$\gamma_{t}$变为零之后，我们将继续对正常智能体进行一定次数的迭代训练。在持续训练中，我们采用了两个技巧：首先，将学习率降低到十分之一。其次，如果重要性权重大于预定义的阈值，则我们拒绝某些(状态-动作)对。根据我们的实验，若没有这些技巧，持续训练就不稳定并且不会进一步的改进。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3.4_参数蒙特卡罗政策调整&quot;&gt;3.4 参数蒙特卡罗政策调整&lt;&#x2F;h3&gt;
&lt;p&gt;当他&#x2F;她的初始手牌（私人手牌）变化时，顶级人类玩家的策略将大不相同。例如，如果初始手牌不错，他&#x2F;她将积极争取赢得更多，而如果初始手牌不好，则保守地损失更少。这与Go和StarCraft之前的游戏截然不同，因此，我们相信，如果我们能够在运行时适应离线训练的策略，我们可以建立一个更强大的麻将代理。&lt;&#x2F;p&gt;
&lt;p&gt;蒙特卡洛树搜索（MCTS）是一种在围棋等游戏中运用的成熟技术，可以提高运行时性能。 不幸的是，如前所述，麻将的游戏顺序不是固定的，并且很难建立通用的游戏树。 因此，MCTS不能直接应用于麻将。在这项工作中，我们设计了一种新的方法，称为参数蒙特卡洛政策调整（pMCPA）。&lt;&#x2F;p&gt;
&lt;p&gt;当一轮比赛开始并将初始私人手牌交给我们的代理时，将脱机训练的策略调整为该给定初始手牌，如下所示：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;模拟：从不包括我们自己的私人手牌的所有牌中随机抽取三组对手的私人手牌和牌山(随机初始化)，然后使用离线训练的策略来展开并完成整个游戏流程。这样就产生了总共K条轨迹。&lt;&#x2F;li&gt;
&lt;li&gt;适应：使用已经展开的游戏流程来执行梯度更新以微调离线策略。&lt;&#x2F;li&gt;
&lt;li&gt;推断：在本轮比赛中，使用微调的策略与其他玩家对抗。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;令$h$表示一轮我们代理的私人手牌，$θ_o$表示离线训练的策略的参数，$θ_a$表示适应本轮的新策略的参数。那我们有&lt;&#x2F;p&gt;
&lt;p&gt;$$
\theta_{a}=\arg \max &lt;em&gt;{\theta} \sum&lt;&#x2F;em&gt;{\tau \sim_{\theta_{o}} \mathcal{T}(h)} R(\tau) \frac{p(\tau ; \theta)}{p\left(\tau ; \theta_{o}\right)}\qquad(6)
$$&lt;&#x2F;p&gt;
&lt;p&gt;其中$\mathcal{T}(h)$是游戏前期为$h$的游戏流程集合，$p(\tau ; \theta)$是策略$θ$生成游戏流程$τ$的概率。&lt;&#x2F;p&gt;
&lt;p&gt;根据我们的研究，模拟&#x2F;流程的数量K不必非常大，并且pMCPA无需为此轮收集以下所有状态的统计信息。由于pMCPA是一种参数方法，因此更新的策略（使用K个模拟）也可以导致对在仿真中未访问的那些状态也进行更新的估计。也就是说，这种运行时自适应可以帮助将我们从有限的模拟中获得知识推广到看不见的状态。&lt;&#x2F;p&gt;
&lt;p&gt;值得注意的是，策略调整是针对每个回合独立执行的。也就是说，在本轮调整代理策略之后，对于下一轮，我们将再次从离线训练策略中重新启动。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4_离线评估&quot;&gt;4 离线评估&lt;&#x2F;h2&gt;
&lt;p&gt;在本节中，我们通过离线实验,来报告Suphx各个技术组件的有效性。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4.1_监督学习&quot;&gt;4.1 监督学习&lt;&#x2F;h3&gt;
&lt;p&gt;在Suphx中，这五个模型首先分别通过监督学习进行训练，每个训练样本都是从人类职业玩家收集的(状态-动作)对，状态作为输入，动作作为监督学习的标签。例如，对于弃牌模型的训练，样本的输入是状态的所有可观察信息（和预测模型输出的特征），而标签是人类玩家采取的动作，即在此丢弃的牌类型。&lt;&#x2F;p&gt;
&lt;p&gt;训练数据的大小和测试准确性在表3中列出。对于所有模型，验证数据和测试数据的大小分别为10K和50K。由于弃牌模型解决了34类分类问题，因此我们为此收集了更多的训练样本。从表中可以看出，弃牌模型的准确性为76.7％，立直模型的准确性为85.7％，吃模型的准确性为95.0％，碰模型的准确性为91.9％，杠模型的准确性为94.0％。我们还列出了以前的工作&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1906.02146v2&quot;&gt;(论文链接)&lt;&#x2F;a&gt;所获得的准确性，以作为参考。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-22-51-35.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 表3:监督学习的结果&lt;&#x2F;center&gt;
&lt;h3 id=&quot;4.2_强化学习&quot;&gt;4.2 强化学习&lt;&#x2F;h3&gt;
&lt;p&gt;为了展示Suphx中每个RL组件的价值，我们训练了几位麻将特工(正苦恼怎么翻译agent这个词, 谷歌翻译成特工... 突然感觉还挺有味道的, 后面就用特工来翻译了2333)：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;SL：使用监督学习的特工。如上一小节所示，该特工（具有所有五个模型）都受到监督训练。&lt;&#x2F;li&gt;
&lt;li&gt;SL-weak：SL特工的训练不足版本，在评估其他特工时用作对手模型。&lt;&#x2F;li&gt;
&lt;li&gt;RL-basic：强化学习特工的基本版本。在RL-basic中，弃牌模型由SL弃牌模型初始化，然后通过策略梯度方法进行提升，舍入分数加分并进行熵正则化。 立直,吃碰杠模型与SL特工的模型相同&lt;&#x2F;li&gt;
&lt;li&gt;RL-1：通过全局奖励预测来增强RL-basic的RL特工。通过对来自天凤的人类游戏日志的监督学习，对奖励预测模型进行了训练。&lt;&#x2F;li&gt;
&lt;li&gt;RL-2：通过上帝指导进一步增强RL-1的RL特工。请注意，在RL-1和RL-2中，我们也仅使用RL训练了弃牌模型，而其他四个模型与SL代理的模型相同。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;最初的私人手牌具有较大的随机性，将极大地影响游戏的赢&#x2F;输。为了减少最初的私有手牌引起的差异，在离线评估期间，我们随机生成了100万个游戏。在这些游戏中，每个特工与3个SL-weak的特工对战。在这种情况下，对一名特工的评估用了20天的Tesla K80 GPU进行了两天。对于评估指标，我们按照天凤规则（请参阅附录C）计算特工的稳定等级。为了减少稳定等级的差异，对于每个特工，我们从一百万个游戏中随机抽取了800K个游戏，采样了1000次。&lt;&#x2F;p&gt;
&lt;p&gt;图8显示了这些特工在1000次采样中稳定等级的四分位间距。请注意，为公平起见，每个RL特工都接受了150万场比赛的训练。每个座席的培训花费44个GPU（参数服务器使用4个Titan XP，自演游戏人员使用40个Tesla K80）和两天时间。可以看出，RL-basic优于SL，RL-1优于SL-basic ，而RL-2比RL-1带来更多收益。这些实验结果清楚地表明了强化学习的价值，以及全局奖励预测和预言指导的其他价值。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-20-17-15.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图8：超过一百万场比赛后的稳定排名统计数据。该图显示了分布的三个四分位数值和极值。 “须线”扩展到位于上下四分位数的1.5 IQRs之内的点，然后独立显示超出此范围的观测值&lt;&#x2F;center&gt;
&lt;p&gt;通过全局奖励预测模型将游戏奖励分配给每个回合，训练有素的特工可以更好地最大化最终游戏奖励而不是回合得分。例如，在图9中，我们的特工（坐在南）在比赛的最后一轮中领先优势很大。根据当前这四位玩家的累计回合分数，赢得本回合只会获得边际奖励，而输掉这一回合将导致巨大的惩罚。因此，我们的经纪人没有采取积极的行动来赢得本轮比赛，而是采取保守的态度，选择最安全的牌来放弃，最终获得本场比赛的第一名&#x2F;排名。与此相反，RL-basic放弃了另一张牌来赢得该回合，这带来了失去整场比赛第一名的巨大风险。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-20-24-42.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图9：通过全局奖励预测，我们的特工（坐在南）在最后一轮比赛中累积的回合得分领先时，即使他的手牌很好并且有一定几率获胜，也可以保守地进行比赛。 RL-basic特工会丢弃红框牌以赢得本轮比赛，但由于此轮中任何玩家都没有丢弃相同的牌，因此丢弃该牌是有风险的。相反，RL-1和RL-2代理在防御模式下进行比赛并丢弃蓝框牌，这是安全牌，因为西座玩家刚刚丢弃了相同的牌。&lt;&#x2F;center&gt;
&lt;h3 id=&quot;4.3_运行时策略适应性评估&quot;&gt;4.3 运行时策略适应性评估&lt;&#x2F;h3&gt;
&lt;p&gt;除了测试对离线RL培训的增强之外，我们还测试了运行时策略的适应性。实验设置如下：&lt;&#x2F;p&gt;
&lt;p&gt;当一轮比赛开始并将初始手牌发给我们的特工时，&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;数据生成：我们修复代理的手牌并模拟100K轨迹。在每个轨迹中，随机生成其他三个玩家的手牌和墙贴，并且我们使用四份代理人来展开并完成轨迹。&lt;&#x2F;li&gt;
&lt;li&gt;策略调整：我们通过使用基本的策略梯度方法，微调和更新了在这100K游戏流程上离线训练的策略。&lt;&#x2F;li&gt;
&lt;li&gt;调整后的策略的测试：我们的特工在另外一个10K测试集上使用更新后的策略与其他三个参与者进行竞争，而我们的特工的私有手牌仍是固定的。由于我们特工的初始手牌是固定的，因此经过调整的特工在此测试集上的性能可以判断这种运行时策略调整是否真的使我们的特工适应当前的手牌并更好地工作。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;请注意，由于采样策略和在线学习，运行时策略调整非常耗时。因此，在目前阶段，我们仅在数百个初始回合中测试了该技术。 RL-2的适应版本相对于非适应版本的获胜率为66％，这表明了运行时策略适应的优势。&lt;&#x2F;p&gt;
&lt;p&gt;策略的调整使我们的特工能够更好地适应当前的手牌状态，尤其是在游戏的最后一轮或第二轮中。图10显示了游戏最后一轮的示例。通过模拟，特工学会了知道虽然很容易以良好的回合得分赢得本轮比赛，但不幸的是，这不足以避免以第4名结束比赛。因此，在适应之后，特工会更加积极地进行比赛，承担更多的风险，并最终以更大的回合得分赢得回合，并成功避免以第4位结束比赛。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-21-32-47.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图10: 在此示例中，要避免游戏的第4位，特工需要在本回合中赢得超过12,000回合的得分。通过模拟，代理可以了解到丢弃红色方块很容易赢得本轮比赛。但是，相应的获胜回合得分将小于12,000。适应后，特工将丢弃蓝框，这会降低获胜的概率，但一旦获胜，则获胜回合得分会超过12,000。成功避免第四名。&lt;&#x2F;center&gt;
&lt;h2 id=&quot;5_在线评估&quot;&gt;5 在线评估&lt;&#x2F;h2&gt;
&lt;p&gt;为了评估我们的麻将AI Suphx的真实性能，我们让它在天凤上游玩，天凤是日本麻将最受欢迎的在线平台。 天凤有两个主要房间，专家室和凤凰室。专家室对AI和4旦及以上的人类玩家开放，而凤凰室仅对7旦或以上的人类玩家开放。根据这项政策，Suphx只能在专家室游玩。&lt;&#x2F;p&gt;
&lt;p&gt;Suphx在专家室玩了5000多个游戏，并以创纪录的排名9获得了10 dan，以稳定排名获得了8.74dan。10这是天凤的第一个也是唯一的以记录排名达到10 dan的AI。&lt;&#x2F;p&gt;
&lt;p&gt;我们在表4中将Suphx与几个AI &#x2F;人类玩家进行了比较&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bakuuchi（10）：这是东京大学根据蒙特卡罗模拟和对手建模设计的麻将AI。它不进行用户强化学习。&lt;&#x2F;li&gt;
&lt;li&gt;NAGA11：这是Dwango Media Village基于深度卷积神经网络设计的麻将AI。它也不使用强化学习。&lt;&#x2F;li&gt;
&lt;li&gt;我们还将Suphx与达到10丹的最高人类水平的记录进行比较。公平地说，我们只比较他们达到10丹后在专家室的比赛。由于这些顶尖的玩家大部分时间都在凤凰室度过（部分是由于其更友好的得分规则），并且只有在达到10 dan之后才偶尔在专家室中出战，因此我们很难为他们每个人计算出可靠的稳定排名。 因此，我们将它们视为一个宏观参与者，以进行统计上合理的比较。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我们可以看到，就稳定排名而言，Suphx比Bakuuchi和NAGA（比Suphx最好的两个最好的麻将AI）好大约2 dan。尽管这些顶尖的人类运动员的成绩与Suphx相同（10 dan），但在稳定排名方面却不如Suphx强。图11描绘了天后当前活跃用户的记录等级13的分布，这表明Suphx在天凤的人类玩家中超过99.99％。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-21-38-15.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 表4 与其他AI和顶级人类玩家的比较。&lt;&#x2F;center&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-21-38-48.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图11：天凤的人类选手的记录排名分布。每个数字表示天后某个水平以上的人类玩家数量。&lt;&#x2F;center&gt;
&lt;p&gt;如附录B所述，记录排名有时不能反映玩家的真实水平：例如，天凤历史上有100多位玩家的记录排名为10丹，但他们的真实水平可能有很大差异。稳定等级（根据其定义）比记录等级更稳定且粒度更细；但是，这也可能有很大的差异，尤其是当玩家在天后没有玩足够多的游戏时。因此，为了进行更具信息性和可靠性的比较，我们进行如下操作。对于每个AI &#x2F;人类玩家，我们从其在专家室中的日志中随机抽取K个游戏，并使用这些K个游戏计算稳定排名。我们进行了N次这样的采样，并在图12中显示了每个玩家对应的N个稳定排名的统计数据。可以看出，Suphx不仅超越了其他两个AI，而且还超越了顶级人类职业玩家的平均表现。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-21-41-42.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图12：稳定等级的统计，其中K = 2000和N = 5000。&lt;&#x2F;center&gt;
&lt;p&gt;我们在表5中进一步显示了那些AI &#x2F;人类玩家的统计数据。我们从该表中得出了一些有趣的发现：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Suphx的防守能力很强，并且换手率(deal-in rate?)非常低。顶级人类玩家对Suphx的评论证实了这一点&lt;&#x2F;li&gt;
&lt;li&gt;Suphx的第4级排名率非常低，这是根据其得分规则在天凤中获得较高稳定排名的关键。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Suphx已经开发出自己的游戏风格，这被人类的高级玩家所公认。例如，Suphx非常擅长保存安全手牌，更喜欢半冲洗(half-flush)赢得胜利，等等。图13是Suphx保存安全手牌以平衡未来攻防的示例&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-07-21-45-17.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 图13：Suphx在$s_t$状态下保留安全牌，以平衡将来的攻击和防御。尽管在$s_t$状态下丢弃红色框的图块是安全的（实际上这确实是大多数人类玩家都会丢弃的图块），但Suphx却保留了这张牌。取而代之的是，它丢弃了蓝色方框，这可能会减慢胡牌牌型的形成过程。这样做可以在未来状态中提供更大的灵活性，并可以更好地平衡未来的攻击和防御。考虑另一位玩家宣布立直的未来状态$s_{t+k}$，这对于我们的麻将特工来说是意外的。在这种情况下，Suphx可以丢弃保留在手上到的安全牌，而不会破坏它试图形成的牌型。相反，如果Suphx暂时丢弃此安全牌，则没有其他安全牌可丢弃$s_{t+k}$，因此可能不得不在接近获胜牌的手牌中进行熔合或配对，因此获胜的可能性较小。&lt;&#x2F;center&gt;
&lt;h2 id=&quot;6._结论与讨论&quot;&gt;6. 结论与讨论&lt;&#x2F;h2&gt;
&lt;p&gt;Suphx是迄今为止最强大的麻将AI系统，同时也是天凤（日本著名的麻将网上平台）上第一个超过大多数顶级人类玩家的麻将AI。由于麻将的复杂性和独特的挑战，我们相信，尽管Suphx的表现非常出色，但仍有很大的改进空间。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;我们在Suphx中引入了全局奖励预测。在当前系统中，奖励预测模型将有限的信息作为其输入。显然，更多信息将导致更好的奖励信号。例如，如果由于我们最初的手牌好运而使一轮胜利很容易获胜，那么赢得这一回合并不能反映我们政策的优越性，不应给予太多奖励；相比之下，赢得一轮艰难的回合应该获得更多的回报，也就是说，在设计奖励信号时应考虑游戏难度。我们正在投资如何利用上帝信息（例如，通过比较不同玩家的私人初始手牌）来衡量回合&#x2F;游戏的难度，然后提高奖励预测指标。&lt;&#x2F;li&gt;
&lt;li&gt;我们介绍了上帝指导的概念，并通过完善的功能缺失手段使用了从上帝代理到正常代理的逐步过渡来实例化此实例。除此之外，还有其他方法可以利用完美信息。例如，我们可以同时训练一个上帝代理和一个普通代理，让上帝代理将其知识提取给普通代理，同时限制这两个代理之间的距离。根据我们的初步实验，这种方法也很好用。再举一个例子，我们可以考虑设计一个上帝评论家，该评论家提供更有效的状态级即时反馈（而不是回合级反馈），以加速基于完美信息的策略功能的训练。&lt;&#x2F;li&gt;
&lt;li&gt;为了进行运行时策略调整，在Suphx的当前系统中，我们在每个回合开始时都进行了模拟，当您将手牌发送给特工时。实际上，我们也可以在任何玩家丢弃每张牌之后进行模拟。也就是说，我们不仅可以使策略适应最初的习惯，还可以随着游戏的进行和越来越多的信息变得可观察而继续进行调整。这样做应该能够进一步改善我们策略的效果。而且，由于我们逐渐适应了策略，因此每个步骤都不需要太多的采样和部署，换句话说，我们可以分摊整轮策略调整的计算复杂性。这样，甚至有可能在价格合理的计算资源的在线游玩中使用策略适应。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Suphx是不断学习和改进的麻将特工。今天在天凤上实现Suphx的成就仅仅是开始。展望未来，我们将为Suphx引入更多新颖的技术，并继续推动麻将AI和信息不完善游戏的前沿。&lt;&#x2F;p&gt;
&lt;p&gt;大多数现实世界中的问题（例如金融市场预测和物流优化）与麻将具有相同的特征，而不是复杂的操作&#x2F;奖励规则，信息不完善等。我们相信，我们在Suphx中为麻将设计的技术包括全局奖励预测，上帝指导以及蒙特卡洛参数化的政策调整，具有极大的潜力，可从各种实际应用中受益.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;致谢&quot;&gt;致谢&lt;&#x2F;h2&gt;
&lt;p&gt;我们衷心感谢Tsunoda Shungo和Tenhou.net为我们的实验提供专业的游戏记录和在线平台。我们想感谢Tenhou.net上的玩家与Suphx一起玩游戏。我们要感谢MoYuan帮助我们收集人类职业玩家的统计信息。我们还要感谢实习生郝昊和纪小红，以及我们的同事李亚涛，曹伟，马卫东和DiHe为开发Suphx的学习算法和训练系统所做的贡献。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;附录A_麻将规则&quot;&gt;附录A 麻将规则&lt;&#x2F;h1&gt;
&lt;p&gt;这个翻译了一半感觉太鸡肋了...
想了解的打几把日麻就应该懂了. 不是很复杂
原文贴了张天凤的等级表
&lt;img src=&quot;..&#x2F;images&#x2F;2020-04-08-22-19-22.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt; 表6：Tenhou排名系统：不同级别及其要求&lt;&#x2F;center&gt;
&lt;h1 id=&quot;附录B_天凤平台排名规则&quot;&gt;附录B 天凤平台排名规则&lt;&#x2F;h1&gt;
&lt;p&gt;这个也没翻译...  主要讲了一下dan(丹)的定义.  各位想深入研究的可以看一下魔女的blog&lt;&#x2F;p&gt;
&lt;h1 id=&quot;附录C_稳定排名&quot;&gt;附录C 稳定排名&lt;&#x2F;h1&gt;
&lt;p&gt;天凤使用稳定的排名来评估玩家的长期平均表现。专家室的稳定等级计算如下&lt;&#x2F;p&gt;
&lt;p&gt;n1表示玩家获得最高累积回合得分的游戏数量，n4表示他&#x2F;她获得最低累积回合得分的游戏数量，n2和n3代表第二&#x2F;第三最高累积回合得分的游戏数量。那么dan的玩家稳定排名为&lt;&#x2F;p&gt;
&lt;p&gt;$$
\frac{5 \times n_{1}+2 \times n_{2}}{n_{4}}-2\qquad(7)
$$&lt;&#x2F;p&gt;
&lt;p&gt;由于游戏的累计回合得分不仅取决于玩家的技能，而且还取决于四个玩家的私人手牌和牌山，因此由于隐藏信息的随机性，稳定等级可能会有很大的差异。此外，在天凤玩游戏时，天凤系统会随机分配对手，这带来了更多的随机性。因此，对于天凤的玩家，通常假设至少需要几千场比赛才能获得相对可靠的稳定排名。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>集成光子功率分配器的深度神经网络逆设计 论文翻译</title>
        <published>2020-03-14T00:00:00+00:00</published>
        <updated>2020-03-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/2020-3-14-论文翻译《集成光子功率分配器的深度神经网络逆设计》/"/>
        <id>https://bbpp222006.github.io/2020-3-14-论文翻译《集成光子功率分配器的深度神经网络逆设计》/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/2020-3-14-论文翻译《集成光子功率分配器的深度神经网络逆设计》/">&lt;h1 id=&quot;集成光子功率分配器的深度神经网络逆设计&quot;&gt;集成光子功率分配器的深度神经网络逆设计&lt;&#x2F;h1&gt;
&lt;p&gt;Mohammad H. tahersima ,  Keisuke Kojima ,  toshiaki Koike-Akino, Devesh Jha  , Bingnan Wang, Chungwei Lin &amp;amp; Kieran parsons
Received: 24 September 2018
Accepted: 13 December 2018
Published online:February 2019
原文地址:https:&#x2F;&#x2F;www.nature.com&#x2F;articles&#x2F;s41598-018-37952-2&lt;&#x2F;p&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;&#x2F;h2&gt;
&lt;p&gt;对于科学和工程应用而言，预测人造结构材料的物理响应尤为重要。在这里，我们使用深度学习来预测人工设计的纳米光子设备的光学响应。除了预测任何给定拓扑的传输响应的前向近似之外，这种方法还允许我们对目标光学响应进行反向近似设计。我们的深度神经网络（DNN）可以设计紧凑型（2.6×2.6μm2）绝缘体上硅（SOI）的1×2功率分配器，并在不到一秒钟的时间内实现各种目标分配比。该模型经过训练，可将反射最小化（小于〜−20 dB），同时实现高于90％的最大传输效率和目标分割规格。这种方法为依靠复杂的纳米结构快速设计集成光子组件铺平了道路。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1.引言&quot;&gt;1.引言&lt;&#x2F;h2&gt;
&lt;p&gt;人工设计的亚波长纳米结构材料可用于控制入射电磁波进入特定的透射和反射波阵面。最近的纳米光子器件已经使用了这种复杂的结构，从而以紧凑且节能的形式在光学，集成光子学，传感和计算元材料中实现了新的应用。然而，使用数值模拟来优化具有大量可能的特征组合的纳米结构在计算上是昂贵的。例如，根据光子设备的体积，通过有限差分时域（FDTD）方法计算电磁场轮廓可能需要很长的仿真时间（几分钟到几小时），以分析光传输响应。为了设计实现目标透射曲线的纳米结构，我们需要在大多数元启发式方法中执行大量的FDTD仿真。为了解决该问题，我们之前开发了一种使用神经网络（NN）的人工智能集成优化过程，该过程可以通过减少所需的数值模拟次数来证明神经网络如何帮助简化设计过程，从而加快优化速度&lt;&#x2F;p&gt;
&lt;p&gt;深度学习方法是通过非线性模型的组合而获得的表示学习技术，这些非线性模型以分层的方式将先前级别的表示转换为更高且稍微抽象的级别。主要思想是，通过级联大量此类转换，可以使用深度神经网络以数据驱动的方式学习非常复杂的功能。深度学习在建模复杂的投入产出关系方面的巨大成功吸引了一些科学界的关注，例如材料发现，高能物理学，单分子成像医学诊断和粒子物理学。它在光学界引起了一定的关注，最近有一些关于使用DNN设计纳米结构光学组件的逆向建模以及人工神经网络的硬件实现的反向工作。 NN可以用于预测拓扑的光学响应（正向设计），也可以用于设计目标光学响应的拓扑（逆向设计）。&lt;&#x2F;p&gt;
&lt;p&gt;光子结构的逆设计通常通过伴随灵敏度分析来证明。最近，D。Liu使用串联神经网络架构来学习厚度变化的交替电介质薄膜的非唯一电磁散射。 J. Peurifoy证明了神经网络使用深度为4层的完全连接的神经网络来近似SiO2和TiO2多层壳纳米粒子的光散射。在本文准备期间，浅野信华（T. Asano）提供了一个神经网络，用于预测二维光子晶体中的品质因数。受到这一进展的启发，我们的目标是训练一种神经网络，该网络可以按用户指定的比率即时设计集成光子功率分配器。集成光子设备的设计空间比以前演示的光散射应用程序大得多，后者需要强大的更深层次的网络，例如Deep Residual Networks（ResNet）&lt;&#x2F;p&gt;
&lt;p&gt;基于多模干扰（MMI）的集成光子分束器已被广泛用于将功率平均分配到输出端口。尽管可以将任意的分光比应用于各种应用，例如信号监控，反馈电路或光学量化36，但由于设计复杂性，几乎无法探索设计空间。田等(Tian et al)演示了在15×15μm2的器件尺寸中具有可变分光比的基于SOI的耦合器，带宽为60 nm，传输效率为80％37。徐等。针对3.6×3.6μm2器件占位面积的任意比例功率分配器，优化了正方形蚀刻像素的位置，以实现80％的效率&lt;&#x2F;p&gt;
&lt;p&gt;为了设计具有任意分光比的光子功率分配器，设计人员通常从基于解析模型的整体结构开始，然后在数值模拟中使用参数扫描对结构进行微调。在这里，我们证明了使用深度学习方法，可以在紧凑的深度残留神经网络模型中有效地学习宽带集成光子功率分配器的设计空间。这种方法可以根据规格进行设计，用户只需简单地要求特定的功率分配性能，并且几乎可以在不依赖费时的FDTD仿真的情况下，立即看到接近理想的解决方案。我们的设备在2.6×2.6μm2的占位面积上具有90％以上的传输效率，据我们所知，这是迄今为止最小的任意比率分束器。此外，我们的设计不依赖于任意的器件形态，并且被限制为半径为45 nm的蚀刻孔的20×20向量，可以通过当前的半导体技术方便地进行制造。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-03-16-14-43-06.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图1 DNN预测和逆设计过程概述。 （a）在功率分配器的输入端口将TE模式发射到标准SOI波导中（请注意，x和y方向上的比例不同）。 （b）占地面积为2.6×2.6μm2的纳米结构集成光子功率分配器的示意图。圆圈表示蚀刻孔的位置。通过优化蚀刻孔的位置，可以调节光传播到任一端口中。 （c）我们使用DNN对纳米光子设备进行正向和反向建模。 DNN可以将设备拓扑设计作为输入，将元设备的频谱响应作为标签，反之亦然。&lt;&#x2F;center&gt;
&lt;h2 id=&quot;2.深度学习用于正向建模以预测光学响应&quot;&gt;2.深度学习用于正向建模以预测光学响应&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;2.1_仿真设置和数据集&quot;&gt;2.1 仿真设置和数据集&lt;&#x2F;h3&gt;
&lt;p&gt;当宽带光沿其路径遇到折射率不同的障碍物时，它会发生反射，折射和散射。纳米结构集成光子功率分配器的目标是利用各种光与障碍物发生的各种作用，将输入光束整体的导向某个端口以得到目标的功率。为了使用DNN设计功率比分配器，我们在标准的全蚀刻SOI平台上选择了简单的三端口结构。使用绝热锥将一个输入和两个输出0.5μm宽的端口连接到2.6μm宽的方形功率分配器设计区域，连接宽度为1.3μm（图1）。我们使用数值模拟（方法部分）来生成标记数据以训练网络。然后，我们为DNN提供数值光学实验，并训练一个神经网络，该网络能够表示每个端口的空穴矢量和光谱响应之间的关系。最初，我们的输入数据是几个20×20的空穴向量（HV），每个向量都由端口1（T1）和端口2（T2）的光谱传输响应（SPEC）以及来自输入端口（R）的反射标记。每个像素都是一个半径为45 nm的圆，使用常规光刻方法即可轻松制造。每个像素的二进制状态分别为1（被蚀刻）（n = nsilicon）和0（未被蚀刻）（n = nsilica）（请参见方法）。改变孔位置处的折射率会修改功率分配器内部的局部有效折射率，从而确定设备中行波的传播路径。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-03-16-14-41-32.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图2 我们使用各种数据训练DNN网络。每个数据集都以初始条件，蚀刻的孔密度和优化光谱响应的度量开始。我们生成大约20,000个蚀刻的孔向量作为数据，每个与它的传输响应相关联作为标签。在这里，我们介绍两个数据集：（a）非对称情况下使用随机初始向量最大化$\min \left(T_{1}\right)+\min \left(T_{2}\right)-\alpha \times \max (|R|) \quad(\alpha=2)$（b）对称情况下使用随机初始向量最大化$\min \left(T_{1}\right)+\min \left(T_{2}\right)-\alpha \times \max (|R|) \quad(\alpha=4)$   T1和T2分别是端口1和2的发射功率； R是反射到输入端口的光功率。对于对称情况，端口1和端口2的传输相同（T1 = T2）。 （c）通过数值方法在1550 nm处约20,000个功率分配器拓扑收集的所有传动系统和测试数据标签的直方图。 d）对于隐藏层宽度恒定为100且深度为4、8和10的网络，约10,000个训练周期的训练（线）和测试（点）的学习曲线。通过增加多达8层的网络深度，可以减少网络丢失。插图显示了FCDNN的最佳情况（4层），其损耗值大得多，约为0.58。在这里，所有损失函数均基于负对数似然率。&lt;&#x2F;center&gt;
&lt;p&gt;我们使用随机选择的HV和精心选择的模式化初始HV（请参见图2a和补充图S1），并使用启发式优化方法对各种优化指标进行优化以优化频谱传输值，以收集用于监督学习的各种标记训练数据。在对称搜索的情况下，我们强制X轴上的HV对称，并利用拓扑的对称性将搜索空间从400个像素减少到200个像素。此外，由于对称边界条件。因此，对称设备的光谱响应T1和T2相等（图2b）。输入和输出波导以及对称和不对称情况的其他几何细节是相同的。对于图2所示的两种情况，我们都从初始孔向量开始优化，并使用单步跨度二分查找法来最大化$\mathrm{FOM}=\min \left(T_{1}\right)+\min \left(T_{2}\right)-\alpha \times \max (|R|)$ （对于α= 2和4）分别针对图2a和b。我们的设计目标是实现紧凑的纳米结构功率分配器，具有高传输效率和最小的背反射。低背反射非常重要，因为在有源集成光子电路中，将背反射降至最低非常重要。这就是为什么我们在优化指标中使用大于2的反射因子来强调最小化这些功率分配器中的背反射的原因。我们针对约20个不同的初始条件和分割比率目标重复此过程，并为非对称情况添加镜像数据，以收集总共约20,000个数据及其相应的光谱标签（图2c）。&lt;&#x2F;p&gt;
&lt;p&gt;对于正向问题，输入是对应于孔位置的二进制图像的二维20×20 HV阵列。我们训练DNN来预测SPEC向量，该向量是具有63个元素的一维向量。 SPEC包括宽带光谱数据（1450至1650 nm），用于在输出端口T1和T2传输以及对输入端口R的反射。对于逆向设计，SPEC被用作输入，并且空穴矢量被视为标签。正向问题作为回归问题得到解决，我们使用高斯对数似然函数来训练模型。相反，反问题作为分类问题解决，我们在其中预测代表孔位置的二元向量。因此，我们使用伯努利对数似然分类器作为损失函数来训练反问题。高斯对数似然损失函数由以下方程式表示&lt;&#x2F;p&gt;
&lt;p&gt;$$
-\log P(Y | X, W)=\frac{1}{K} \sum_{n}^{K}\left(\frac{1}{2} \log \left(2 \pi \sigma^{2}\right)+\frac{1}{2 \sigma^{2}}\left(y_{n}-W^{T} x_{n}\right)^{2}\right)\qquad(1)
$$&lt;&#x2F;p&gt;
&lt;p&gt;其中 $P(Y|X,W)$ 表示概率模型，W表示模型参数，K是训练数据的数量。损失函数使用亚当优化算法进行优化40。在固定次数的迭代之后终止训练，以确保收敛（图2d）。我们训练有素的广告网络的训练和验证结果相似，因此我们没有使用任何正则化来拟合。&lt;&#x2F;p&gt;
&lt;p&gt;对于这两个问题，我们首先使用具有多层的完全连接的DNN（FCDNN），其中每一层都有100个神经元。层数被认为是在数值实验中优化的超参数。但是，我们发现增加FCDNN的深度并不能改善网络的性能。因此，我们使用残差深度神经网络（ResNet）将正向和逆向问题的训练深度提高到8个隐藏层（有关常规DNN和ResNets的定量比较，请参见图2d）。解释一下，FCDNN通常会遇到梯度消失的问题。因此，增加FCDNN的深度并不一定会改善性能。 ResNet旨在通过使用“身份快捷方式连接”来规避此问题，其基本假设是，优化残差映射比优化原始的未引用映射更容易（图3）。经验证明，与FCDNN35相比，ResNets在训练深度架构方面具有更大的灵活性。主要思想是ResNet使用附加的标识函数来允许渐变的平滑向前和向后传播。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-03-16-15-34-12.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图3 普通FCDNN（a）和ResNet DNN（b）的网络架构，用于集成纳米光子学的逆向设计。我们在两种网络体系结构中都使用了S型（σ）激活函数。 FCDNN的深度增加并不一定会改善性能。 ResNet旨在使用附加的身份功能来通过增加网络深度来实现准确性。&lt;&#x2F;center&gt;
&lt;h3 id=&quot;2.1_结论&quot;&gt;2.1 结论&lt;&#x2F;h3&gt;
&lt;p&gt;为了测试纳米结构的功率分配器网络，首先，我们从用于训练网络的同一组模拟数据中使用了随机选择的，看不见的20％数据。测试数据集有助于防止模型过度拟合训练数据（图2d）。&lt;&#x2F;p&gt;
&lt;p&gt;在下文中，我们介绍了用于从HV进行光谱正向预测的网络结果（图4），以及根据给定的物理可行SPEC规范反向设计HV（图5）。首先，我们测试网络的正向计算，以查看未训练网络的拓扑的频谱响应的预测。有趣的是，该网络可以非常准确地预测透射光谱和反射光谱（图4和5）。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-03-16-15-35-14.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图4 使用深ResNet进行频谱近似。我们使用16,000（占总数的80％）输入数据进行培训，并使用4,000（占总数的20％）数据进行测试。 a，b和c是三个代表功率分配器的ResNet预测光谱响应与数字验证光谱响应的比较。黑色，蓝色和红色分别表示在端口1传输，在端口2传输和在输入端口反射。实线是给定孔向量的真实值，虚线是使用ResNet预测的光谱响应。&lt;&#x2F;center&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-03-16-15-36-17.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图5 相关系数。将ResNet的预测传输值与端口1（a）和端口2（b）的真实传输值进行拟合。在整个传动比范围（0到1）中，相关系数R都高于0.995，并且随着传动比的增加，趋近于1。灰色圆圈符号大小与梯度不确定度成正比。&lt;&#x2F;center&gt;
&lt;p&gt;为了量化预测精度，我们使用了一个相关图，该图将真实的数字验证光学响应与DNN预测进行了比较。 DNN预测的相关系数高于99％（图5）。我们使用负对数似然成本函数的方差作为确定神经网络置信度的一种手段，并将其显示为相关图中预测不确定性的面积。我们观察到预测的置信度在较低的传输方式下较低，而在较高的传输方式下则提高。这是可以预期的，因为训练数据主要包含高传输设备（图2d）&lt;&#x2F;p&gt;
&lt;p&gt;我们通过使用SPEC作为数据并使用HV作为标签，并对反向网络进行逆向优化来对与上述相同的数据进行逆向建模测试。为了测试网络的泛化能力，我们研究了网络在任意和不熟悉的情况下的逆设计性能。为此，我们生成了一个包含每个端口的宽带常数传输值的参考表，并将它们用作逆向设计DNN模型的输入数据批。伯努利分布分类器的预测HV可以取0到1之间的任何值。随着训练次数的增加，损耗减少，分类收敛到0或1。生成的量化二进制序列包含未训练模型的特征（补充图2），然后将这些特征反馈到数值求解器中以评估预测性能。下一步，我们运行独立的FDTD模拟以检查响应的有效性（图6）。对于1：1、1：1.05、1：1.5、1：1.55、1：1.55、1：2、1：2.5、1：3和1：3.5的8种分光比，在1550 nm中心波长处的数值模拟电场传播显示出各种基于经典MMI的分束器的功率分配机制。 1：1和1:05分裂时的电场分布强度几乎是对称的。另一方面，对于不对称的分光比器件，电场强度是不对称的（如预期的那样），并且对于具有较大输出T2的一侧，光束路径会变宽。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-03-16-15-37-10.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图6 DNN逆向设计演示。我们将ResNet DNN逆向设计用于90％高效功率分配器。在这里，我们显示了8个代表性的设备，它们从a到h的分配比例分别为1：1、1：1.05、1：1.5、1：1.55、1：2、1：2.5、1：3和1：3.5。光谱响应图显示，预测的二进制模式的经过数值验证的透射和反射光功率（虚线）与目标宽带光谱（实线）非常匹配。使用FDTD仿真计算在1,550 nm处运行的每个设备的电磁能量密度图（右）。&lt;&#x2F;center&gt;
&lt;p&gt;Ab和cd对的目标光谱响应的预测拓扑显示相似光谱响应的不同外观模式。这是有道理的，因为可以为单个电磁问题提供多种解决方案。针对每种模式，演示了通过预测的功率分配器进行的FDTD模拟光功率传播。在图6所示的所有八种情况下，传输效率均超过90％，据我们所知，这是集成功率分配器中展示的最高传输效率。这也是第一次考虑最小化反射。尽管我们的目标并不是最大程度地提高工作带宽，但我们的功率分配器显示出1450至1650 nm之间的宽带传输。此外，我们将1550 nm波长的反射目标设置为-20 dB。除了图6c的情况外，我们在1550 nm处实现的反射响应小于-20 dB。图6所示的预测反射响应和实际反射响应出现明显差异的主要原因是因为光谱响应以对数刻度显示。实际上，差异很小。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;讨论&quot;&gt;讨论&lt;&#x2F;h2&gt;
&lt;p&gt;NN可用于获取设备结构数据（形状，深度和介电常数）以预测纳米结构的光学响应（正向网络）。在这种情况下，可以将NN用作快速近似光学响应的方法，而不是使用计算量大的数值方法。使用NN的另一种方法（在常规数值方法中不可用）是将光学响应作为输入并为用户提供近似的解决方案纳米结构（逆设计）。尽管DNN最初出于训练目的需要大量数据集，但可以在计算集群上并行处理多个启发式优化指标，以加快生成训练数据的速度。一旦对网络进行了训练以将拓扑表示为光学响应，反之亦然，则可以在几分之一秒内设计出纳米结构。&lt;&#x2F;p&gt;
&lt;p&gt;我们利用ResNet DNN架构来使用其他身份功能，以允许平滑地向前和向后传播渐变。这使我们可以将网络深度增加到8层。我们观察到，对于10×100结构（10层深和100个神经元宽），ResNet DNN中仍然存在一些过拟合问题。由于从数据中学习到的参数数量取决于DNN中神经元的数量，因此10×100具有训练期间学习到的最大参数数量。尽管这在训练过程中提供了良好的性能，但会导致数据过拟合。可以在DNN中包括Dropout，以进行正则化并进一步增加隐藏层的深度；但是，这留作以后的工作。&lt;&#x2F;p&gt;
&lt;p&gt;总之，我们已经证明了DNN在纳米结构集成光子组件设计中的应用。尽管针对此问题的设计空间非常大（2400种可能的组合），但是通过使用近20,000个模拟数据训练DNN，我们训练了一个网络，该网络可以在此设计空间内近似任意孔向量的光谱响应。此外，我们可以使用逆网络为任何用户特定的功率分配比设计几乎优化的功率分配器拓扑。 DNN预测拓扑光学响应的能力和逆设计在纳米结构光子系统的设计中广泛使用这些网络中具有前景。图3：普通FCDNN（a）和ResNet DNN（b ）用于集成纳米光子学的逆向设计。我们在两种网络体系结构中都使用了S型（σ）激活函数。 FCDNN的深度增加并不一定会改善性能。 ResNet旨在使用附加的身份功能来通过增加网络深度来实现准确性。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;方法&quot;&gt;方法&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;数值仿真&quot;&gt;数值仿真&lt;&#x2F;h3&gt;
&lt;p&gt;我们使用Lumerical的FDTD仿真包来生成训练数据。数据包含20,000多个数值模拟，其中每个实验都是由无源SOI波导和分束器设备组成的3D FDTD模拟。分束器的初始随机孔位置矩阵是使用MATLAB自动化生成，导出和处理的。孔位置生成脚本使用不同的算法（例如直接二进制搜索），初始条件和优化指标来依次创建设备结构的可靠神经网络表示所需的足够大的数据集。一台配备了Core i7 CPU（时钟频率为3.7 GHz）和64 GB RAM的台式计算机花了大约两周的时间才能完成20,000个仿真数据的收集。&lt;&#x2F;p&gt;
&lt;p&gt;宽带模拟在1.45-1.65μm范围内的所有模拟中均使用了文献41中硅和二氧化硅的色散折射率。输入源使用1550 nm的基本TE模式，记录TE模式的输出功率以进行透射和反射。我们注意到TM模式的输出低于10−5。图4.使用深ResNet的频谱近似。我们使用16,000（占总数的80％）输入数据进行培训，并使用4,000（占总数的20％）数据进行测试。 a，b和c是三个代表功率分配器的ResNet预测光谱响应与数字验证光谱响应的比较。黑色，蓝色和红色分别表示在端口1传输，在端口2传输和在输入端口反射。实线是给定孔矢量的真实值，虚线是使用ResNet预测的光谱响应图5相关系数。将ResNet的预测传输值与端口1（a）和端口2（b）的真实传输值进行拟合。在整个传动比范围（0到1）中，相关系数R都高于0.995，并且随着传动比的增加，趋近于1。灰色圆圈符号大小与梯度不确定度成正比。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;深度神经网络（DNN）&quot;&gt;深度神经网络（DNN）&lt;&#x2F;h3&gt;
&lt;p&gt;我们使用python语言使用Tensorflow的开源机器学习框架来构建和测试我们的深度神经网络。训练神经网络模型的运行时间取决于网络和训练参数，包括数据大小，隐藏层深度和宽度，批处理大小和时期数。训练神经网络模型的运行时间取决于网络和训练参数，包括数据大小，隐藏层深度和宽度，批处理大小和时期数。对于代表性的网络参数，隐层宽度为100，隐层深度为8，批处理大小为100，历元数为10,000，并经过20,000个数据训练，如图2d所示，它需要1337秒（〜22分钟）训练模型。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;补充图片&quot;&gt;补充图片&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-03-16-15-55-05.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图S1：我们用一组不同的数据训练网络，每组数据都从初始条件，蚀刻的孔密度和各种指标开始，以优化光谱响应。我们使用透射标签生成约20,000个蚀刻的孔向量数据。在这里，我们显示了四组这些数据：&lt;&#x2F;center&gt;
&lt;p&gt;a）蚀刻孔在分束器盒中的随机放置
b）不对称搜索优化以使用随机初始向量最大化T1
c）对称搜索以使用模式化的初始向量最大化min（T1）+ min（T2）-4 * max（abs（R））
d）通过图案化的初始孔向量使非对称搜索最大化min（T1）+ min（T2）abs（min（T1）2 * min（T2））&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-03-16-15-57-24.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图S2：比较6种不同分割率下具有相似分割率（SPEC）的预测模式和训练模式（HV）。预测孔向量的元素可以具有0到1之间的数字（预测HV）。我们通过将大于中点的数字四舍五入并小于中点的数字四舍五入来量化此向量（量化预测），然后将其返回到数值求解器以计算图案化功率分配器的频谱响应。接下来，我们找到与真实响应（所需响应）最接近的光谱响应，并显示其对应的HV（最接近的HV）。这些结果表明，训练后的模型没有存储训练数据。&lt;&#x2F;center&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>使用条件深度卷积生成对抗网络设计纳米光子结构 论文翻译</title>
        <published>2020-02-08T00:00:00+00:00</published>
        <updated>2020-02-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/2020-2-9-论文翻译《使用条件深度卷积生成对抗网络设计纳米光子结构》/"/>
        <id>https://bbpp222006.github.io/2020-2-9-论文翻译《使用条件深度卷积生成对抗网络设计纳米光子结构》/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/2020-2-9-论文翻译《使用条件深度卷积生成对抗网络设计纳米光子结构》/">&lt;h1 id=&quot;使用条件深度卷积生成对抗网络设计纳米光子结构&quot;&gt;使用条件深度卷积生成对抗网络设计纳米光子结构&lt;&#x2F;h1&gt;
&lt;p&gt;Sunae So and Junsuk Rho*
https:&#x2F;&#x2F;doi.org&#x2F;10.1515&#x2F;nanoph-2019-0117&lt;br &#x2F;&gt;
Received   April 16, 2019; revised May 20, 2019;accepted May 22, 2019 &lt;&#x2F;p&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;&#x2F;h2&gt;
&lt;p&gt;纳米光子学已经引入了基于深度学习的数据驱动设计方法，以减少耗时的迭代仿真，这是一个重大挑战。在这里，我们报告了条件深层卷积生成对抗网络（cdcgan）的首次使用，以设计不受限于预定形状的纳米光子天线。对于给定的输入反射光谱，网络以图像的形式生成理想的设计。这样就可以产生网络生成新的结构，而这些结构不能用结构参数来表示。从生成的设计获得的仿真结果与输入反射光谱非常吻合。通过为设计具有所需光学特性的复杂纳米光子结构提供一种快速便捷的方法，该方法为纳米光子学的发展开辟了新途径。&lt;br &#x2F;&gt;
关键词：纳米光子学；逆设计；条件深度卷积生成对抗网络；深度学习。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1.引言&quot;&gt;1.引言&lt;&#x2F;h2&gt;
&lt;p&gt;纳米光子学的进步已经发掘了许多非凡的光​​学特性，例如掩盖物体，超出衍射极限的成像和负折射率。在纳米光子学中，亚波长天线与光相互作用，因此精确设计的组件可以提供有用的功能。尽管已经介绍了几种针对所需光学行为的系统设计方法，但纳米光子结构逆设计的程序仍主要依靠费力的优化方法。这种传统的设计方法需要耗时的迭代仿真。&lt;&#x2F;p&gt;
&lt;p&gt;最近，已经提出了数据驱动的设计方法来克服这个问题。这些方法使用人工神经网络（NNs）设计纳米光子学结构。先前的研究首先设置要预测的结构的形状，例如多层或H天线，然后训练有素的NN提供实现所需光学特性的输出结构参数。训练完NN后，它们将提供相应的设计参数，而无需其他迭代仿真。这样的尝试大大减少了设计纳米光子结构的工作量和计算成本。到目前为止，这些方法仅适用于预定义基本结构的情况，其中只有结构参数是可预测的。最近，生成对抗网络（GAN）模型已被用于逆向设计元表面，以便提供任意模式的纳米结构。&lt;&#x2F;p&gt;
&lt;p&gt;在本文中，我们提供了条件深层卷积生成对抗网络（cDCGAN）的首次使用来设计纳米光子结构。 cDCGAN是最近开发的用于解决GAN不稳定性问题的算法，并且提供了非常稳定的Nash平衡解。生成的设计以图像形式呈现，因此它们为所需的光学特性提供了基本上任意的可能设计，而不仅限于特定结构。我们的研究提供了在500 nm×500 nm范围内的64×64像素概率分布函数（PDF）的设计，这允许2&lt;sup&gt;64×64&lt;&#x2F;sup&gt;的设计自由度&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2.结论与讨论&quot;&gt;2.结论与讨论&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;2.1_深度学习过程&quot;&gt;2.1 深度学习过程&lt;&#x2F;h3&gt;
&lt;p&gt;对于深度学习，我们首先收集一个数据集，该数据集由10,150个银天线组成，具有六个代表性形状（圆形，正方形，十字形，蝴蝶，H形和V形）。数据集中的每个条目都由一个具有200个光谱点的反射光谱及其对应的具有64×64像素图像的横截面结构设计组成。 x和y方向均使用64个粗网格以进行简单计算。横截面结构设计以图像形式准备，其物理畴尺寸为500 nm×500 nm。将厚度为30 nm的天线放在50 nm MgF2垫片，200 nm银反射器和硅基板上（图1）。为了获得每个结构的反射光谱，使用商业程序FDTD Lumerical Solutions进行了有限差分时域（FDTD）电磁仿真。在f = 250–500 THz的整个光谱范围内进行仿真，并提取了200个光谱点。沿x和y方向使用周期性为500 nm的周期性边界条件，沿z方向使用完全匹配的边界条件。在每个模拟中，y偏振光以0入射角入射到天线上。当前的深度学习设置解决了在固定物理域和固定波长下的设计结构问题。若设计具有不同周期性或波长的结构则需要额外的数据收集或深度学习程序。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-02-09-14-41-27.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图1 数据集中的每个条目均由FDTD仿真获得的反射光谱及其相应的截面结构设计组成。&lt;&#x2F;center&gt;    
&lt;p&gt;下一步，我们使用Pytorch框架实现深度学习算法。最近，人工智能已经彻底改变了计算机视觉领域。卷积神经网络（CNN）是受人脑自然视觉感知机制启发而使用最广泛的技术。 CNN使用卷积运算符从输入数据中提取特征，这些特征通常是图像。因为每个通道都提取图像的重要特征，所以它大大提高了图像识别的效率。另一方面，GAN的发展导致了计算机视觉的重大进步。 GAN由生成图像的生成器网络（GN）和将生成的图像与真实图像区分开的鉴别器网络（DN）组成。训练GN生成真实的图像来欺骗DN，并且训练DN使其不被GN欺骗。这两个网络在每个训练步骤中都相互竞争；最终，竞争导致了每个网络的相互改善，因此GN可以生成比单独学习时更高质量的逼真的图像。 DCGAN结合了CNN和GAN的思想，提供了非常稳定的Nash平衡解决方案。我们采用cDCGAN算法，在这种情况下可以将反射光谱作为可控的条件输入。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-02-09-15-04-17.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图2 cDCGAN架构的结构设计示意图。GN由反卷积组成以生成结构图像，而DN由常规的CNN组成以将目标结构设计与生成的设计区分开。根据Radford等人的指南，每一层都引入了非线性激活函数（ReLU，Tanh，Leaky ReLU和Sigmoid）。&lt;&#x2F;center&gt;    
&lt;p&gt;图2显示了设计纳米光子结构的cDCGAN两个网络的体系结构：GN会生成结构横截面图像，而DN会将GN所生成的图像与用户指定的目标设计组区分开。 GN由四个转置的CNN层组成，分别由1024、512、256、128和1个通道组成； DN是具有四层的CNN。 GN接收100×1大小的随机噪声（z）和200×1大小的输入频谱的输入。 GN提供了从随机噪声生成的天线的概率分布函数（PDF）作为输出。输入光谱引导GN生成具有此类光学特性的PDF。相反，DN从用户提供的目标设计组（x）或GN，GN（z）生成的PDF图像中获取结构图像作为输入。 DN的作用是将GN（z）与目标设计组区分开。最终，对GN和DN进行竞争性同时培训：训练GN生成真实的结构设计以欺骗DN，并且训练DN区分目标设计与GN生成的设计。在数学上，对GN和DN的训练方向是最小化或最大化目标函数&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
\min &lt;em&gt;{\mathrm{GN}} \max &lt;em&gt;{\mathrm{DN}} l(\mathrm{DN}, \mathrm{GN})=&amp;amp; E&lt;&#x2F;em&gt;{\mathrm{x}\leftarrow p&lt;&#x2F;em&gt;{\mathrm{data}}(x)}[\log \mathrm{DN}(x)] \
&amp;amp;+E_{z \sim P_{z}(z)}[\log (1-\mathrm{DN}(\mathrm{GN}(z)))]
\end{aligned} \qquad (1)
$$&lt;&#x2F;p&gt;
&lt;p&gt;其中DN（x）表示来自目标设计组（x）的结构图像的概率，而DN（GN（z））表示由GN生成的设计图像G（z）的概率。就DN而言，网络经过训练以针对来自目标设计的给定图像使用$E_{\mathrm{x} \leftarrow P_{\text {data }}(x)}[\log \mathrm{D} \mathrm{N}(x)]$给出E的最大期望值，以及$E_{z\sim p_{z}(z)}[\log (1-\mathrm{DN}(\operatorname{GN}(z)))]$对于GN生成的给定图像。另一方面，训练GN给出最小的期望值来欺骗DN。这种对抗训练使GN可以生成高质量的结构图像。&lt;br &#x2F;&gt;
除了对抗训练之外，我们还进一步修改了cDCGAN中GN的损失函数以适应我们的问题&lt;&#x2F;p&gt;
&lt;p&gt;$$
l_{\mathrm{GN}}=(1-\rho) \times l_{\mathrm{GN}, \mathrm{design}}+\rho \times l_{\mathrm{GN}, \mathrm{adv}} \qquad(2)
$$&lt;&#x2F;p&gt;
&lt;p&gt;其中$l_{\text {GN design }}$是设计损失，$l_{\text {GN adv }}$是等式(1)中定义的对抗性损失。$\rho$是对抗损失的比值。引入设计损失是为了明确指导GN很好地生成结构图像。它使用二元交叉熵准则直接测量目标设计$\left(x_{i}\right)$和生成的设计$\left(\hat{x}_{i}\right)$的两个概率分布之间的定量差异。&lt;&#x2F;p&gt;
&lt;p&gt;$$
l_{\text {GN.design }}=-\left(x_{i} \log \sigma\left(\hat{x}&lt;em&gt;{i}\right)+\left(1-x&lt;&#x2F;em&gt;{i}\right) \log \left(1-\sigma\left(\hat{x}_{i}\right)\right)\right)\qquad(3)
$$&lt;&#x2F;p&gt;
&lt;p&gt;其中σ是Sigmoid函数。&lt;&#x2F;p&gt;
&lt;p&gt;我们优化了ρ，以使GN生成高质量的现实设计。对于低ρ，无法预期竞争效果，而高ρ会导致学习过程混乱。因此，选择合适的ρ= 0.5值可最大程度地提高GN产生令人信服的结构设计的能力。在每个训练步骤中，对网络进行训练以优化权重，以描述输入频谱和PDF之间的映射（有关深度学习过程和网络优化的详细信息，请参阅支持信息）。&lt;&#x2F;p&gt;
&lt;p&gt;经过训练后，cDCGAN建议在64×64像素PDF $p(i, j)$上进行设计，这表示在位置$(i, j)$上存在银色天线的可能性。为了将PDF简化为表示该位置存在天线的二进制图像，我们根据Otsu采用了后处理步骤。该方法确定将黑白像素的类内方差$\sigma_{\omega}^{2}$最小化的二进制阈值t为&lt;&#x2F;p&gt;
&lt;p&gt;$$
\sigma_{\omega}^{2}(t)=\omega_{0}(t) \sigma_{0}^{2}(t)+\omega_{1}(t) \sigma_{1}^{2}(t)
$$&lt;&#x2F;p&gt;
&lt;p&gt;其中ω0和ω1代表用t分隔的两类概率的权重，$\sigma_{0}^{2}$是黑色像素的方差，$\sigma_{1}^{2}$是白色像素的方差。总之，对于给定的反射光谱，cDCGAN生成PDF，然后在后期处理步骤中将其转换为二进制设计图像。在每个训练步骤中，将使用2000个验证样本来验证训练后的网络。经过1000个训练步骤后，验证集的平均损失收敛为$5.564 \times 10^{-3}$。使用GTX 1080-Ti的单个GPU，训练网络一个时期大约需要4分钟。但是，一旦对网络进行了训练，训练后的网络就可以在3 s内生成所需频谱的设计。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2.2_网络评估&quot;&gt;2.2 网络评估&lt;&#x2F;h3&gt;
&lt;p&gt;训练有素的cDCGAN会根据先前训练或验证步骤中未使用的测试数据进行评估。随机选择的测试结果如图3所示。各种纳米光子天线的目标设计（图3的右上方）和相应的建议PDF（图3的右下方）显示出良好的定性一致性。为了对建议的PDF进行定量评估，基于这些建议的设计进行了FDTD仿真。将PDF转换为二进制设计，然后将其导入仿真中。建议图像的反射光谱与给定的输入光谱非常吻合。我们介绍了平均绝对误差（MAE）准则&lt;&#x2F;p&gt;
&lt;p&gt;$$
l_{\text {error }}=\frac{1}{n} \sum_{i=1}^{n}\left|Y_{i}-\hat{Y}_{i}\right|
$$&lt;&#x2F;p&gt;
&lt;p&gt;以定量测量从建议设计获得的FDTD模拟结果$\left(Y_{i}\right)$与最初馈入网络的输入光谱$\left(\hat{Y}_{i}\right)$之间的每个光谱点的反射光谱的平均误差。 12个测试样本的平均MAE误差为0.0322，这表明受过训练的网络可以实质上提供具有所需反射光谱的适当结构设计。有趣的是，即使天线具有相似的形状，如图3的第二列和底行所示，预测的频谱与输入的频谱也可能存在差异。这是由于所提供的PDF中的伪影较小。可以在后处理步骤中使用其他图像过滤器除去这些伪像（有关对后处理的影响，请参阅支持信息）。
&lt;img src=&quot;..&#x2F;images&#x2F;2020-02-09-15-48-00.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图3 cDCGAN生成的图像的十二个示例及其仿真结果。每个面板均由反射光谱及其对应的结构横截面图像组成。右上的结构图像是目标设计（黑色），右下的图像是cDCGAN的建议图像（红色）。左侧的光谱显示了我们输入到网络中的所需输入光谱（黑色实线）以及从建议的设计中获得的预期响应（红色虚线）。&lt;&#x2F;center&gt;    
&lt;p&gt;我们还使用全新的三角形和星形触角结构测试了cDCGAN，其形状在训练和验证数据集中不存在（图4A，B）。 cDCGAN产生了新的设计，这些设计扭曲了天线的形状，用于训练。结果表明，我们的cDCGAN可以建议任何不受结构参数约束的设计。生成的图像与目标设计不同，但是生成的反射光谱类似于输入的反射光谱。这是由于光学特性和设计之间的相关性不唯一：几个不同的设计可以具有相同的光学特性。在几种可能的设计中，结果最有可能出现在与训练后的数据集空间相差不大的区域。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;2020-02-09-15-54-46.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图4 全新结构的cDCGAN建议结果使用了从未训练过的形状的（A）三角形和（B）星形触角的新结构。第一列是所需设计的目标，第二列是cDCGAN建议的PDF。最后一列分别显示输入的反射光谱（黑色实线）和从建议的设计获得的模拟结果（红色虚线）&lt;&#x2F;center&gt;    
 &lt;br &#x2F;&gt; 
&lt;p&gt;最后，我们用随机生成的，手绘的类似于Lorentzian函数的光谱对cDCGAN进行了进一步测试（牛逼）&lt;&#x2F;p&gt;
&lt;p&gt;$$
f(x)=\frac{2 a}{\pi} \frac{c}{4(x-b)^{2}+c^{2}}
$$&lt;&#x2F;p&gt;
&lt;p&gt;我们使用了四种情况的参数设置：（A）a = 120，b = 900，c = 150，（B）a = 70，b = 850，c = 70，（C）a = 100，b = 1150，c = 70和（D）a = 80，b = 900，c = 80。对于每种情况，生成的图像及其对应的反射光谱如图5所示。四个示例的反射光谱的MAE为(a) 0.0496, (b) 0.0396, (c) 0.0409 (d) 0.0408。预测的响应在整体行为方面显示出与输入频谱合理的良好一致性。最有趣的是，生成的图像（图5A–D中的插图）与用于训练的形状有很大差异。这种特殊的结构形状不受预定义结构的限制，甚至是不可描述的。这是我们的方法相对于以前的方法的主要优点，后者只能建议给定的结构参数。结果还表明，cDCGAN实际上很好地学习了结构设计与其总体光学响应之间的相关性，因此可以广泛用于系统地设计纳米光子结构。
&lt;img src=&quot;..&#x2F;images&#x2F;2020-02-09-16-01-52.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;center&gt;图5 手绘光谱的cDCGAN建议结果。（A）a = 120，b = 900，c = 150，（B）a = 70，b = 850，c = 70，（C）a = 100，b = 1150，c = 70，（D）a = 80，b = 900，c =80。每个图中的插图显示了cDCGAN建议的PDF。黑色实线表示输入到网络的类似于Lorentzian的输入函数，红色虚线表示从建议的PDF获得的仿真结果。&lt;&#x2F;center&gt;   
&lt;h2 id=&quot;3.结论&quot;&gt;3.结论&lt;&#x2F;h2&gt;
&lt;p&gt;最后，我们证明了cDCGAN首次用于设计纳米光子结构。 cDCGAN中的GN和DN这两个网络竞争性地学习建议具有所需光学反射特性的纳米光子结构的适当设计。我们的cDCGAN不仅限于建议预定义的结构，还可以生成新的设计。它具有$2^{64 \times 64}=2^{4096}$自由度的多种设计可能性。当前设计中使用的7.8 nm像素大小使得很难在此分辨率下制造建议的设计。可以通过将像素尺寸增加到20–30 nm的可行制造规模来克服这种制造困难。在这里，我们将输入限制为单个反射光谱。如果使用具有多个衍射级的多路复用输入光谱，则该方法还可以扩展到可能出现其他衍射级的衍射方案中。由于所使用的训练数据集的限制，并非总是能够生成具有非凡反射光谱的结构图像。通过收集可以代表异常反射光谱的其他数据可以克服这种弱点。尽管我们的示例设置了每一层的厚度和天线的材料类型，但也可以将它们添加为建议的输出参数。这种修改将允许人工智能完全独立地用于设计纳米光子器件，从而大大减少手动设计纳米光子器件的时间和计算成本。我们相信，我们的研究成果将通过解决结构设计的主要问题而导致纳米光子学的快速发展。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4.补充材料&quot;&gt;4.补充材料&lt;&#x2F;h2&gt;
&lt;p&gt;补充材料可在期刊网站或从作者处获得。&lt;br &#x2F;&gt;
本文的网络版本提供补充材料（https:&#x2F;&#x2F;doi.org&#x2F;10.1515&#x2F;nanoph-2019-0117）
&lt;strong&gt;致谢&lt;&#x2F;strong&gt;：This  work  was  financially  supported  by   the   National   Research   Foundation   grants   (NRF-2017R1E1A1A03070501,   NRF-2019R1A2C3003129,   CAMM-2019M3A6B3030637,        NRF-2018M3D1A1058998,        and        NRF-2015R1A5A1037668) funded by the Ministry of Science and  ICT,  Korea.  S.S.  acknowledges  a  global  Ph.D.  fellow-ship (NRF-2017H1A2A1043322) from the NRF-MSIT, Korea.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>python科学计算环境搭配踩坑记</title>
        <published>2019-12-28T00:00:00+00:00</published>
        <updated>2019-12-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/python科学计算环境搭配踩坑记/"/>
        <id>https://bbpp222006.github.io/python科学计算环境搭配踩坑记/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/python科学计算环境搭配踩坑记/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;del&gt;可能，马上，应该要招新了，组长要我写个教程，我也正好记录一下关于这块的环境配置。&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果你是一名研究人员，或是一名对新兴事物感兴趣的极客，相信这套环境可以对你的工作提升极大的研究效率。&lt;&#x2F;p&gt;
&lt;p&gt;环境主要围绕 python，深度学习，大数据，爬虫等方面展开。即需要对数据进行直观的操作，显示，依赖于各种软件包（脚本小子），频繁的切换窗口比对数据等。&lt;&#x2F;p&gt;
&lt;p&gt;希望这篇博客能帮助你少走一些弯路，如果有更好的想法，欢迎在下面留言。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;正文&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;环境安装&quot;&gt;环境安装&lt;&#x2F;h2&gt;
&lt;p&gt;注意！&lt;strong&gt;首先将电脑系统内的 python 卸载，就是直接从&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;python 官网&lt;&#x2F;a&gt;下载的那个。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;原因：后续所有关于包管理的操作将在 anaconda 的虚拟环境中进行，而在导入 pycharm 虚拟环境时可能会与系统环境内部的 python 解释器相冲突。 所以希望各位在装环境前能有一个相对干净的 python 环境。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;anaconda_安装&quot;&gt;anaconda 安装&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;首先官网安装&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.anaconda.com&#x2F;&quot;&gt;anaconda&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;..&#x2F;images&#x2F;mk-2019-12-28-14-19-23.png&quot; alt=&quot;&quot; &#x2F;&gt;这个选项要勾上，保证以后系统默认的 python 是 anaconda 内部的，方便以后管理。另一选项不用勾，英语好的可以自行分析。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pycharm_安装&quot;&gt;pycharm 安装&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;pycharm&#x2F;&quot;&gt;官网&lt;&#x2F;a&gt;安装（有华科邮箱的可以免费使用专业版本，没有的可以下载社区版本，感觉现阶段没什么区别……）&lt;&#x2F;li&gt;
&lt;li&gt;下载专业版本的同志可以在官网去注册，记得用学校邮箱，注册完后后会发个激活码到你的邮箱，打开专业版用这个码激活就行。也可以软件直接登录注册的账号，自动激活。&lt;&#x2F;li&gt;
&lt;li&gt;没邮箱却想用专业版的同志可以：1，去主校区的网络中心怼人，叫管校园网的那帮伙计把你邮箱激活。2，网上找个方法破解。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;环境配置&quot;&gt;环境配置&lt;&#x2F;h2&gt;
&lt;p&gt;请各位老哥跟着以下的步骤依次进行&lt;&#x2F;p&gt;
&lt;p&gt;以安装 pytorch 为例,我们将新建一个名为 torch 的 conda 虚拟环境并将环境导入 pycharm,jupyter lab&lt;&#x2F;p&gt;
&lt;h3 id=&quot;换源&quot;&gt;换源&lt;&#x2F;h3&gt;
&lt;p&gt;墙最近又变高了，没有国内镜像基本啥都下不动，感谢国内的各所高校做出的贡献。&lt;del&gt;华科有 kali 的镜像，没想到吧！&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;conda_换源&quot;&gt;conda 换源&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;help&#x2F;anaconda&#x2F;&quot;&gt;清华官方教程&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;注意，网上csdn之类的教程没有更新，请根据最新的官方方法进行修改&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;pip_换源&quot;&gt;pip 换源&lt;&#x2F;h4&gt;
&lt;p&gt;因为以后装包主要使用 conda,pip 尽量别使用(&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;python%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E7%8E%AF%E5%A2%83%E6%90%AD%E9%85%8D%E8%B8%A9%E5%9D%91%E8%AE%B0&#x2F;#conda%E5%92%8Cpip%E7%9A%84%E5%8C%BA%E5%88%AB&quot;&gt;conda和pip的区别&lt;&#x2F;a&gt;)&lt;br &#x2F;&gt;
conda 无法完成安装时才使用 pip,因此就在这里介绍临时方法&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;pip 后加参数 -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;例1：pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple pandas
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;例2：我想安装tensorflow-gpu1.4.1,执行：
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple tensorflow-gpu==1.4.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;anaconda_配置&quot;&gt;anaconda 配置&lt;&#x2F;h3&gt;
&lt;p&gt;打开 anaconda prompt&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 先在base环境安装jupyter lab的相关包
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;conda install jupyterlab
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;conda install nb_conda
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 新建一个名为torch的py3.7虚拟环境
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;conda create -n torch python=3.7
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 进入torch环境
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;activate torch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;开始安装各种包 ,pytorch 的安装在官网有命令&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pytorch.org&#x2F;get-started&#x2F;locally&#x2F;&quot;&gt;链接&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ps:有老黄家显卡的可以选择包含 cuda 的版本,pytorch 安装与 tensorflow 不同,不需要专门下载 cuda,只需要显卡驱动更新就行&lt;&#x2F;p&gt;
&lt;p&gt;&lt;del&gt;从官网复制命令时记得将最后的 -c pytorch 去掉,才能享受清华源的高速&lt;&#x2F;del&gt;&lt;br &#x2F;&gt;
-c pytorch 现在不要删，
各位同志可以查一下 conda -c 这个命令的作用&lt;br &#x2F;&gt;
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;7ebe1df808ba&quot;&gt;conda命令的一些常用用法&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 安装pytorch(写博客时的官网命令,装的是含cuda的版本,各位最好去官网使用最新的命令)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;conda install pytorch torchvision cudatoolkit=10.1 -c pytorch
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 安装各类必要包,只是举例,可以按需下载
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;conda install matplotlib
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;conda install scikit-learn
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;conda install scipy
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 安装虚拟环境下的jupyter依赖包
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;conda install ipykernel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;pycharm配置&quot;&gt;pycharm配置&lt;&#x2F;h3&gt;
&lt;p&gt;打开软件后找个你喜欢的地方新建一个project&lt;br &#x2F;&gt;
解释器选择已存在的anaconda虚拟环境&lt;br &#x2F;&gt;
&lt;img src=&quot;..&#x2F;images&#x2F;mk-2019-12-28-20-08-37.png&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;..&#x2F;images&#x2F;mk-2019-12-28-20-09-20.png&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;..&#x2F;images&#x2F;mk-2019-12-28-20-10-03.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;br &#x2F;&gt;
最后一个步骤选择安装anaconda所在位置的文件夹,内部的env文件夹内找到刚创建的torch环境&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jupyter_lab配置&quot;&gt;jupyter lab配置&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;此为选择项, 因为jupyter lab的社区并不完善,可能在配置过程中出现各种玄学问题,所以初学者可以不用jupyter lab&lt;&#x2F;strong&gt;
anaconda prompt 中输入&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;jupyter lab --generate-config
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 输入命令后会在下方显示config文件的路径
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;打开jupyter_notebook_config.py文件编辑,添加以下语句&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;c.NotebookApp.notebook_dir = &amp;#39;C:\jupyter&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 用一个自己喜欢的文件夹就好,代表jupyter打开后默认所在的目录
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;懒得重复造轮子了,贴个博客,各位看着办……&lt;br &#x2F;&gt;
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;lskreno&#x2F;p&#x2F;10844315.html&quot;&gt;插件配置&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;补充知识&quot;&gt;补充知识&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;conda和pip的区别&quot;&gt;conda和pip的区别&lt;&#x2F;h3&gt;
&lt;p&gt;Conda和pip通常被认为几乎完全相同。虽然这两个工具的某些功能重叠，但它们设计用于不同的目的。 Pip是Python Packaging Authority推荐的用于从Python Package Index安装包的工具。 Pip安装打包为wheels或源代码分发的Python软件。后者可能要求系统安装兼容的编译器和库。&lt;&#x2F;p&gt;
&lt;p&gt;Conda是跨平台的包和环境管理器，可以安装和管理来自Anaconda repository以 Anaconda Cloud的conda包。 Conda包是二进制文件，徐需要使用编译器来安装它们。另外，conda包不仅限于Python软件。它们还可能包含C或C ++库，R包或任何其他软件。&lt;&#x2F;p&gt;
&lt;p&gt;这是conda和pip之间的关键区别。 Pip安装Python包，而conda安装包可能包含用任何语言编写的软件的包。在使用pip之前，必须通过系统包管理器或下载并运行安装程序来安装Python解释器。而Conda可以直接安装Python包以及Python解释器。&lt;&#x2F;p&gt;
&lt;p&gt;另一个区别是conda能够创建可以包含不同版本的Python或其他软件包的隔离环境。在使用数据科学工具时，这非常有用，因为不同的工具可能包含冲突的要求，这些要求可能会阻止它们全部安装到单个环境中。 Pip没有内置的环境支持，而是依赖于virtualenv或venv 等其他工具来创建隔离环境。 pipenv，poetry和hatch wrap pip和virtualenv等工具提供了统一的方法来处理这些环境。&lt;&#x2F;p&gt;
&lt;p&gt;Pip和conda在如何实现环境中的依赖关系方面也有所不同。安装包时，pip会在递归的串行循环中安装依赖项。没有努力确保同时满足所有包的依赖性。如果较早安装的软件包与稍后安装的软件包具有不兼容的依赖性版本，则可能导致破坏的环境。conda使用可确保满足环境中安装的所有包的所有要求。此检查可能需要额外的时间，但有助于防止创建破坏的环境，前期关于依赖关系包的元数据是正确的。&lt;&#x2F;p&gt;
&lt;p&gt;考虑到conda和pip之间的相似性，有些人试图将这些工具结合起来创建数据科学环境也就不足为奇了。将pip与conda结合的主要原因是有些包只能通过pip安装。 Anaconda创酷提供超过1,500个软件包，包括最流行的数据科学，机器学习和AI框架。这些，以及包括conda-forge和bioconda在内的数据通过Anaconda云提供的数千个附加软件包，可以使用conda进行安装。尽管有大量的软件包，但与PyPI上提供的150,000多个软件包相比，它仍然很小。有时候需要的包没有conda包，但在PyPI上有，可以用pip安装。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>factorio服务器搭建</title>
        <published>2019-10-31T00:00:00+00:00</published>
        <updated>2019-10-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/factorio服务器搭建记录/"/>
        <id>https://bbpp222006.github.io/factorio服务器搭建记录/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/factorio服务器搭建记录/">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;以前尝试过mc以及饥荒的服务器搭建，这次入坑异星工场也尝试一下。拿着香港的三一服务器试试水&lt;&#x2F;p&gt;
&lt;h2 id=&quot;搭建大致方法选择&quot;&gt;搭建大致方法选择&lt;&#x2F;h2&gt;
&lt;p&gt;直接用的官方的方法，&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.factorio.com&#x2F;download-headless&quot;&gt;官方地址&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1._登录服务器后下载官方服务器包，并解压到opt目录下&quot;&gt;1. 登录服务器后下载官方服务器包，并解压到opt目录下&lt;&#x2F;h3&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;wget https:&#x2F;&#x2F;www.factorio.com&#x2F;get-download&#x2F;0.17.74&#x2F;headless&#x2F;linux64  
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;tar -xvf linux64 -C &#x2F;opt&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;0.17.74是版本，根据你的游戏版本下载不同的服务器版本&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2._安装环境&quot;&gt;2. 安装环境&lt;&#x2F;h3&gt;
&lt;p&gt;服务器运行需要GLIBC_2.18 而安装GLIBC_2.18需要gcc套件&lt;br &#x2F;&gt;
首先查看服务器是否有glibc_2.18&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;strings &#x2F;usr&#x2F;lib64&#x2F;libc.so.6 | grep ^GLIBC_
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果没有则执行&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;curl -O http:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;glibc&#x2F;glibc-2.18.tar.gz
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;tar zxf glibc-2.18.tar.gz
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cd glibc-2.18&#x2F;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;mkdir build
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cd build&#x2F;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;..&#x2F;configure --prefix=&#x2F;usr
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;make -j2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;make install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;若报错&lt;code&gt;configure: error: no acceptable C compiler found in $PATH&lt;&#x2F;code&gt;
则安装gcc套件后再次尝试&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;yum install gcc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;环境安装完成后对服务器开始配置&quot;&gt;环境安装完成后对服务器开始配置&lt;&#x2F;h3&gt;
&lt;p&gt;在服务器的&lt;code&gt;&#x2F;opt&#x2F;fatorio&#x2F;data&#x2F;&lt;&#x2F;code&gt;目录下有相关的配置文件，把名字中的&lt;code&gt;example&lt;&#x2F;code&gt;去掉后根据里面的说明进行编辑。&lt;strong&gt;注意盗版联机的话把账户验证和服务器公开关掉&#x2F;设为false&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;然后开始服务器的地图生成和启动&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;screen
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cd &#x2F;opt&#x2F;factorio
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;.&#x2F;bin&#x2F;x64&#x2F;factorio --create .&#x2F;saves&#x2F;test1.zip --map-gen-settings .&#x2F;data&#x2F;map-gen-settings.json --map-settings .&#x2F;data&#x2F;map-settings.json
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;.&#x2F;bin&#x2F;x64&#x2F;factorio --config .&#x2F;config&#x2F;config.ini --port 34197 --start-server .&#x2F;saves&#x2F;test1.zip --server-settings .&#x2F;data&#x2F;server-settings.json
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;没报错就应该启动成功，按下ctrl+d退出当前screen。&lt;br &#x2F;&gt;
进游戏选择服务器直连就行，端口是上面的34197。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pillow图像处理笔记</title>
        <published>2019-10-31T00:00:00+00:00</published>
        <updated>2019-10-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/pillow图像处理笔记/"/>
        <id>https://bbpp222006.github.io/pillow图像处理笔记/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/pillow图像处理笔记/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;自从有了博客，需要更新背景图片和添加新图，发现图片需要压缩，亮度调整等一系列操作才能更适合网页。于是捡起pillow，写了一个批处理py脚本。这里记录一下相关用法，以后可能补充。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pillow.readthedocs.io&#x2F;en&#x2F;latest&#x2F;index.html&quot;&gt;官方手册&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pillow-cn.readthedocs.io&#x2F;zh_CN&#x2F;latest&#x2F;&quot;&gt;中文文档&lt;&#x2F;a&gt;
这个好像不完整……大家还是看原版吧……&lt;&#x2F;p&gt;
&lt;h2 id=&quot;可用的压缩以及亮度调整代码&quot;&gt;可用的压缩以及亮度调整代码&lt;&#x2F;h2&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;import os
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;from PIL import Image,ImageEnhance,ImageStat
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;origin_path = &amp;#39;pic&#x2F;origin&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;edited_path = &amp;#39;pic&#x2F;edited&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;def get_FileSize(filePath):
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    fsize = os.path.getsize(filePath)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    fsize = fsize&#x2F;float(1024*1024)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    return round(fsize,5)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;def get_name_path(origin_path = origin_path):
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    path_list = {}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    for pic in os.listdir(origin_path):
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        pic_name =  os.path.splitext(pic)[0]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        path_list[pic_name] = origin_path+ str(pic)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    return path_list
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;def change_dark(pic_content): #传入待定
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    bright_origin = ImageStat.Stat(pic_content.convert(&amp;#39;L&amp;#39;)).mean[0]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    print(bright_origin)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    brightness = 50 &#x2F; bright_origin
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    dark_pic = ImageEnhance.Brightness(pic_content).enhance(brightness)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    return dark_pic
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;def change_small(pic_content):#传入待定
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    pass
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;path_list = get_name_path()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;print(path_list)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;for pic_name in path_list:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    print(pic_name,path_list[pic_name])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    pic = Image.open(path_list[pic_name]).convert(&amp;#39;RGB&amp;#39;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    print(get_FileSize(path_list[pic_name]))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    # pic.show()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    pic = change_dark(pic)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    save_path = edited_path + pic_name +&amp;#39;.jpg&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    pic.save(save_path,quality=80)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    print(get_FileSize(save_path) )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    pic = Image.open(save_path)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    # pic.show()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;用法笔记&quot;&gt;用法笔记&lt;&#x2F;h2&gt;
&lt;p&gt;PIL中所涉及的基本概念有如下几个：通道（bands）、模式（mode）、尺寸（size）、坐标系统（coordinate system）、调色板（palette）、信息（info）和滤波器（filters）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;通道&quot;&gt;通道&lt;&#x2F;h3&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt;from PIL import Image
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; im= Image.open(&amp;#39;1.jpg&amp;#39;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt;im.getbands()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(&amp;#39;R&amp;#39;, &amp;#39;G&amp;#39;, &amp;#39;B&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;RGB到灰度图转换公式：Y = 0.299 R +  0.587 G + 0.114 B&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;模式&quot;&gt;模式&lt;&#x2F;h3&gt;
&lt;p&gt;图像的模式定义了图像的类型和像素的位宽。当前支持如下模式：&lt;&#x2F;p&gt;
&lt;p&gt;1：1位像素，表示黑和白，但是存储的时候每个像素存储为8bit。&lt;br &#x2F;&gt;
L：8位像素，表示黑和白。&lt;br &#x2F;&gt;
P：8位像素，使用调色板映射到其他模式。&lt;br &#x2F;&gt;
RGB：3x8位像素，为真彩色。&lt;br &#x2F;&gt;
RGBA：4x8位像素，有透明通道的真彩色。&lt;br &#x2F;&gt;
CMYK：4x8位像素，颜色分离。&lt;br &#x2F;&gt;
YCbCr：3x8位像素，彩色视频格式。&lt;br &#x2F;&gt;
I：32位整型像素。&lt;br &#x2F;&gt;
F：32位浮点型像素。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; im.mode
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;#39;RGB&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; im = im.convert(&amp;quot;I&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; im.mode
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;#39;I&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;尺寸&quot;&gt;尺寸&lt;&#x2F;h3&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt;im.size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(800, 450)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;坐标&quot;&gt;坐标&lt;&#x2F;h3&gt;
&lt;p&gt;PIL使用笛卡尔像素坐标系统，坐标(0，0)位于左上角。注意：坐标值表示像素的角；位于坐标（0，0）处的像素的中心实际上位于（0.5，0.5）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;高阶操作&quot;&gt;高阶操作&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;数据增强模块ImageEnhance&quot;&gt;数据增强模块&lt;code&gt;ImageEnhance&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;亮度&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;enh_bri = ImageEnhance.Brightness(image)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;brightness = 1.5 #这个是变亮，0.8就是变暗
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;image_brightened1 = enh_bri.enhance(brightness)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;色彩饱和度：彩度除以明度，指色彩的鲜艳程度，也称色彩的纯度；&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;enh_col = ImageEnhance.Color(image)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;color = 1.5 #增强，0.8减弱
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;image_colored1 = enh_col.enhance(color)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;锐度：是反映图像平面清晰度和图像边缘锐利程度的一个指标。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;enh_sha = ImageEnhance.Sharpness(image)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sharpness = 3.0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;image_sharped1 = enh_sha.enhance(sharpness)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;对比度&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;enh_con = ImageEnhance.Contrast(image)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;contrast = 1.5
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;image_contrasted1 = enh_con.enhance(contrast)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;数据统计模块ImageStat&quot;&gt;数据统计模块&lt;code&gt;ImageStat&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;ImageStat.Stat(image, mask)⇒ Stat instance&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;含义：计算给定图像的统计值。如果变量mask被赋值，将只针对变量mask所定义的区域进行统计。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; stat =ImageStat.Stat(im)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; stat.extrema #获取图像中每个通道的最大值和最小值。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[(2, 255), (0, 255), (0, 255)]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; stat.count #获取图像中每个通道的像素个数。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[786432, 786432,786432] 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; stat.sum #每个通道求和
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[90912466.0,75765120.0, 59027727.0]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt;stat.sum2 #每个通道求平方和
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[14449895138.0,12289898764.0, 9141884969.0]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt;stat.mean #求平均
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[115.60117848714192,96.34033203125, 75.05763626098633]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt;stat.median #中位数
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[119, 80, 40]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt;stat.rms #均方根值
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[135.55069835243268,125.00965724006934, 107.81701101697355]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt;stat.var #方差
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[5010.359356216148,6345.954827388127, 5990.859103547667]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt;stat.stddev #标准差
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[70.78389192617306,79.66150153862358, 77.40064020114863]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;结语&quot;&gt;结语&lt;&#x2F;h1&gt;
&lt;p&gt;鉴于许多猛男不会ps~~审美猛男化~~，就不需要更高阶的操作了。以后如有需要就再更新，美滋滋。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>常用服务器命令备份</title>
        <published>2019-10-31T00:00:00+00:00</published>
        <updated>2019-10-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/常用服务器脚本命令收集/"/>
        <id>https://bbpp222006.github.io/常用服务器脚本命令收集/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/常用服务器脚本命令收集/">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;网易云脚本&lt;br &#x2F;&gt;
&lt;code&gt;wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;XIU2&#x2F;SHELL&#x2F;master&#x2F;unblock163.sh &amp;amp;&amp;amp; chmod +x unblock163.sh &amp;amp;&amp;amp; bash unblock163.sh&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;ssr安装&lt;br &#x2F;&gt;
&lt;code&gt;wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubi&#x2F;doubi&#x2F;master&#x2F;ssr.sh &amp;amp;&amp;amp; chmod +x ssr.sh &amp;amp;&amp;amp; sudo bash ssr.sh&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;v2ray带伪装脚本&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hijkpw&#x2F;scripts&#x2F;master&#x2F;centos_install_v2ray2.sh &amp;amp;&amp;amp; chmod +x centos_install_v2ray2.sh &amp;amp;&amp;amp; sudo bash centos_install_v2ray2.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;各种魔改内核加速脚本&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh &amp;amp;&amp;amp; chmod +x tcp.sh &amp;amp;&amp;amp; sudo bash tcp.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;服务器端口转发 (第一个只支持tcp，第二个tcp，udp都支持)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubiBackup&#x2F;doubi&#x2F;master&#x2F;haproxy.sh &amp;amp;&amp;amp; chmod +x haproxy.sh &amp;amp;&amp;amp; bash haproxy.sh
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubiBackup&#x2F;doubi&#x2F;master&#x2F;iptables-pf.sh &amp;amp;&amp;amp; chmod +x iptables-pf.sh &amp;amp;&amp;amp; bash iptables-pf.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以下为centos原生支持的firewalld进行转发功能（在内存较小的机子上运行这个，例如nat的小鸡）&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#安装
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;yum install -y firewalld
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl enable firewalld
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl start firewalld
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#查看运行状态
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;firewall-cmd --state
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;firewall-cmd --list-all #查看当前规则
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;firewall-cmd --zone=public --list-ports  # 查看开放的端口
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#规则管理
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;echo &amp;#39;net.ipv4.ip_forward = 1&amp;#39; &amp;gt;&amp;gt; &#x2F;etc&#x2F;sysctl.conf
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sysctl -p
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;firewall-cmd --permanent --add-masquerade
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 8080可以改成其他端口
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;firewall-cmd --permanent --add-port=8080&#x2F;tcp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;firewall-cmd --permanent --add-port=8080&#x2F;tcp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 8080和上面保持一致，国外ip改成你国外vps的ip，443改成国外ss&#x2F;ssr&#x2F;v2ray等软件的端口
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;firewall-cmd --permanent --add-forward-port=port=8080:proto=tcp:toaddr=国外ip:toport=443
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;firewall-cmd --permanent --add-forward-port=port=8080:proto=udp:toaddr=国外ip:toport=443
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 移除添加的端口
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;firewall-cmd --permanent --remove-port=80&#x2F;tcp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# 重载服务
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;firewall-cmd --reload
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;服务器贴吧签到重启&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;service docker start
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;docker-compose up -d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;服务器例行检查&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cat &#x2F;var&#x2F;log&#x2F;secure | grep -i &amp;quot;accepted password&amp;quot; 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;who
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;switch_lan_play维护&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cd &#x2F;root&#x2F;switch-lan-play&#x2F;server
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;git pull
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;npm run build
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;npm run server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>提问的智慧</title>
        <published>2019-10-25T00:00:00+00:00</published>
        <updated>2019-10-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/提问的智慧/"/>
        <id>https://bbpp222006.github.io/提问的智慧/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/提问的智慧/">&lt;h1 id=&quot;提问的智慧&quot;&gt;提问的智慧&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;How To Ask Questions The Smart Way&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen&lt;&#x2F;p&gt;
&lt;p&gt;本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。&lt;&#x2F;p&gt;
&lt;p&gt;原文网址：&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;~esr&#x2F;faqs&#x2F;smart-questions.html&quot;&gt;http:&#x2F;&#x2F;www.catb.org&#x2F;~esr&#x2F;faqs&#x2F;smart-questions.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Copyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux), 2010 by Gasolin, 2015 by Ryan Wu&lt;&#x2F;p&gt;
&lt;p&gt;本中文指南是基于原文 3.10 版以及 2010 年由 &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gasolin&quot;&gt;Gasolin&lt;&#x2F;a&gt; 所翻译版本的最新翻译；&lt;&#x2F;p&gt;
&lt;p&gt;协助指出翻译问题，&lt;strong&gt;请&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ryanhanwu&#x2F;smartquestions&#x2F;issues&#x2F;new&quot;&gt;发 Issue&lt;&#x2F;a&gt;，或直接&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ryanhanwu&#x2F;smartquestions&#x2F;compare&#x2F;&quot;&gt;发 Pull Request&lt;&#x2F;a&gt; 给我。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;本文另有&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ryanhanwu&#x2F;How-To-Ask-Questions-The-Smart-Way&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;繁體中文版&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;原文版本历史&quot;&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ryanhanwu&#x2F;smartquestions&#x2F;blob&#x2F;master&#x2F;history.md&quot;&gt;原文版本历史&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;目录&quot;&gt;目录&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%A3%B0%E6%98%8E&quot;&gt;声明&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E7%AE%80%E4%BB%8B&quot;&gt;简介&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D&quot;&gt;在提问之前&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%BD%93%E4%BD%A0%E6%8F%90%E9%97%AE%E6%97%B6&quot;&gt;当你提问时&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E6%85%8E%E9%80%89%E6%8F%90%E9%97%AE%E7%9A%84%E8%AE%BA%E5%9D%9B&quot;&gt;慎选提问的论坛&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[Stack Overflow](#Stack Overflow)&lt;&#x2F;li&gt;
&lt;li&gt;[网站和 IRC 论坛](#网站和 irc 论坛)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%8C%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8&quot;&gt;第二步，使用项目邮件列表&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A1%AE%E7%9A%84%E6%A0%87%E9%A2%98&quot;&gt;使用有意义且描述明确的标题&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D&quot;&gt;使问题容易回复&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E7%94%A8%E6%B8%85%E6%99%B0%E3%80%81%E6%AD%A3%E7%A1%AE%E3%80%81%E7%B2%BE%E5%87%86%E5%B9%B6%E5%90%88%E6%B3%95%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AF%AD%E5%8F%A5&quot;&gt;用清晰、正确、精准并合法语法的语句&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98&quot;&gt;使用易于读取且标准的文件格式发送问题&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E7%B2%BE%E7%A1%AE%E5%9C%B0%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%B9%B6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9&quot;&gt;精确地描述问题并言之有物&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE&quot;&gt;话不在多而在精&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%88%AB%E5%8A%A8%E8%BE%84%E5%A3%B0%E7%A7%B0%E6%89%BE%E5%88%B0Bug&quot;&gt;别动辄声称找到Bug&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%E4%B8%8D%E8%83%BD%E4%BB%A3%E6%9B%BF%E4%BD%A0%E7%9A%84%E5%8A%9F%E8%AF%BE&quot;&gt;低声下气不能代替你的功课&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E9%9D%9E%E4%BD%A0%E7%9A%84%E7%8C%9C%E6%B5%8B&quot;&gt;描述问题症状而非你的猜测&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E6%8C%89%E5%8F%91%E7%94%9F%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E5%88%97%E5%87%BA%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6&quot;&gt;按发生时间先后列出问题症状&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B&quot;&gt;描述目标而不是过程&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%88%AB%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E7%94%B5%E9%82%AE%E5%9B%9E%E5%A4%8D&quot;&gt;别要求使用私人电邮回复&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A1%AE%E7%9A%84%E8%A1%A8%E8%BE%BE%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82&quot;&gt;清楚明确的表达你的问题以及需求&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E8%AF%A2%E9%97%AE%E6%9C%89%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E6%97%B6&quot;&gt;询问有关代码的问题时&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%88%AB%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E7%9A%84%E9%97%AE%E9%A2%98%E8%B4%B4%E4%B8%8A%E6%9D%A5&quot;&gt;别把自己家庭作业的问题贴上来&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%8E%BB%E6%8E%89%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%A5&quot;&gt;去掉无意义的提问句&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A0%87%E9%A2%98%E5%86%99%E7%B4%A7%E6%80%A5&quot;&gt;即使你很急也不要在标题写紧急&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E7%A4%BC%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%EF%BC%8C%E8%80%8C%E4%B8%94%E6%9C%89%E6%97%B6%E8%BF%98%E5%BE%88%E6%9C%89%E5%B8%AE%E5%8A%A9&quot;&gt;礼多人不怪，而且有时还很有帮助&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%90%8E%EF%BC%8C%E5%8A%A0%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E&quot;&gt;问题解决后，加个简短的补充说明&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E7%AD%94%E6%A1%88&quot;&gt;如何解读答案&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;[RTFM 和 STFW：如何知道你已完全搞砸了](#RTFM 和 STFW：如何知道你已完全搞砸了)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%A6%82%E6%9E%9C%E8%BF%98%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82&quot;&gt;如果还是搞不懂&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%A4%84%E7%90%86%E6%97%A0%E7%A4%BC%E7%9A%84%E5%9B%9E%E5%BA%94&quot;&gt;处理无礼的回应&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E8%B4%A5%E8%80%85&quot;&gt;如何避免扮演失败者&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E4%B8%8D%E8%AF%A5%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98&quot;&gt;不该问的问题&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A0%A2%E9%97%AE%E9%A2%98&quot;&gt;好问题与蠢问题&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94&quot;&gt;如果得不到回答&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98&quot;&gt;如何更好地回答问题&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90&quot;&gt;相关资源&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E9%B8%A3%E8%B0%A2&quot;&gt;鸣谢&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;声明&quot;&gt;声明&lt;&#x2F;h2&gt;
&lt;p&gt;许多项目在他们的使用协助&#x2F;说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;本指南不提供此项目的实际支持服务！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。&lt;&#x2F;p&gt;
&lt;p&gt;如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;&#x2F;h2&gt;
&lt;p&gt;在&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;~esr&#x2F;faqs&#x2F;hacker-howto.html&quot;&gt;黑客&lt;&#x2F;a&gt;的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。&lt;&#x2F;p&gt;
&lt;p&gt;不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件&lt;strong&gt;好事&lt;&#x2F;strong&gt;；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。&lt;&#x2F;p&gt;
&lt;p&gt;首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，&amp;quot;好问题！&amp;quot;是诚挚的大力称赞。&lt;&#x2F;p&gt;
&lt;p&gt;尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。&lt;&#x2F;p&gt;
&lt;p&gt;我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 &lt;code&gt;失败者（撸瑟）&lt;&#x2F;code&gt; （由于历史原因，我们有时把它拼作 &lt;code&gt;lusers&lt;&#x2F;code&gt;）。&lt;&#x2F;p&gt;
&lt;p&gt;我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。&lt;&#x2F;p&gt;
&lt;p&gt;我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答&lt;code&gt;赢家（winner）&lt;&#x2F;code&gt;的问题。&lt;&#x2F;p&gt;
&lt;p&gt;如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。&lt;&#x2F;p&gt;
&lt;p&gt;所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 -- 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。&lt;&#x2F;p&gt;
&lt;p&gt;如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 -- 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。&lt;&#x2F;p&gt;
&lt;p&gt;（欢迎对本指南提出改进意见。你可以 email 你的建议至 &lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;esr@thyrsus.com&quot;&gt;esr@thyrsus.com&lt;&#x2F;a&gt; 或 &lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;respond-auto@linuxmafia.com&quot;&gt;respond-auto@linuxmafia.com&lt;&#x2F;a&gt;。然而请注意，本文并非&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ietf.org&#x2F;rfc&#x2F;rfc1855.txt&quot;&gt;网络礼节&lt;&#x2F;a&gt;的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;在提问之前&quot;&gt;在提问之前&lt;&#x2F;h2&gt;
&lt;p&gt;在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;尝试在你准备提问的论坛的旧文章中搜索答案。&lt;&#x2F;li&gt;
&lt;li&gt;尝试上网搜索以找到答案。&lt;&#x2F;li&gt;
&lt;li&gt;尝试阅读手册以找到答案。&lt;&#x2F;li&gt;
&lt;li&gt;尝试阅读常见问题文件（FAQ）以找到答案。&lt;&#x2F;li&gt;
&lt;li&gt;尝试自己检查或试验以找到答案。&lt;&#x2F;li&gt;
&lt;li&gt;向你身边的强者朋友打听以找到答案。&lt;&#x2F;li&gt;
&lt;li&gt;如果你是程序开发者，请尝试阅读源代码以找到答案。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所&lt;strong&gt;学到&lt;&#x2F;strong&gt;的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。&lt;&#x2F;p&gt;
&lt;p&gt;运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（既搜索 &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;groups.google.com&#x2F;&quot;&gt;Google 论坛&lt;&#x2F;a&gt;，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 &lt;code&gt;我在 Google 中搜过下列句子但没有找到什么有用的东西&lt;&#x2F;code&gt; 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。&lt;&#x2F;p&gt;
&lt;p&gt;别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。&lt;&#x2F;p&gt;
&lt;p&gt;准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。&lt;&#x2F;p&gt;
&lt;p&gt;小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着&lt;code&gt;蠢问题…&lt;&#x2F;code&gt;， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。&lt;&#x2F;p&gt;
&lt;p&gt;绝不要自以为&lt;strong&gt;够格&lt;&#x2F;strong&gt;得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去&lt;strong&gt;挣到&lt;&#x2F;strong&gt;一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。&lt;&#x2F;p&gt;
&lt;p&gt;另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。&lt;code&gt;谁能给点提示？&lt;&#x2F;code&gt;、&lt;code&gt;我的这个例子里缺了什么？&lt;&#x2F;code&gt;以及&lt;code&gt;我应该检查什么地方&lt;&#x2F;code&gt;比&lt;code&gt;请把我需要的确切的过程贴出来&lt;&#x2F;code&gt;更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;当你提问时&quot;&gt;当你提问时&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;慎选提问的论坛&quot;&gt;慎选提问的论坛&lt;&#x2F;h3&gt;
&lt;p&gt;小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在与主题不合的论坛上贴出你的问题。&lt;&#x2F;li&gt;
&lt;li&gt;在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。&lt;&#x2F;li&gt;
&lt;li&gt;在太多的不同新闻群组上重复转贴同样的问题（cross-post）。&lt;&#x2F;li&gt;
&lt;li&gt;向既非熟人也没有义务解决你问题的人发送私人电邮。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。&lt;&#x2F;p&gt;
&lt;p&gt;因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括&lt;strong&gt;阅读&lt;&#x2F;strong&gt; FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。&lt;&#x2F;p&gt;
&lt;p&gt;向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 -- 如果你不确定，那就向别处发送，或者压根别发。&lt;&#x2F;p&gt;
&lt;p&gt;在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。&lt;&#x2F;p&gt;
&lt;p&gt;别像机关枪似的一次&amp;quot;扫射&amp;quot;所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。&lt;&#x2F;p&gt;
&lt;p&gt;搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。&lt;&#x2F;p&gt;
&lt;p&gt;一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。&lt;&#x2F;p&gt;
&lt;p&gt;可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Stack_Overflow&quot;&gt;Stack Overflow&lt;&#x2F;h3&gt;
&lt;p&gt;搜索，&lt;strong&gt;然后&lt;&#x2F;strong&gt; 在 Stack Exchange 问。&lt;&#x2F;p&gt;
&lt;p&gt;近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。&lt;&#x2F;p&gt;
&lt;p&gt;因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。&lt;&#x2F;p&gt;
&lt;p&gt;Stack Exchange 已经成长到&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;stackexchange.com&#x2F;sites&quot;&gt;超过一百个网站&lt;&#x2F;a&gt;，以下是最常用的几个站：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。&lt;&#x2F;li&gt;
&lt;li&gt;Stack Overflow 是问写程序有关的问题。&lt;&#x2F;li&gt;
&lt;li&gt;Server Fault 是问服务器和网管相关的问题。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;网站和_IRC_论坛&quot;&gt;网站和 IRC 论坛&lt;&#x2F;h3&gt;
&lt;p&gt;本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。&lt;&#x2F;p&gt;
&lt;p&gt;事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 &amp;quot;用&lt;strong&gt;我们的&lt;&#x2F;strong&gt;版本&amp;quot;。&lt;&#x2F;p&gt;
&lt;p&gt;在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。&lt;&#x2F;p&gt;
&lt;p&gt;通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。&lt;&#x2F;p&gt;
&lt;p&gt;在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;第二步，使用项目邮件列表&quot;&gt;第二步，使用项目邮件列表&lt;&#x2F;h3&gt;
&lt;p&gt;当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。&lt;&#x2F;li&gt;
&lt;li&gt;向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。&lt;&#x2F;li&gt;
&lt;li&gt;大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。&lt;&#x2F;li&gt;
&lt;li&gt;如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果一个项目既有&amp;quot;使用者&amp;quot; 也有&amp;quot;开发者&amp;quot;（或&amp;quot;黑客&amp;quot;）邮件列表或论坛，而你又不会动到那些源代码，那么就向&amp;quot;使用者&amp;quot;列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。&lt;&#x2F;p&gt;
&lt;p&gt;然而，如果你&lt;strong&gt;确信&lt;&#x2F;strong&gt;你的问题很特别，而且在&amp;quot;使用者&amp;quot; 列表或论坛中几天都没有回复，可以试试前往&amp;quot;开发者&amp;quot;列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）&lt;&#x2F;p&gt;
&lt;p&gt;如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;使用有意义且描述明确的标题&quot;&gt;使用有意义且描述明确的标题&lt;&#x2F;h3&gt;
&lt;p&gt;在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的&lt;code&gt;帮帮忙&lt;&#x2F;code&gt;、&lt;code&gt;跪求&lt;&#x2F;code&gt;、&lt;code&gt;急&lt;&#x2F;code&gt;（更别说&lt;code&gt;救命啊！！！！&lt;&#x2F;code&gt;这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。&lt;&#x2F;p&gt;
&lt;p&gt;一个好标题范例是&lt;code&gt;目标 —— 差异&lt;&#x2F;code&gt;式的描述，许多技术支持组织就是这样做的。在&lt;code&gt;目标&lt;&#x2F;code&gt;部分指出是哪一个或哪一组东西有问题，在&lt;code&gt;差异&lt;&#x2F;code&gt;部分则描述与期望的行为不一致的地方。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;蠢问题：救命啊！我的笔记本电脑不能正常显示了！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;编写&lt;code&gt;目标 —— 差异&lt;&#x2F;code&gt; 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境&lt;strong&gt;和&lt;&#x2F;strong&gt;你遇到的问题。&lt;&#x2F;p&gt;
&lt;p&gt;总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。&lt;&#x2F;p&gt;
&lt;p&gt;如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 &lt;code&gt;Re: 测试&lt;&#x2F;code&gt; 或者 &lt;code&gt;Re: 新 bug&lt;&#x2F;code&gt; 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。&lt;&#x2F;p&gt;
&lt;p&gt;对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。&lt;&#x2F;p&gt;
&lt;p&gt;仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。&lt;&#x2F;p&gt;
&lt;p&gt;在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你&lt;strong&gt;只想&lt;&#x2F;strong&gt;在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;使问题容易回复&quot;&gt;使问题容易回复&lt;&#x2F;h3&gt;
&lt;p&gt;以&lt;code&gt;请将你的回复发送到……&lt;&#x2F;code&gt;来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;linuxmafia.com&#x2F;faq&#x2F;Mail&#x2F;muas.html&quot;&gt;换个好点的&lt;&#x2F;a&gt;；如果是操作系统不支持这种邮件程序，也换个好点的。&lt;&#x2F;p&gt;
&lt;p&gt;在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如&lt;code&gt;追踪此讨论串&lt;&#x2F;code&gt;、&lt;code&gt;有回复时发送邮件提醒&lt;&#x2F;code&gt;等功能。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;用清晰、正确、精准并合法语法的语句&quot;&gt;用清晰、正确、精准并合法语法的语句&lt;&#x2F;h3&gt;
&lt;p&gt;我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。&lt;&#x2F;p&gt;
&lt;p&gt;正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它&lt;strong&gt;必须很&lt;&#x2F;strong&gt;准确，而且有迹象表明你是在思考和关注问题。&lt;&#x2F;p&gt;
&lt;p&gt;正确地拼写、使用标点和大小写，不要将&lt;code&gt;its&lt;&#x2F;code&gt;混淆为&lt;code&gt;it&#x27;s&lt;&#x2F;code&gt;，&lt;code&gt;loose&lt;&#x2F;code&gt;搞成&lt;code&gt;lose&lt;&#x2F;code&gt;或者将&lt;code&gt;discrete&lt;&#x2F;code&gt;弄成&lt;code&gt;discreet&lt;&#x2F;code&gt;。不要&lt;strong&gt;全部用大写&lt;&#x2F;strong&gt;，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Alan_Cox&quot;&gt;Alan Cox&lt;&#x2F;a&gt; 也许可以这样做，但你不行）。&lt;&#x2F;p&gt;
&lt;p&gt;更白话的说，如果你写得像是个半文盲[译注：&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E5%B0%8F%E7%99%BD&quot;&gt;小白&lt;&#x2F;a&gt;]，那多半得不到理睬。也不要使用即时通信中的简写或&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E7%81%AB%E6%98%9F%E6%96%87&quot;&gt;火星文&lt;&#x2F;a&gt;，如将&lt;code&gt;的&lt;&#x2F;code&gt;简化为&lt;code&gt;d&lt;&#x2F;code&gt;会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。&lt;&#x2F;p&gt;
&lt;p&gt;如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。&lt;&#x2F;p&gt;
&lt;p&gt;如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：
[译注：以下附上原文以供使用]&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;English is not my native language; please excuse typing errors.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;英文不是我的母语，请原谅我的错字或语法。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If you speak $LANGUAGE, please email&#x2F;PM me;
I may need assistance translating my question.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果你说&lt;strong&gt;某语言&lt;&#x2F;strong&gt;，请寄信&#x2F;私讯给我；我需要有人协助我翻译我的问题。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I am familiar with the technical terms,
but some slang expressions and idioms are difficult for me.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#x27;ve posted my question in $LANGUAGE and English.
I&#x27;ll be glad to translate responses, if you only use one or the other.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;我把我的问题用&lt;strong&gt;某语言&lt;&#x2F;strong&gt;和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;使用易于读取且标准的文件格式发送问题&quot;&gt;使用易于读取且标准的文件格式发送问题&lt;&#x2F;h3&gt;
&lt;p&gt;如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用纯文字而不是 HTML (&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;archive.birdhouse.org&#x2F;etc&#x2F;evilmail.html&quot;&gt;关闭 HTML&lt;&#x2F;a&gt; 并不难）。&lt;&#x2F;li&gt;
&lt;li&gt;使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。&lt;&#x2F;li&gt;
&lt;li&gt;不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。&lt;&#x2F;li&gt;
&lt;li&gt;但是，对一些特殊的文件&lt;strong&gt;不要&lt;&#x2F;strong&gt;设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。&lt;&#x2F;li&gt;
&lt;li&gt;在英语论坛中，不要使用&lt;code&gt;Quoted-Printable&lt;&#x2F;code&gt; MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的&lt;code&gt;=20&lt;&#x2F;code&gt;符号既难看也分散注意力，甚至有可能破坏内容的语意。&lt;&#x2F;li&gt;
&lt;li&gt;绝对，&lt;strong&gt;永远&lt;&#x2F;strong&gt;不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。&lt;&#x2F;li&gt;
&lt;li&gt;如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的&lt;code&gt;智能引号&lt;&#x2F;code&gt;功能 （从[选项] &amp;gt; [校订] &amp;gt; [自动校正选项]，勾选掉&lt;code&gt;智能引号&lt;&#x2F;code&gt;单选框），以免在你的邮件中到处散布垃圾字符。&lt;&#x2F;li&gt;
&lt;li&gt;在论坛，勿滥用&lt;code&gt;表情符号&lt;&#x2F;code&gt;和&lt;code&gt;HTML&lt;&#x2F;code&gt;功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的&lt;code&gt;查看源代码&lt;&#x2F;code&gt;命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;精确地描述问题并言之有物&quot;&gt;精确地描述问题并言之有物&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;仔细、清楚地描述你的问题或 Bug 的症状。&lt;&#x2F;li&gt;
&lt;li&gt;描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：&lt;code&gt;Fedora Core 4&lt;&#x2F;code&gt;、&lt;code&gt;Slackware 9.1&lt;&#x2F;code&gt;等）。&lt;&#x2F;li&gt;
&lt;li&gt;描述在提问前你是怎样去研究和理解这个问题的。&lt;&#x2F;li&gt;
&lt;li&gt;描述在提问前为确定问题而采取的诊断步骤。&lt;&#x2F;li&gt;
&lt;li&gt;描述最近做过什么可能相关的硬件或软件变更。&lt;&#x2F;li&gt;
&lt;li&gt;尽可能的提供一个可以&lt;code&gt;重现这个问题的可控环境&lt;&#x2F;code&gt;的方法。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。&lt;&#x2F;p&gt;
&lt;p&gt;以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.chiark.greenend.org.uk&#x2F;~sgtatham&#x2F;&quot;&gt;Simon Tatham&lt;&#x2F;a&gt; 写过一篇名为《&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.chiark.greenend.org.uk&#x2F;~sgtatham&#x2F;bugs-cn.html&quot;&gt;如何有效的报告 Bug&lt;&#x2F;a&gt;》的出色文章。强力推荐你也读一读。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;话不在多而在精&quot;&gt;话不在多而在精&lt;&#x2F;h3&gt;
&lt;p&gt;你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。&lt;&#x2F;p&gt;
&lt;p&gt;这样做的用处至少有三点。
第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；
第二，简化问题使你更有可能得到&lt;strong&gt;有用&lt;&#x2F;strong&gt;的答案；
第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;别动辄声称找到Bug&quot;&gt;别动辄声称找到Bug&lt;&#x2F;h3&gt;
&lt;p&gt;当你在使用软件中遇到问题，除非你非常、&lt;strong&gt;非常&lt;&#x2F;strong&gt;的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的&lt;code&gt;Bug&lt;&#x2F;code&gt;，你应该能提供相应位置的修正或替代文件。&lt;&#x2F;p&gt;
&lt;p&gt;请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D&quot;&gt;已经做了这些，是吧&lt;&#x2F;a&gt;？）。这也意味着很有可能是你弄错了而不是软件本身有问题。&lt;&#x2F;p&gt;
&lt;p&gt;编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有&lt;code&gt;Bug&lt;&#x2F;code&gt;时，这尤其严重。&lt;&#x2F;p&gt;
&lt;p&gt;提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是&lt;strong&gt;你&lt;&#x2F;strong&gt;做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;低声下气不能代替你的功课&quot;&gt;低声下气不能代替你的功课&lt;&#x2F;h3&gt;
&lt;p&gt;有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：&lt;code&gt;我知道我只是个可悲的新手，一个撸瑟，但...&lt;&#x2F;code&gt;。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。&lt;&#x2F;p&gt;
&lt;p&gt;别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。&lt;&#x2F;p&gt;
&lt;p&gt;有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;描述问题症状而非你的猜测&quot;&gt;描述问题症状而非你的猜测&lt;&#x2F;h3&gt;
&lt;p&gt;告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;蠢问题&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我在编译内核时接连遇到 SIG11 错误，
我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;聪明问题&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6&#x2F;233 CPU（威盛 Apollo VP2 芯片组），
256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，
但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。
所有内存都换过了，没有效果。相关部分的标准编译记录如下…。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：&lt;code&gt;所有的诊断专家都来自密苏里州。&lt;&#x2F;code&gt; 美国国务院的官方座右铭则是：&lt;code&gt;让我看看&lt;&#x2F;code&gt;（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：&lt;code&gt;我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。&lt;&#x2F;code&gt;） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！&lt;&#x2F;p&gt;
&lt;h3 id=&quot;按发生时间先后列出问题症状&quot;&gt;按发生时间先后列出问题症状&lt;&#x2F;h3&gt;
&lt;p&gt;问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。&lt;&#x2F;p&gt;
&lt;p&gt;如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，&lt;code&gt;多&lt;&#x2F;code&gt;不等于&lt;code&gt;好&lt;&#x2F;code&gt;。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。&lt;&#x2F;p&gt;
&lt;p&gt;如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;描述目标而不是过程&quot;&gt;描述目标而不是过程&lt;&#x2F;h3&gt;
&lt;p&gt;如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。&lt;&#x2F;p&gt;
&lt;p&gt;经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;蠢问题&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;聪明问题&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），
但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;第二种提问法比较聪明，你可能得到像是&lt;code&gt;建议采用另一个更合适的工具&lt;&#x2F;code&gt;的回复。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;别要求使用私人电邮回复&quot;&gt;别要求使用私人电邮回复&lt;&#x2F;h3&gt;
&lt;p&gt;黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。&lt;&#x2F;p&gt;
&lt;p&gt;当你要求私下回复时，这个过程和奖励都被中止。别这样做，让&lt;strong&gt;回复者&lt;&#x2F;strong&gt;来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。&lt;&#x2F;p&gt;
&lt;p&gt;这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是&lt;code&gt;向我发电邮，我将为论坛归纳这些回复&lt;&#x2F;code&gt;。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;清楚明确的表达你的问题以及需求&quot;&gt;清楚明确的表达你的问题以及需求&lt;&#x2F;h3&gt;
&lt;p&gt;漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。&lt;&#x2F;p&gt;
&lt;p&gt;如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。&lt;&#x2F;p&gt;
&lt;p&gt;要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。&lt;&#x2F;p&gt;
&lt;p&gt;所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问&lt;code&gt;我想更好的理解 X，可否指点一下哪有好一点说明？&lt;&#x2F;code&gt;通常比问&lt;code&gt;你能解释一下 X 吗？&lt;&#x2F;code&gt;更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;询问有关代码的问题时&quot;&gt;询问有关代码的问题时&lt;&#x2F;h3&gt;
&lt;p&gt;别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：&lt;code&gt;它不能工作&lt;&#x2F;code&gt;会让你完全被忽略。只贴几十行代码，然后说一句：&lt;code&gt;在第七行以后，我期待它显示 &amp;lt;x&amp;gt;，但实际出现的是 &amp;lt;y&amp;gt;&lt;&#x2F;code&gt;比较有可能让你得到回应。&lt;&#x2F;p&gt;
&lt;p&gt;最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能&lt;strong&gt;刚好&lt;&#x2F;strong&gt;展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译&#x2F;直译&#x2F;被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE&quot;&gt;话不在多而在精&lt;&#x2F;a&gt;一节）。&lt;&#x2F;p&gt;
&lt;p&gt;一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。&lt;&#x2F;p&gt;
&lt;p&gt;如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;别把自己家庭作业的问题贴上来&quot;&gt;别把自己家庭作业的问题贴上来&lt;&#x2F;h3&gt;
&lt;p&gt;黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由&lt;strong&gt;你&lt;&#x2F;strong&gt;来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。&lt;&#x2F;p&gt;
&lt;p&gt;如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的&lt;strong&gt;使用者&lt;&#x2F;strong&gt;邮件列表或论坛中提问。尽管黑客们&lt;strong&gt;会&lt;&#x2F;strong&gt;看出来，但一些有经验的使用者也许仍会给你一些提示。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;去掉无意义的提问句&quot;&gt;去掉无意义的提问句&lt;&#x2F;h3&gt;
&lt;p&gt;避免用无意义的话结束提问，例如&lt;code&gt;有人能帮我吗？&lt;&#x2F;code&gt;或者&lt;code&gt;这有答案吗？&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;首先：如果你对问题的描述不是很好，这样问更是画蛇添足。&lt;&#x2F;p&gt;
&lt;p&gt;其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：&lt;code&gt;没错，有人能帮你&lt;&#x2F;code&gt;或者&lt;code&gt;不，没答案&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;一般来说，避免用 &lt;code&gt;是或否&lt;&#x2F;code&gt;、&lt;code&gt;对或错&lt;&#x2F;code&gt;、&lt;code&gt;有或没有&lt;&#x2F;code&gt;类型的问句，除非你想得到&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;homepage.ntlworld.com.&#x2F;jonathan.deboynepollard&#x2F;FGA&#x2F;questions-with-yes-or-no-answers.html&quot;&gt;是或否类型的回答&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;即使你很急也不要在标题写紧急&quot;&gt;即使你很急也不要在标题写&lt;code&gt;紧急&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;这是你的问题，不是我们的。宣称&lt;code&gt;紧急&lt;&#x2F;code&gt;极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，&lt;code&gt;紧急&lt;&#x2F;code&gt;这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。&lt;&#x2F;p&gt;
&lt;p&gt;有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。&lt;&#x2F;p&gt;
&lt;p&gt;当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如&lt;code&gt;紧急：帮我救救这个毛绒绒的小海豹！&lt;&#x2F;code&gt;肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。&lt;&#x2F;p&gt;
&lt;p&gt;如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;礼多人不怪，而且有时还很有帮助&quot;&gt;礼多人不怪，而且有时还很有帮助&lt;&#x2F;h3&gt;
&lt;p&gt;彬彬有礼，多用&lt;code&gt;请&lt;&#x2F;code&gt;和&lt;code&gt;谢谢您的关注&lt;&#x2F;code&gt;，或&lt;code&gt;谢谢你的关照&lt;&#x2F;code&gt;。让大家都知道你对他们花时间免费提供帮助心存感激。&lt;&#x2F;p&gt;
&lt;p&gt;坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）&lt;&#x2F;p&gt;
&lt;p&gt;然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。&lt;&#x2F;p&gt;
&lt;p&gt;（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得&lt;code&gt;先谢了&lt;&#x2F;code&gt;意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说&lt;code&gt;先谢了&lt;&#x2F;code&gt;，&lt;strong&gt;然后&lt;&#x2F;strong&gt;事后再对回复者表示感谢，或者换种方式表达感激，譬如用&lt;code&gt;谢谢你的关注&lt;&#x2F;code&gt;或&lt;code&gt;谢谢你的关照&lt;&#x2F;code&gt;。）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;问题解决后，加个简短的补充说明&quot;&gt;问题解决后，加个简短的补充说明&lt;&#x2F;h3&gt;
&lt;p&gt;问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。&lt;&#x2F;p&gt;
&lt;p&gt;最理想的方式是向最初提问的话题回复此消息，并在标题中包含&lt;code&gt;已修正&lt;&#x2F;code&gt;，&lt;code&gt;已解决&lt;&#x2F;code&gt;或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串&lt;code&gt;问题 X&lt;&#x2F;code&gt;和&lt;code&gt;问题 X - 已解决&lt;&#x2F;code&gt;的潜在回复者就明白不用再浪费时间了（除非他个人觉得&lt;code&gt;问题 X&lt;&#x2F;code&gt;的有趣），因此可以利用此时间去解决其它问题。&lt;&#x2F;p&gt;
&lt;p&gt;补充说明不必很长或是很深入；简单的一句&lt;code&gt;你好，原来是网线出了问题！谢谢大家 – Bill&lt;&#x2F;code&gt;比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。&lt;&#x2F;p&gt;
&lt;p&gt;对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此&lt;strong&gt;之后&lt;&#x2F;strong&gt;才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。&lt;&#x2F;p&gt;
&lt;p&gt;除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表&#x2F;新闻群组&#x2F;论坛中搜索到真正解决你问题的方案，让他们也从中受益。&lt;&#x2F;p&gt;
&lt;p&gt;至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。&lt;&#x2F;p&gt;
&lt;p&gt;思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。&lt;&#x2F;p&gt;
&lt;p&gt;在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;如何解读答案&quot;&gt;如何解读答案&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a id=&quot;RTFM&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;RTFM_和_STFW：如何知道你已完全搞砸了&quot;&gt;RTFM 和 STFW：如何知道你已完全搞砸了&lt;&#x2F;h3&gt;
&lt;p&gt;有一个古老而神圣的传统：如果你收到&lt;code&gt;RTFM （Read The Fucking Manual）&lt;&#x2F;code&gt;的回应，回答者认为你&lt;strong&gt;应该去读他妈的手册&lt;&#x2F;strong&gt;。当然，基本上他是对的，你应该去读一读。&lt;&#x2F;p&gt;
&lt;p&gt;RTFM 有一个年轻的亲戚。如果你收到&lt;code&gt;STFW（Search The Fucking Web）&lt;&#x2F;code&gt;的回应，回答者认为你&lt;strong&gt;应该到他妈的网上搜索&lt;&#x2F;strong&gt;。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 &lt;strong&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;lmgtfy.com&#x2F;&quot;&gt;Google 是你的朋友&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;！）&lt;&#x2F;p&gt;
&lt;p&gt;在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。&lt;&#x2F;p&gt;
&lt;p&gt;通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;你需要的信息非常容易获得&lt;&#x2F;strong&gt;；&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;你自己去搜索这些信息比灌给你，能让你学到更多&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;你不应该因此不爽；&lt;strong&gt;依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见&lt;&#x2F;strong&gt;。你应该对他祖母般的慈祥表示感谢。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;如果还是搞不懂&quot;&gt;如果还是搞不懂&lt;&#x2F;h3&gt;
&lt;p&gt;如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。&lt;&#x2F;p&gt;
&lt;p&gt;比方说，如果我回答你：&lt;code&gt;看来似乎是 zentry 卡住了；你应该先清除它。&lt;&#x2F;code&gt;，然后，这是一个&lt;strong&gt;很糟的&lt;&#x2F;strong&gt;后续问题回应：&lt;code&gt;zentry 是什么？&lt;&#x2F;code&gt; &lt;strong&gt;好&lt;&#x2F;strong&gt;的问法应该是这样：&lt;code&gt;哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;处理无礼的回应&quot;&gt;处理无礼的回应&lt;&#x2F;h3&gt;
&lt;p&gt;很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。&lt;&#x2F;p&gt;
&lt;p&gt;如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这&lt;strong&gt;没有&lt;&#x2F;strong&gt;发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而&lt;strong&gt;你&lt;&#x2F;strong&gt;将被视为有错的一方，这将伤害到你获取信息或帮助的机会。&lt;&#x2F;p&gt;
&lt;p&gt;另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。&lt;&#x2F;p&gt;
&lt;p&gt;（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会&lt;strong&gt;正常&lt;&#x2F;strong&gt;交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们&lt;strong&gt;喜欢&lt;&#x2F;strong&gt;我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。&lt;&#x2F;p&gt;
&lt;p&gt;Jeff Bigler 的观察总结和这个相关也值得一读 (&lt;strong&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.mit.edu&#x2F;~jcb&#x2F;tact.html&quot;&gt;tact filters&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;)。&lt;&#x2F;p&gt;
&lt;p&gt;在下一节，我们会谈到另一个问题，当&lt;strong&gt;你&lt;&#x2F;strong&gt;行为不当时所会受到的&lt;code&gt;冒犯&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;如何避免扮演失败者&quot;&gt;如何避免扮演失败者&lt;&#x2F;h2&gt;
&lt;p&gt;在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。&lt;&#x2F;p&gt;
&lt;p&gt;这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：&lt;&#x2F;p&gt;
&lt;p&gt;熬过去，这很正常。事实上，它是有益健康且合理的。&lt;&#x2F;p&gt;
&lt;p&gt;社区的标准不会自行维持，它们是通过参与者积极而&lt;strong&gt;公开地&lt;&#x2F;strong&gt;执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。&lt;&#x2F;p&gt;
&lt;p&gt;也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称&lt;code&gt;如果你不想帮助用户就闭嘴。&lt;&#x2F;code&gt; 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。&lt;&#x2F;p&gt;
&lt;p&gt;夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。&lt;&#x2F;p&gt;
&lt;p&gt;记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心&lt;strong&gt;你&lt;&#x2F;strong&gt;和&lt;strong&gt;他的社区&lt;&#x2F;strong&gt;而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。&lt;&#x2F;p&gt;
&lt;p&gt;有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是&lt;strong&gt;真的&lt;&#x2F;strong&gt;会把问题搞砸。&lt;&#x2F;p&gt;
&lt;p&gt;这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。&lt;&#x2F;p&gt;
&lt;p&gt;也别让自己卷入口水战，最好不要理睬大多数的口水战 -- 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;不该问的问题&quot;&gt;不该问的问题&lt;&#x2F;h2&gt;
&lt;p&gt;以下是几个经典蠢问题，以及黑客没回答时心中所想的：&lt;&#x2F;p&gt;
&lt;p&gt;问题：&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#q1&quot;&gt;我能在哪找到 X 程序或 X 资源？&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;问题：&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#q2&quot;&gt;我怎样用 X 做 Y？&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;问题：&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#q3&quot;&gt;如何设定我的 shell 提示？&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;问题：&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#q4&quot;&gt;我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;问题：&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#q5&quot;&gt;我的程序&#x2F;设定&#x2F;SQL 语句没有用&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;问题：&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#q6&quot;&gt;我的 Windows 电脑有问题，你能帮我吗？&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;问题：&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#q7&quot;&gt;我的程序不会动了，我认为系统工具 X 有问题&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;问题：&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#q8&quot;&gt;我在安装 Linux（或者 X ）时有问题，你能帮我吗？&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;问题：&lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#q9&quot;&gt;我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a id=&quot;q1&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我能在哪找到 X 程序或 X 资源？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.google.com&quot;&gt;Google&lt;&#x2F;a&gt; 吗？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a id=&quot;q2&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我怎样用 X 做 Y？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a id=&quot;q3&quot;&gt;&lt;&#x2F;a&gt;
&amp;gt;问题：如何设定我的 shell 提示？？&lt;&#x2F;p&gt;
&lt;p&gt;回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 &lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#RTFM&quot;&gt;RTFM&lt;&#x2F;a&gt;，然后自己去找出来。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a id=&quot;q4&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a id=&quot;q5&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我的{程序&#x2F;设定&#x2F;SQL 语句}不工作&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;你还有什么要补充的吗？&lt;&#x2F;li&gt;
&lt;li&gt;真糟糕，希望你能搞定。&lt;&#x2F;li&gt;
&lt;li&gt;这关我有什么屁事？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a id=&quot;q6&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我的 Windows 电脑有问题，你能帮我吗？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。&lt;&#x2F;p&gt;
&lt;p&gt;注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你&lt;strong&gt;可以&lt;&#x2F;strong&gt;问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a id=&quot;q7&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我的程序不会动了，我认为系统工具 X 有问题&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a id=&quot;q8&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.linux.org&#x2F;groups&#x2F;index.html&quot;&gt;这儿&lt;&#x2F;a&gt;找到使用者群组的清单）。&lt;&#x2F;p&gt;
&lt;p&gt;注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 &lt;code&gt;Linux&lt;&#x2F;code&gt; 和&lt;strong&gt;所有&lt;&#x2F;strong&gt;被怀疑的硬件作关键词仔细搜索。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a id=&quot;q9&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！&lt;&#x2F;p&gt;
&lt;h2 id=&quot;好问题与蠢问题&quot;&gt;好问题与蠢问题&lt;&#x2F;h2&gt;
&lt;p&gt;最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;蠢问题&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我可以在哪儿找到关于 Foonly Flurbamatic 的资料？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这种问法无非想得到 &lt;a href=&quot;https:&#x2F;&#x2F;bbpp222006.github.io&#x2F;%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7&#x2F;#RTFM&quot;&gt;STFW&lt;&#x2F;a&gt; 这样的回答。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;聪明问题&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我用 Google 搜索过 &amp;quot;Foonly Flurbamatic 2600&amp;quot;，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这个问题已经 STFW 过了，看起来他真的遇到了麻烦。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;蠢问题&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我从 foo 项目找来的源码没法编译。它怎么这么烂？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;他觉得都是别人的错，这个傲慢自大的提问者。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;聪明问题&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;蠢问题&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的主机板有问题了，谁来帮我？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;某黑客对这类问题的回答通常是：&lt;code&gt;好的，还要帮你拍拍背和换尿布吗？&lt;&#x2F;code&gt;，然后按下删除键。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;聪明问题&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。&lt;&#x2F;p&gt;
&lt;p&gt;在最后一个问题中，注意&lt;code&gt;告诉我答案&lt;&#x2F;code&gt;和&lt;code&gt;给我启示，指出我还应该做什么诊断工作&lt;&#x2F;code&gt;之间微妙而又重要的区别。&lt;&#x2F;p&gt;
&lt;p&gt;事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。&lt;&#x2F;p&gt;
&lt;p&gt;通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。&lt;&#x2F;p&gt;
&lt;p&gt;事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的&lt;strong&gt;名&lt;&#x2F;strong&gt;人，而是因为我用了正确的方式来提问。&lt;&#x2F;p&gt;
&lt;p&gt;黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我&lt;strong&gt;像&lt;&#x2F;strong&gt;个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;如果得不到回答&quot;&gt;如果得不到回答&lt;&#x2F;h2&gt;
&lt;p&gt;如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。&lt;&#x2F;p&gt;
&lt;p&gt;总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。&lt;&#x2F;p&gt;
&lt;p&gt;你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。&lt;&#x2F;p&gt;
&lt;p&gt;有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。&lt;&#x2F;p&gt;
&lt;p&gt;另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。&lt;&#x2F;p&gt;
&lt;p&gt;对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;如何更好地回答问题&quot;&gt;如何更好地回答问题&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;态度和善一点&lt;&#x2F;strong&gt;。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;对初犯者私下回复&lt;&#x2F;strong&gt;。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;如果你不确定，一定要说出来&lt;&#x2F;strong&gt;！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;如果帮不了忙，也别妨碍他&lt;&#x2F;strong&gt;。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;试探性的反问以引出更多的细节&lt;&#x2F;strong&gt;。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。&lt;&#x2F;p&gt;
&lt;p&gt;尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;如果你决定回答，就请给出好的答案&lt;&#x2F;strong&gt;。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;正面的回答问题&lt;&#x2F;strong&gt;！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 &lt;code&gt;试试看 A 或是 B&lt;&#x2F;code&gt; 或者 &lt;code&gt;试试 X 、 Y 、 Z 、 A 、 B 、 C&lt;&#x2F;code&gt; 并附上一个链接一点用都没有。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;帮助你的社区从问题中学习&lt;&#x2F;strong&gt;。当回复一个好问题时，问问自己&lt;code&gt;如何修改相关文件或常见问题文件以免再次解答同样的问题？&lt;&#x2F;code&gt;，接着再向文件维护者发一份补丁。&lt;&#x2F;p&gt;
&lt;p&gt;如果你是在研究一番后才做出的回答，&lt;strong&gt;展现你的技巧而不是直接端出结果&lt;&#x2F;strong&gt;。毕竟&lt;code&gt;授人以鱼不如授人以渔&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;相关资源&quot;&gt;相关资源&lt;&#x2F;h2&gt;
&lt;p&gt;如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.tldp.org&#x2F;HOWTO&#x2F;Unix-and-Internet-Fundamentals-HOWTO&#x2F;&quot;&gt;Unix 系统和网络基本原理&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;当你发布软件或补丁时，试着按&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.tldp.org&#x2F;HOWTO&#x2F;Software-Release-Practice-HOWTO&#x2F;index.html&quot;&gt;软件发布实践&lt;&#x2F;a&gt;操作。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;鸣谢&quot;&gt;鸣谢&lt;&#x2F;h2&gt;
&lt;p&gt;Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写&lt;code&gt;如何更好地回答问题&lt;&#x2F;code&gt;这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>人工电子鼻测试系统编写</title>
        <published>2019-10-24T00:00:00+00:00</published>
        <updated>2019-10-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/人工电子鼻测试系统(测试版本)安装教程/"/>
        <id>https://bbpp222006.github.io/人工电子鼻测试系统(测试版本)安装教程/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/人工电子鼻测试系统(测试版本)安装教程/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bbpp222006&#x2F;electronic-nose-system&quot;&gt;项目地址&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
安装等流程都在项目说明书里&lt;br &#x2F;&gt;
这里主要记载编写流程和思考&lt;&#x2F;p&gt;
&lt;h2 id=&quot;666&quot;&gt;666&lt;&#x2F;h2&gt;
&lt;p&gt;待补充&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>文章模板</title>
        <published>1970-01-01T00:00:00+00:00</published>
        <updated>1970-01-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bbpp222006.github.io/文章模板/"/>
        <id>https://bbpp222006.github.io/文章模板/</id>
        
        <content type="html" xml:base="https://bbpp222006.github.io/文章模板/">&lt;h1 id=&quot;图片&quot;&gt;图片&lt;&#x2F;h1&gt;
 
&lt;img src=&quot;img&#x2F;huashou1.jpg&quot; alt=&quot;Ferris is Happy&quot; width=&quot;300&quot; height=&quot;300&quot; loading=&quot;lazy&quot; &#x2F;&gt;
&lt;!-- ![画手](.&#x2F;img&#x2F;huashou1.jpg) --&gt;
&lt;h1 id=&quot;代码&quot;&gt;代码&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Hello, world!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;表格&quot;&gt;表格&lt;&#x2F;h1&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;1&lt;&#x2F;th&gt;&lt;th&gt;2&lt;&#x2F;th&gt;&lt;th&gt;3&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h1 id=&quot;公式&quot;&gt;公式&lt;&#x2F;h1&gt;
&lt;p&gt;$$
f(x) = \int_{-\infty}^\infty\hat f(\xi),e^{2 \pi i \xi x},d\xi
$$&lt;&#x2F;p&gt;
&lt;h1 id=&quot;链接&quot;&gt;链接&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
